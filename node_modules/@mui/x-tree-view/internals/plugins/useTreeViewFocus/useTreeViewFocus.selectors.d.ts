import { UseTreeViewFocusSignature } from "./useTreeViewFocus.types.js";
import { TreeViewRootSelector } from "../../utils/selectors.js";
/**
 * Get the item that should be sequentially focusable (usually with the Tab key).
 * At any point in time, there is a single item that can be sequentially focused in the Tree View.
 * This item is the first selected item (that is both visible and navigable), if any, or the first navigable item if no item is selected.
 * @param {TreeViewState<[UseTreeViewFocusSignature]>} state The state of the tree view.
 * @returns {TreeViewItemId | null} The id of the item that should be sequentially focusable.
 */
export declare const selectorDefaultFocusableItemId: ((state: any) => string | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: string[], resultFuncArgs_1: Map<string, true>, resultFuncArgs_2: {
    [itemId: string]: import("../..").TreeViewItemMeta;
  }, resultFuncArgs_3: boolean, resultFuncArgs_4: string[]) => string | null;
  memoizedResultFunc: ((resultFuncArgs_0: string[], resultFuncArgs_1: Map<string, true>, resultFuncArgs_2: {
    [itemId: string]: import("../..").TreeViewItemMeta;
  }, resultFuncArgs_3: boolean, resultFuncArgs_4: string[]) => string | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => string | null;
  dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewSelection/useTreeViewSelection.types").UseTreeViewSelectionState & Partial<{}> & {
    cacheKey: import("../../models").TreeViewStateCacheKey;
  }) => string[]) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: string | string[] | null) => string[];
    memoizedResultFunc: ((resultFuncArgs_0: string | string[] | null) => string[]) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => string[];
    dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewSelection/useTreeViewSelection.types").UseTreeViewSelectionState & Partial<{}> & {
      cacheKey: import("../../models").TreeViewStateCacheKey;
    }) => string | string[] | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        selectedItems: import("../useTreeViewSelection/useTreeViewSelection.types").TreeViewSelectionValue<boolean>;
        isEnabled: boolean;
        isMultiSelectEnabled: boolean;
        isCheckboxSelectionEnabled: boolean;
        selectionPropagation: import("../../..").TreeViewSelectionPropagation;
      }) => string | string[] | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        selectedItems: import("../useTreeViewSelection/useTreeViewSelection.types").TreeViewSelectionValue<boolean>;
        isEnabled: boolean;
        isMultiSelectEnabled: boolean;
        isCheckboxSelectionEnabled: boolean;
        selectionPropagation: import("../../..").TreeViewSelectionPropagation;
      }) => string | string[] | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => string | string[] | null;
      dependencies: [TreeViewRootSelector<import("../useTreeViewSelection").UseTreeViewSelectionSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      argsMemoize: typeof import("reselect").weakMapMemoize;
      memoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    argsMemoize: typeof import("reselect").weakMapMemoize;
    memoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewExpansion/useTreeViewExpansion.types").UseTreeViewExpansionState & Partial<{}> & {
    cacheKey: import("../../models").TreeViewStateCacheKey;
  }) => Map<string, true>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: string[]) => Map<string, true>;
    memoizedResultFunc: ((resultFuncArgs_0: string[]) => Map<string, true>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Map<string, true>;
    dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewExpansion/useTreeViewExpansion.types").UseTreeViewExpansionState & Partial<{}> & {
      cacheKey: import("../../models").TreeViewStateCacheKey;
    }) => string[]) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        expandedItems: string[];
        expansionTrigger: "content" | "iconContainer";
      }) => string[];
      memoizedResultFunc: ((resultFuncArgs_0: {
        expandedItems: string[];
        expansionTrigger: "content" | "iconContainer";
      }) => string[]) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => string[];
      dependencies: [TreeViewRootSelector<import("../useTreeViewExpansion").UseTreeViewExpansionSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      argsMemoize: typeof import("reselect").weakMapMemoize;
      memoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    argsMemoize: typeof import("reselect").weakMapMemoize;
    memoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewItems").UseTreeViewItemsState<import("../../..").TreeViewDefaultItemModelProperties> & Partial<{}> & {
    cacheKey: import("../../models").TreeViewStateCacheKey;
  }) => {
    [itemId: string]: import("../..").TreeViewItemMeta;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      disabledItemsFocusable: boolean;
      itemModelLookup: {
        [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
      };
      itemMetaLookup: {
        [itemId: string]: import("../..").TreeViewItemMeta;
      };
      itemOrderedChildrenIdsLookup: {
        [parentItemId: string]: string[];
      };
      itemChildrenIndexesLookup: {
        [parentItemId: string]: {
          [itemId: string]: number;
        };
      };
      loading: boolean;
      error: Error | null;
    }) => {
      [itemId: string]: import("../..").TreeViewItemMeta;
    };
    memoizedResultFunc: ((resultFuncArgs_0: {
      disabledItemsFocusable: boolean;
      itemModelLookup: {
        [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
      };
      itemMetaLookup: {
        [itemId: string]: import("../..").TreeViewItemMeta;
      };
      itemOrderedChildrenIdsLookup: {
        [parentItemId: string]: string[];
      };
      itemChildrenIndexesLookup: {
        [parentItemId: string]: {
          [itemId: string]: number;
        };
      };
      loading: boolean;
      error: Error | null;
    }) => {
      [itemId: string]: import("../..").TreeViewItemMeta;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      [itemId: string]: import("../..").TreeViewItemMeta;
    };
    dependencies: [TreeViewRootSelector<import("../useTreeViewItems").UseTreeViewItemsSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    argsMemoize: typeof import("reselect").weakMapMemoize;
    memoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewItems").UseTreeViewItemsState<import("../../..").TreeViewDefaultItemModelProperties> & Partial<{}> & {
    cacheKey: import("../../models").TreeViewStateCacheKey;
  }) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      disabledItemsFocusable: boolean;
      itemModelLookup: {
        [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
      };
      itemMetaLookup: {
        [itemId: string]: import("../..").TreeViewItemMeta;
      };
      itemOrderedChildrenIdsLookup: {
        [parentItemId: string]: string[];
      };
      itemChildrenIndexesLookup: {
        [parentItemId: string]: {
          [itemId: string]: number;
        };
      };
      loading: boolean;
      error: Error | null;
    }) => boolean;
    memoizedResultFunc: ((resultFuncArgs_0: {
      disabledItemsFocusable: boolean;
      itemModelLookup: {
        [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
      };
      itemMetaLookup: {
        [itemId: string]: import("../..").TreeViewItemMeta;
      };
      itemOrderedChildrenIdsLookup: {
        [parentItemId: string]: string[];
      };
      itemChildrenIndexesLookup: {
        [parentItemId: string]: {
          [itemId: string]: number;
        };
      };
      loading: boolean;
      error: Error | null;
    }) => boolean) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => boolean;
    dependencies: [TreeViewRootSelector<import("../useTreeViewItems").UseTreeViewItemsSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    argsMemoize: typeof import("reselect").weakMapMemoize;
    memoize: typeof import("reselect").weakMapMemoize;
  }, (state: any) => string[]];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  argsMemoize: typeof import("reselect").weakMapMemoize;
  memoize: typeof import("reselect").weakMapMemoize;
};
/**
 * Check if an item is the default focusable item.
 * @param {TreeViewState<[UseTreeViewFocusSignature]>} state The state of the tree view.
 * @param {TreeViewItemId} itemId The id of the item to check.
 * @returns {boolean} `true` if the item is the default focusable item, `false` otherwise.
 */
export declare const selectorIsItemTheDefaultFocusableItem: ((state: any, itemId: string) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: string | null, resultFuncArgs_1: string) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: string | null, resultFuncArgs_1: string) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [((state: any) => string | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: string[], resultFuncArgs_1: Map<string, true>, resultFuncArgs_2: {
      [itemId: string]: import("../..").TreeViewItemMeta;
    }, resultFuncArgs_3: boolean, resultFuncArgs_4: string[]) => string | null;
    memoizedResultFunc: ((resultFuncArgs_0: string[], resultFuncArgs_1: Map<string, true>, resultFuncArgs_2: {
      [itemId: string]: import("../..").TreeViewItemMeta;
    }, resultFuncArgs_3: boolean, resultFuncArgs_4: string[]) => string | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => string | null;
    dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewSelection/useTreeViewSelection.types").UseTreeViewSelectionState & Partial<{}> & {
      cacheKey: import("../../models").TreeViewStateCacheKey;
    }) => string[]) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: string | string[] | null) => string[];
      memoizedResultFunc: ((resultFuncArgs_0: string | string[] | null) => string[]) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => string[];
      dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewSelection/useTreeViewSelection.types").UseTreeViewSelectionState & Partial<{}> & {
        cacheKey: import("../../models").TreeViewStateCacheKey;
      }) => string | string[] | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          selectedItems: import("../useTreeViewSelection/useTreeViewSelection.types").TreeViewSelectionValue<boolean>;
          isEnabled: boolean;
          isMultiSelectEnabled: boolean;
          isCheckboxSelectionEnabled: boolean;
          selectionPropagation: import("../../..").TreeViewSelectionPropagation;
        }) => string | string[] | null;
        memoizedResultFunc: ((resultFuncArgs_0: {
          selectedItems: import("../useTreeViewSelection/useTreeViewSelection.types").TreeViewSelectionValue<boolean>;
          isEnabled: boolean;
          isMultiSelectEnabled: boolean;
          isCheckboxSelectionEnabled: boolean;
          selectionPropagation: import("../../..").TreeViewSelectionPropagation;
        }) => string | string[] | null) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => string | string[] | null;
        dependencies: [TreeViewRootSelector<import("../useTreeViewSelection").UseTreeViewSelectionSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        argsMemoize: typeof import("reselect").weakMapMemoize;
        memoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      argsMemoize: typeof import("reselect").weakMapMemoize;
      memoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewExpansion/useTreeViewExpansion.types").UseTreeViewExpansionState & Partial<{}> & {
      cacheKey: import("../../models").TreeViewStateCacheKey;
    }) => Map<string, true>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: string[]) => Map<string, true>;
      memoizedResultFunc: ((resultFuncArgs_0: string[]) => Map<string, true>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Map<string, true>;
      dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewExpansion/useTreeViewExpansion.types").UseTreeViewExpansionState & Partial<{}> & {
        cacheKey: import("../../models").TreeViewStateCacheKey;
      }) => string[]) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          expandedItems: string[];
          expansionTrigger: "content" | "iconContainer";
        }) => string[];
        memoizedResultFunc: ((resultFuncArgs_0: {
          expandedItems: string[];
          expansionTrigger: "content" | "iconContainer";
        }) => string[]) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => string[];
        dependencies: [TreeViewRootSelector<import("../useTreeViewExpansion").UseTreeViewExpansionSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        argsMemoize: typeof import("reselect").weakMapMemoize;
        memoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      argsMemoize: typeof import("reselect").weakMapMemoize;
      memoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewItems").UseTreeViewItemsState<import("../../..").TreeViewDefaultItemModelProperties> & Partial<{}> & {
      cacheKey: import("../../models").TreeViewStateCacheKey;
    }) => {
      [itemId: string]: import("../..").TreeViewItemMeta;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        disabledItemsFocusable: boolean;
        itemModelLookup: {
          [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
        };
        itemMetaLookup: {
          [itemId: string]: import("../..").TreeViewItemMeta;
        };
        itemOrderedChildrenIdsLookup: {
          [parentItemId: string]: string[];
        };
        itemChildrenIndexesLookup: {
          [parentItemId: string]: {
            [itemId: string]: number;
          };
        };
        loading: boolean;
        error: Error | null;
      }) => {
        [itemId: string]: import("../..").TreeViewItemMeta;
      };
      memoizedResultFunc: ((resultFuncArgs_0: {
        disabledItemsFocusable: boolean;
        itemModelLookup: {
          [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
        };
        itemMetaLookup: {
          [itemId: string]: import("../..").TreeViewItemMeta;
        };
        itemOrderedChildrenIdsLookup: {
          [parentItemId: string]: string[];
        };
        itemChildrenIndexesLookup: {
          [parentItemId: string]: {
            [itemId: string]: number;
          };
        };
        loading: boolean;
        error: Error | null;
      }) => {
        [itemId: string]: import("../..").TreeViewItemMeta;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => {
        [itemId: string]: import("../..").TreeViewItemMeta;
      };
      dependencies: [TreeViewRootSelector<import("../useTreeViewItems").UseTreeViewItemsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      argsMemoize: typeof import("reselect").weakMapMemoize;
      memoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("../useTreeViewItems").UseTreeViewItemsState<import("../../..").TreeViewDefaultItemModelProperties> & Partial<{}> & {
      cacheKey: import("../../models").TreeViewStateCacheKey;
    }) => boolean) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        disabledItemsFocusable: boolean;
        itemModelLookup: {
          [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
        };
        itemMetaLookup: {
          [itemId: string]: import("../..").TreeViewItemMeta;
        };
        itemOrderedChildrenIdsLookup: {
          [parentItemId: string]: string[];
        };
        itemChildrenIndexesLookup: {
          [parentItemId: string]: {
            [itemId: string]: number;
          };
        };
        loading: boolean;
        error: Error | null;
      }) => boolean;
      memoizedResultFunc: ((resultFuncArgs_0: {
        disabledItemsFocusable: boolean;
        itemModelLookup: {
          [itemId: string]: import("../../..").TreeViewBaseItem<import("../../..").TreeViewDefaultItemModelProperties>;
        };
        itemMetaLookup: {
          [itemId: string]: import("../..").TreeViewItemMeta;
        };
        itemOrderedChildrenIdsLookup: {
          [parentItemId: string]: string[];
        };
        itemChildrenIndexesLookup: {
          [parentItemId: string]: {
            [itemId: string]: number;
          };
        };
        loading: boolean;
        error: Error | null;
      }) => boolean) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => boolean;
      dependencies: [TreeViewRootSelector<import("../useTreeViewItems").UseTreeViewItemsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      argsMemoize: typeof import("reselect").weakMapMemoize;
      memoize: typeof import("reselect").weakMapMemoize;
    }, (state: any) => string[]];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    argsMemoize: typeof import("reselect").weakMapMemoize;
    memoize: typeof import("reselect").weakMapMemoize;
  }, (_: any, itemId: string) => string];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  argsMemoize: typeof import("reselect").weakMapMemoize;
  memoize: typeof import("reselect").weakMapMemoize;
};
/**
 * Get the id of the item that is currently focused.
 * @param {TreeViewState<[UseTreeViewFocusSignature]>} state The state of the tree view.
 * @returns {TreeViewItemId | null} The id of the item that is currently focused.
 */
export declare const selectorFocusedItemId: ((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("./useTreeViewFocus.types").UseTreeViewFocusState & Partial<{}> & {
  cacheKey: import("../../models").TreeViewStateCacheKey;
}) => string | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    focusedItemId: string | null;
  }) => string | null;
  memoizedResultFunc: ((resultFuncArgs_0: {
    focusedItemId: string | null;
  }) => string | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => string | null;
  dependencies: [TreeViewRootSelector<UseTreeViewFocusSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  argsMemoize: typeof import("reselect").weakMapMemoize;
  memoize: typeof import("reselect").weakMapMemoize;
};
/**
 * Check if an item is focused.
 * @param {TreeViewState<[UseTreeViewFocusSignature]>} state The state of the tree view.
 * @param {TreeViewItemId} itemId The id of the item to check.
 * @returns {boolean} `true` if the item is focused, `false` otherwise.
 */
export declare const selectorIsItemFocused: ((state: any, itemId: string) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: string | null, resultFuncArgs_1: string) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: string | null, resultFuncArgs_1: string) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [((state: import("../../corePlugins/useTreeViewId/useTreeViewId.types").UseTreeViewIdState & import("./useTreeViewFocus.types").UseTreeViewFocusState & Partial<{}> & {
    cacheKey: import("../../models").TreeViewStateCacheKey;
  }) => string | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      focusedItemId: string | null;
    }) => string | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      focusedItemId: string | null;
    }) => string | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => string | null;
    dependencies: [TreeViewRootSelector<UseTreeViewFocusSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    argsMemoize: typeof import("reselect").weakMapMemoize;
    memoize: typeof import("reselect").weakMapMemoize;
  }, (_: any, itemId: string) => string];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  argsMemoize: typeof import("reselect").weakMapMemoize;
  memoize: typeof import("reselect").weakMapMemoize;
};