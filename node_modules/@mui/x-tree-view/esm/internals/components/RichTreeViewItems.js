import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["ownerState"];
import * as React from 'react';
import useSlotProps from '@mui/utils/useSlotProps';
import { fastObjectShallowCompare } from '@mui/x-internals/fastObjectShallowCompare';
import { TreeItem } from "../../TreeItem/index.js";
import { useSelector } from "../hooks/useSelector.js";
import { selectorItemMeta, selectorItemOrderedChildrenIds } from "../plugins/useTreeViewItems/useTreeViewItems.selectors.js";
import { useTreeViewContext } from "../TreeViewProvider/index.js";
import { jsx as _jsx } from "react/jsx-runtime";
const RichTreeViewItemsContext = /*#__PURE__*/React.createContext(null);
if (process.env.NODE_ENV !== 'production') {
  RichTreeViewItemsContext.displayName = 'RichTreeViewItemsProvider';
}
const WrappedTreeItem = /*#__PURE__*/React.memo(function WrappedTreeItem({
  itemSlot,
  itemSlotProps,
  itemId
}) {
  const renderItemForRichTreeView = React.useContext(RichTreeViewItemsContext);
  const {
    store
  } = useTreeViewContext();
  const itemMeta = useSelector(store, selectorItemMeta, itemId);
  const children = useSelector(store, selectorItemOrderedChildrenIds, itemId);
  const Item = itemSlot ?? TreeItem;
  const _useSlotProps = useSlotProps({
      elementType: Item,
      externalSlotProps: itemSlotProps,
      additionalProps: {
        label: itemMeta?.label,
        id: itemMeta?.idAttribute,
        itemId
      },
      ownerState: {
        itemId,
        label: itemMeta?.label
      }
    }),
    itemProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded);
  return /*#__PURE__*/_jsx(Item, _extends({}, itemProps, {
    children: children?.map(renderItemForRichTreeView)
  }));
}, fastObjectShallowCompare);
export function RichTreeViewItems(props) {
  const {
    slots,
    slotProps
  } = props;
  const {
    store
  } = useTreeViewContext();
  const itemSlot = slots?.item;
  const itemSlotProps = slotProps?.item;
  const items = useSelector(store, selectorItemOrderedChildrenIds, null);
  const renderItem = React.useCallback(itemId => {
    return /*#__PURE__*/_jsx(WrappedTreeItem, {
      itemSlot: itemSlot,
      itemSlotProps: itemSlotProps,
      itemId: itemId
    }, itemId);
  }, [itemSlot, itemSlotProps]);
  return /*#__PURE__*/_jsx(RichTreeViewItemsContext.Provider, {
    value: renderItem,
    children: items.map(renderItem)
  });
}