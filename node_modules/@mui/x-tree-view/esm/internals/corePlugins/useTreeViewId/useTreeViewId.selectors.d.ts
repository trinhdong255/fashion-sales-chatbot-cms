import { TreeViewRootSelector } from "../../utils/selectors.js";
import { UseTreeViewIdSignature } from "./useTreeViewId.types.js";
/**
 * Get the id attribute of the tree view.
 * @param {TreeViewState<[UseTreeViewIdSignature]>} state The state of the tree view.
 * @returns {string} The id attribute of the tree view.
 */
export declare const selectorTreeViewId: ((state: import("./useTreeViewId.types").UseTreeViewIdState & Partial<{}> & {
  cacheKey: import("../../models").TreeViewStateCacheKey;
}) => string | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    treeId: string | undefined;
    providedTreeId: string | undefined;
  }) => string | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    treeId: string | undefined;
    providedTreeId: string | undefined;
  }) => string | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => string | undefined;
  dependencies: [TreeViewRootSelector<UseTreeViewIdSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  argsMemoize: typeof import("reselect").weakMapMemoize;
  memoize: typeof import("reselect").weakMapMemoize;
};