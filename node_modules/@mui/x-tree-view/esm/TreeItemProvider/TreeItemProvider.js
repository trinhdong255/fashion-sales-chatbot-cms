'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useTreeViewContext } from "../internals/TreeViewProvider/index.js";
import { generateTreeItemIdAttribute } from "../internals/corePlugins/useTreeViewId/useTreeViewId.utils.js";
import { useSelector } from "../internals/hooks/useSelector.js";
import { selectorTreeViewId } from "../internals/corePlugins/useTreeViewId/useTreeViewId.selectors.js";
import { jsx as _jsx } from "react/jsx-runtime";
function TreeItemProvider(props) {
  const {
    children,
    itemId,
    id
  } = props;
  const {
    wrapItem,
    instance,
    store
  } = useTreeViewContext();
  const treeId = useSelector(store, selectorTreeViewId);
  const idAttribute = generateTreeItemIdAttribute({
    itemId,
    treeId,
    id
  });
  return /*#__PURE__*/_jsx(React.Fragment, {
    children: wrapItem({
      children,
      itemId,
      instance,
      idAttribute
    })
  });
}
process.env.NODE_ENV !== "production" ? TreeItemProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: PropTypes.node,
  id: PropTypes.string,
  itemId: PropTypes.string.isRequired
} : void 0;
export { TreeItemProvider };