import {
  require_with_selector
} from "./chunk-EKFMV3BE.js";
import {
  NoSsr_default
} from "./chunk-MGYMSEJJ.js";
import {
  HTMLElementType,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  isDeepEqual,
  ownerWindow,
  reactMajor_default,
  resolveProps,
  useEnhancedEffect_default,
  useEventCallback_default,
  useForkRef,
  useId,
  useLazyRef,
  useRtl,
  useSlotProps_default,
  warnOnce
} from "./chunk-TRTRTRGV.js";
import {
  Popper_default,
  Typography_default,
  _objectWithoutPropertiesLoose
} from "./chunk-SB7ORRPO.js";
import {
  useThemeProps
} from "./chunk-DC6ZOEGX.js";
import "./chunk-AACZXOME.js";
import {
  createSelectorCreator,
  lruMemoize
} from "./chunk-IIUSGDYG.js";
import "./chunk-A7ECLLTJ.js";
import "./chunk-PP7BKHK5.js";
import {
  _extends,
  clsx,
  clsx_default,
  require_prop_types,
  styled_default,
  useTheme
} from "./chunk-OOBHZKUM.js";
import {
  require_jsx_runtime
} from "./chunk-JNNNAK6O.js";
import {
  require_react
} from "./chunk-HSUUC2QV.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/bezier-easing/src/index.js
var require_src = __commonJS({
  "node_modules/bezier-easing/src/index.js"(exports, module) {
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 1e-3;
    var SUBDIVISION_PRECISION = 1e-7;
    var SUBDIVISION_MAX_ITERATIONS = 10;
    var kSplineTableSize = 11;
    var kSampleStepSize = 1 / (kSplineTableSize - 1);
    var float32ArraySupported = typeof Float32Array === "function";
    function A2(aA1, aA2) {
      return 1 - 3 * aA2 + 3 * aA1;
    }
    function B3(aA1, aA2) {
      return 3 * aA2 - 6 * aA1;
    }
    function C3(aA1) {
      return 3 * aA1;
    }
    function calcBezier(aT, aA1, aA2) {
      return ((A2(aA1, aA2) * aT + B3(aA1, aA2)) * aT + C3(aA1)) * aT;
    }
    function getSlope(aT, aA1, aA2) {
      return 3 * A2(aA1, aA2) * aT * aT + 2 * B3(aA1, aA2) * aT + C3(aA1);
    }
    function binarySubdivide(aX, aA, aB, mX1, mX2) {
      var currentX, currentT, i = 0;
      do {
        currentT = aA + (aB - aA) / 2;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
      return currentT;
    }
    function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
      for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0) {
          return aGuessT;
        }
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
      }
      return aGuessT;
    }
    function LinearEasing(x2) {
      return x2;
    }
    module.exports = function bezier(mX1, mY1, mX2, mY2) {
      if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
        throw new Error("bezier x values must be in [0, 1] range");
      }
      if (mX1 === mY1 && mX2 === mY2) {
        return LinearEasing;
      }
      var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
      function getTForX(aX) {
        var intervalStart = 0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;
        var dist2 = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist2 * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      }
      return function BezierEasing2(x2) {
        if (x2 === 0) {
          return 0;
        }
        if (x2 === 1) {
          return 1;
        }
        return calcBezier(getTForX(x2), mY1, mY2);
      };
    };
  }
});

// node_modules/@mui/x-charts/esm/constants/index.js
var DEFAULT_X_AXIS_KEY = "DEFAULT_X_AXIS_KEY";
var DEFAULT_Y_AXIS_KEY = "DEFAULT_Y_AXIS_KEY";
var DEFAULT_ROTATION_AXIS_KEY = "DEFAULT_ROTATION_AXIS_KEY";
var DEFAULT_RADIUS_AXIS_KEY = "DEFAULT_RADIUS_AXIS_KEY";
var DEFAULT_MARGINS = {
  top: 20,
  bottom: 20,
  left: 20,
  right: 20
};
var DEFAULT_AXIS_SIZE_WIDTH = 45;
var DEFAULT_AXIS_SIZE_HEIGHT = 25;
var AXIS_LABEL_DEFAULT_HEIGHT = 20;

// node_modules/@mui/x-charts/esm/context/ChartProvider/ChartProvider.js
var React11 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/store/useCharts.js
var React6 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/utils/ChartStore.js
var ChartStore = class {
  constructor(value) {
    this.value = void 0;
    this.listeners = void 0;
    this.subscribe = (fn) => {
      this.listeners.add(fn);
      return () => {
        this.listeners.delete(fn);
      };
    };
    this.getSnapshot = () => {
      return this.value;
    };
    this.update = (updater) => {
      const newState = updater(this.value);
      if (newState !== this.value) {
        this.value = newState;
        this.listeners.forEach((l) => l(newState));
      }
    };
    this.value = value;
    this.listeners = /* @__PURE__ */ new Set();
  }
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.js
var React = __toESM(require_react(), 1);
var useChartAnimation = ({
  params,
  store
}) => {
  React.useEffect(() => {
    store.update((prevState) => {
      return _extends({}, prevState, {
        animation: _extends({}, prevState.animation, {
          skip: params.skipAnimation
        })
      });
    });
  }, [store, params.skipAnimation]);
  const disableAnimation = React.useCallback(() => {
    let disableCalled = false;
    store.update((prevState) => _extends({}, prevState, {
      animation: _extends({}, prevState.animation, {
        skipAnimationRequests: prevState.animation.skipAnimationRequests + 1
      })
    }));
    return () => {
      if (disableCalled) {
        return;
      }
      disableCalled = true;
      store.update((prevState) => _extends({}, prevState, {
        animation: _extends({}, prevState.animation, {
          skipAnimationRequests: prevState.animation.skipAnimationRequests - 1
        })
      }));
    };
  }, [store]);
  useEnhancedEffect_default(() => {
    const isAnimationDisabledEnvironment = typeof window === "undefined" || !(window == null ? void 0 : window.matchMedia);
    if (isAnimationDisabledEnvironment) {
      return void 0;
    }
    let disableAnimationCleanup;
    const handleMediaChange = (event) => {
      if (event.matches) {
        disableAnimationCleanup = disableAnimation();
      } else {
        disableAnimationCleanup == null ? void 0 : disableAnimationCleanup();
      }
    };
    const mql = window.matchMedia("(prefers-reduced-motion)");
    handleMediaChange(mql);
    mql.addEventListener("change", handleMediaChange);
    return () => {
      mql.removeEventListener("change", handleMediaChange);
    };
  }, [disableAnimation, store]);
  return {
    instance: {
      disableAnimation
    }
  };
};
useChartAnimation.params = {
  skipAnimation: true
};
useChartAnimation.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  skipAnimation: params.skipAnimation ?? false
});
useChartAnimation.getInitialState = ({
  skipAnimation
}) => {
  const isAnimationDisabledEnvironment = typeof window === "undefined" || !(window == null ? void 0 : window.matchMedia);
  const disableAnimations = false ? isAnimationDisabledEnvironment : false;
  return {
    animation: {
      skip: skipAnimation,
      // By initializing the skipAnimationRequests to 1, we ensure that the animation is always skipped
      skipAnimationRequests: disableAnimations ? 1 : 0
    }
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/utils/selectors.js
var reselectCreateSelector = createSelectorCreator({
  memoize: lruMemoize,
  memoizeOptions: {
    maxSize: 1,
    equalityCheck: Object.is
  }
});
var cache = /* @__PURE__ */ new WeakMap();
var createSelector = (...createSelectorArgs) => {
  const selector = (state, selectorArgs) => {
    const cacheKey = state.cacheKey;
    let cacheForCurrentChartInstance = cache.get(cacheKey);
    if (!cacheForCurrentChartInstance) {
      cacheForCurrentChartInstance = /* @__PURE__ */ new Map();
      cache.set(cacheKey, cacheForCurrentChartInstance);
    }
    const cachedSelector = cacheForCurrentChartInstance.get(createSelectorArgs);
    if (cachedSelector) {
      return cachedSelector(state, selectorArgs);
    }
    const fn = reselectCreateSelector(...createSelectorArgs);
    cacheForCurrentChartInstance.set(createSelectorArgs, fn);
    return fn(state, selectorArgs);
  };
  return selector;
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.selectors.js
var selectorChartAnimationState = (state) => state.animation;
var selectorChartSkipAnimation = createSelector(selectorChartAnimationState, (state) => state.skip || state.skipAnimationRequests > 0);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.js
var React2 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxisLayout.selectors.js
var selectorChartCartesianAxisState = (state) => state.cartesianAxis;
var selectorChartRawXAxis = createSelector(selectorChartCartesianAxisState, (axis) => axis == null ? void 0 : axis.x);
var selectorChartRawYAxis = createSelector(selectorChartCartesianAxisState, (axis) => axis == null ? void 0 : axis.y);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartAxisSize.selectors.js
var selectorChartLeftAxisSize = createSelector([selectorChartRawYAxis], (yAxis) => (yAxis ?? []).reduce((acc, axis) => axis.position === "left" ? acc + (axis.width || 0) : acc, 0));
var selectorChartRightAxisSize = createSelector([selectorChartRawYAxis], (yAxis) => (yAxis ?? []).reduce((acc, axis) => axis.position === "right" ? acc + (axis.width || 0) : acc, 0));
var selectorChartTopAxisSize = createSelector([selectorChartRawXAxis], (xAxis) => (xAxis ?? []).reduce((acc, axis) => axis.position === "top" ? acc + (axis.height || 0) : acc, 0));
var selectorChartBottomAxisSize = createSelector([selectorChartRawXAxis], (xAxis) => (xAxis ?? []).reduce((acc, axis) => axis.position === "bottom" ? acc + (axis.height || 0) : acc, 0));

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.selectors.js
var selectorChartDimensionsState = (state) => state.dimensions;
var selectorChartMargin = createSelector(selectorChartDimensionsState, (dimensionsState) => dimensionsState.margin);
var selectorChartWidth = createSelector(selectorChartDimensionsState, (dimensionsState) => dimensionsState.width);
var selectorChartHeight = createSelector(selectorChartDimensionsState, (dimensionsState) => dimensionsState.height);
var selectorChartTopMargin = createSelector(selectorChartMargin, (margin) => margin.top);
var selectorChartRightMargin = createSelector(selectorChartMargin, (margin) => margin.right);
var selectorChartBottomMargin = createSelector(selectorChartMargin, (margin) => margin.bottom);
var selectorChartLeftMargin = createSelector(selectorChartMargin, (margin) => margin.left);
var selectorChartDrawingArea = createSelector(selectorChartWidth, selectorChartHeight, selectorChartTopMargin, selectorChartRightMargin, selectorChartBottomMargin, selectorChartLeftMargin, selectorChartTopAxisSize, selectorChartRightAxisSize, selectorChartBottomAxisSize, selectorChartLeftAxisSize, (width, height, marginTop, marginRight, marginBottom, marginLeft, axisSizeTop, axisSizeRight, axisSizeBottom, axisSizeLeft) => ({
  width: width - marginLeft - marginRight - axisSizeLeft - axisSizeRight,
  left: marginLeft + axisSizeLeft,
  right: marginRight + axisSizeRight,
  height: height - marginTop - marginBottom - axisSizeTop - axisSizeBottom,
  top: marginTop + axisSizeTop,
  bottom: marginBottom + axisSizeBottom
}));
var selectorChartPropsSize = createSelector(selectorChartDimensionsState, (dimensionsState) => ({
  width: dimensionsState.propsWidth,
  height: dimensionsState.propsHeight
}));
var selectorChartContainerSize = createSelector(selectorChartWidth, selectorChartHeight, (width, height) => ({
  width,
  height
}));

// node_modules/@mui/x-charts/esm/internals/defaultizeMargin.js
function defaultizeMargin(input, defaultMargin2) {
  if (typeof input === "number") {
    return {
      top: input,
      bottom: input,
      left: input,
      right: input
    };
  }
  if (defaultMargin2) {
    return _extends({}, defaultMargin2, input);
  }
  return input;
}

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.js
var MAX_COMPUTE_RUN = 10;
var useChartDimensions = ({
  params,
  store,
  svgRef
}) => {
  const hasInSize = params.width !== void 0 && params.height !== void 0;
  const stateRef = React2.useRef({
    displayError: false,
    initialCompute: true,
    computeRun: 0
  });
  const [innerWidth, setInnerWidth] = React2.useState(0);
  const [innerHeight, setInnerHeight] = React2.useState(0);
  const computeSize = React2.useCallback(() => {
    const mainEl = svgRef == null ? void 0 : svgRef.current;
    if (!mainEl) {
      return {};
    }
    const win = ownerWindow(mainEl);
    const computedStyle = win.getComputedStyle(mainEl);
    const newHeight = Math.floor(parseFloat(computedStyle.height)) || 0;
    const newWidth = Math.floor(parseFloat(computedStyle.width)) || 0;
    store.update((prev) => {
      if (prev.dimensions.width === newWidth && prev.dimensions.height === newHeight) {
        return prev;
      }
      return _extends({}, prev, {
        dimensions: {
          margin: {
            top: params.margin.top,
            right: params.margin.right,
            bottom: params.margin.bottom,
            left: params.margin.left
          },
          width: params.width ?? newWidth,
          height: params.height ?? newHeight,
          propsWidth: params.width,
          propsHeight: params.height
        }
      });
    });
    return {
      height: newHeight,
      width: newWidth
    };
  }, [
    store,
    svgRef,
    params.height,
    params.width,
    // Margin is an object, so we need to include all the properties to prevent infinite loops.
    params.margin.left,
    params.margin.right,
    params.margin.top,
    params.margin.bottom
  ]);
  React2.useEffect(() => {
    store.update((prev) => {
      const width = params.width ?? prev.dimensions.width;
      const height = params.height ?? prev.dimensions.height;
      return _extends({}, prev, {
        dimensions: {
          margin: {
            top: params.margin.top,
            right: params.margin.right,
            bottom: params.margin.bottom,
            left: params.margin.left
          },
          width,
          height,
          propsHeight: params.height,
          propsWidth: params.width
        }
      });
    });
  }, [
    store,
    params.height,
    params.width,
    // Margin is an object, so we need to include all the properties to prevent infinite loops.
    params.margin.left,
    params.margin.right,
    params.margin.top,
    params.margin.bottom
  ]);
  React2.useEffect(() => {
    stateRef.current.displayError = true;
  }, []);
  useEnhancedEffect_default(() => {
    if (hasInSize || !stateRef.current.initialCompute || stateRef.current.computeRun > MAX_COMPUTE_RUN) {
      return;
    }
    const computedSize = computeSize();
    if (computedSize.width !== innerWidth || computedSize.height !== innerHeight) {
      stateRef.current.computeRun += 1;
      if (computedSize.width !== void 0) {
        setInnerWidth(computedSize.width);
      }
      if (computedSize.height !== void 0) {
        setInnerHeight(computedSize.height);
      }
    } else if (stateRef.current.initialCompute) {
      stateRef.current.initialCompute = false;
    }
  }, [innerHeight, innerWidth, computeSize, hasInSize]);
  useEnhancedEffect_default(() => {
    if (hasInSize) {
      return () => {
      };
    }
    computeSize();
    const elementToObserve = svgRef.current;
    if (typeof ResizeObserver === "undefined") {
      return () => {
      };
    }
    let animationFrame;
    const observer = new ResizeObserver(() => {
      animationFrame = requestAnimationFrame(() => {
        computeSize();
      });
    });
    if (elementToObserve) {
      observer.observe(elementToObserve);
    }
    return () => {
      if (animationFrame) {
        cancelAnimationFrame(animationFrame);
      }
      if (elementToObserve) {
        observer.unobserve(elementToObserve);
      }
    };
  }, [computeSize, hasInSize, svgRef]);
  if (true) {
    if (stateRef.current.displayError && params.width === void 0 && innerWidth === 0) {
      console.error(`MUI X: ChartContainer does not have \`width\` prop, and its container has no \`width\` defined.`);
      stateRef.current.displayError = false;
    }
    if (stateRef.current.displayError && params.height === void 0 && innerHeight === 0) {
      console.error(`MUI X: ChartContainer does not have \`height\` prop, and its container has no \`height\` defined.`);
      stateRef.current.displayError = false;
    }
  }
  const isPointInside = React2.useCallback(({
    x: x2,
    y: y2
  }, options) => {
    if ((options == null ? void 0 : options.targetElement) && (options == null ? void 0 : options.targetElement.closest("[data-drawing-container]"))) {
      return true;
    }
    const drawingArea = selectorChartDrawingArea(store.value);
    const isInsideX = x2 >= drawingArea.left - 1 && x2 <= drawingArea.left + drawingArea.width;
    const isInsideY = y2 >= drawingArea.top - 1 && y2 <= drawingArea.top + drawingArea.height;
    if ((options == null ? void 0 : options.direction) === "x") {
      return isInsideX;
    }
    if ((options == null ? void 0 : options.direction) === "y") {
      return isInsideY;
    }
    return isInsideX && isInsideY;
  }, [store.value]);
  return {
    instance: {
      isPointInside
    }
  };
};
useChartDimensions.params = {
  width: true,
  height: true,
  margin: true
};
useChartDimensions.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  margin: defaultizeMargin(params.margin, DEFAULT_MARGINS)
});
useChartDimensions.getInitialState = ({
  width,
  height,
  margin
}) => {
  return {
    dimensions: {
      margin,
      width: width ?? 0,
      height: height ?? 0,
      propsWidth: width,
      propsHeight: height
    }
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.js
var React3 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.utils.js
var globalChartDefaultId = 0;
var createChartDefaultId = () => {
  globalChartDefaultId += 1;
  return `mui-chart-${globalChartDefaultId}`;
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.js
var useChartId = ({
  params,
  store
}) => {
  React3.useEffect(() => {
    store.update((prevState) => {
      if (params.id === void 0 || params.id === prevState.id.providedChartId && prevState.id.chartId !== void 0) {
        return prevState;
      }
      return _extends({}, prevState, {
        id: _extends({}, prevState.id, {
          chartId: params.id ?? createChartDefaultId()
        })
      });
    });
  }, [store, params.id]);
  return {};
};
useChartId.params = {
  id: true
};
useChartId.getInitialState = ({
  id
}) => ({
  id: {
    chartId: id,
    providedChartId: id
  }
});

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.selectors.js
var selectorChartIdState = (state) => state.id;
var selectorChartId = createSelector(selectorChartIdState, (idState) => idState.chartId);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.js
var React4 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/colorPalettes/colorPalettes.js
var rainbowSurgePaletteLight = ["#4254FB", "#FFB422", "#FA4F58", "#0DBEFF", "#22BF75", "#FA83B4", "#FF7511"];
var rainbowSurgePaletteDark = ["#495AFB", "#FFC758", "#F35865", "#30C8FF", "#44CE8D", "#F286B3", "#FF8C39"];
var rainbowSurgePalette = (mode2) => mode2 === "dark" ? rainbowSurgePaletteDark : rainbowSurgePaletteLight;
var blueberryTwilightPaletteLight = ["#02B2AF", "#2E96FF", "#B800D8", "#60009B", "#2731C8", "#03008D"];
var blueberryTwilightPaletteDark = ["#02B2AF", "#72CCFF", "#DA00FF", "#9001CB", "#2E96FF", "#3B48E0"];
var blueberryTwilightPalette = (mode2) => mode2 === "dark" ? blueberryTwilightPaletteDark : blueberryTwilightPaletteLight;
var mangoFusionPaletteLight = ["#173A5E", "#00A3A0", "#C91B63", "#EF5350", "#FFA726", "#B800D8", "#60009B", "#2E96FF", "#2731C8", "#03008D"];
var mangoFusionPaletteDark = ["#41698F", "#19D0CD", "#DE196B", "#FC5F5C", "#FFD771", "#DA00FF", "#9001CB", "#72CCFF", "#2E96FF", "#3B48E0"];
var mangoFusionPalette = (mode2) => mode2 === "dark" ? mangoFusionPaletteDark : mangoFusionPaletteLight;
var cheerfulFiestaPaletteDark = ["#0059B2", "#2E96FF", "#FFC24C", "#FF9F0E", "#F38200", "#2ABFDE", "#1F94AD", "#BD2C38", "#FF3143", "#FF8282"];
var cheerfulFiestaPaletteLight = ["#003A75", "#007FFF", "#FFC24C", "#FF9D09", "#CA6C00", "#127D94", "#1F94AD", "#C82634", "#FF3143", "#FF7E7E"];
var cheerfulFiestaPalette = (mode2) => mode2 === "dark" ? cheerfulFiestaPaletteDark : cheerfulFiestaPaletteLight;

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/processSeries.js
var preprocessSeries = ({
  series,
  colors,
  seriesConfig: seriesConfig5,
  dataset
}) => {
  const seriesGroups = {};
  series.forEach((seriesData, seriesIndex) => {
    var _a;
    const seriesWithDefaultValues = seriesConfig5[seriesData.type].getSeriesWithDefaultValues(seriesData, seriesIndex, colors);
    const id = seriesWithDefaultValues.id;
    if (seriesGroups[seriesData.type] === void 0) {
      seriesGroups[seriesData.type] = {
        series: {},
        seriesOrder: []
      };
    }
    if (((_a = seriesGroups[seriesData.type]) == null ? void 0 : _a.series[id]) !== void 0) {
      throw new Error(`MUI X: series' id "${id}" is not unique.`);
    }
    seriesGroups[seriesData.type].series[id] = seriesWithDefaultValues;
    seriesGroups[seriesData.type].seriesOrder.push(id);
  });
  const processedSeries = {};
  Object.keys(seriesConfig5).forEach((type) => {
    var _a, _b;
    const group2 = seriesGroups[type];
    if (group2 !== void 0) {
      processedSeries[type] = ((_b = (_a = seriesConfig5[type]) == null ? void 0 : _a.seriesProcessor) == null ? void 0 : _b.call(_a, group2, dataset)) ?? seriesGroups[type];
    }
  });
  return processedSeries;
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.js
var useChartSeries = ({
  params,
  store,
  seriesConfig: seriesConfig5
}) => {
  const {
    series,
    dataset,
    theme,
    colors
  } = params;
  const isFirstRender = React4.useRef(true);
  React4.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      series: _extends({}, prev.series, {
        processedSeries: preprocessSeries({
          series,
          colors: typeof colors === "function" ? colors(theme) : colors,
          seriesConfig: seriesConfig5,
          dataset
        })
      })
    }));
  }, [colors, dataset, series, theme, seriesConfig5, store]);
  return {};
};
useChartSeries.params = {
  dataset: true,
  series: true,
  colors: true,
  theme: true
};
var EMPTY_ARRAY = [];
useChartSeries.getDefaultizedParams = ({
  params
}) => {
  var _a;
  return _extends({}, params, {
    series: ((_a = params.series) == null ? void 0 : _a.length) ? params.series : EMPTY_ARRAY,
    colors: params.colors ?? rainbowSurgePalette,
    theme: params.theme ?? "light"
  });
};
useChartSeries.getInitialState = ({
  series = [],
  colors,
  theme,
  dataset
}, _, seriesConfig5) => {
  return {
    series: {
      seriesConfig: seriesConfig5,
      processedSeries: preprocessSeries({
        series,
        colors: typeof colors === "function" ? colors(theme) : colors,
        seriesConfig: seriesConfig5,
        dataset
      })
    }
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.selectors.js
var selectorChartSeriesState = (state) => state.series;
var selectorChartSeriesProcessed = createSelector(selectorChartSeriesState, (seriesState) => seriesState.processedSeries);
var selectorChartSeriesConfig = createSelector(selectorChartSeriesState, (seriesState) => seriesState.seriesConfig);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/corePlugins.js
var CHART_CORE_PLUGINS = [useChartId, useChartDimensions, useChartSeries, useChartAnimation];

// node_modules/@mui/x-charts/esm/internals/store/extractPluginParamsFromProps.js
var _excluded = ["apiRef"];
var extractPluginParamsFromProps = (_ref) => {
  let {
    plugins
  } = _ref, props = _objectWithoutPropertiesLoose(_ref.props, _excluded);
  const paramsLookup = {};
  plugins.forEach((plugin) => {
    Object.assign(paramsLookup, plugin.params);
  });
  const pluginParams = {};
  Object.keys(props).forEach((propName) => {
    const prop = props[propName];
    if (paramsLookup[propName]) {
      pluginParams[propName] = prop;
    }
  });
  const defaultizedPluginParams = plugins.reduce((acc, plugin) => {
    if (plugin.getDefaultizedParams) {
      return plugin.getDefaultizedParams({
        params: acc
      });
    }
    return acc;
  }, pluginParams);
  return defaultizedPluginParams;
};

// node_modules/@mui/x-charts/esm/internals/store/useChartModels.js
var React5 = __toESM(require_react(), 1);
var useChartModels = (plugins, props) => {
  const modelsRef = React5.useRef({});
  const [modelsState, setModelsState] = React5.useState(() => {
    const initialState = {};
    plugins.forEach((plugin) => {
      if (plugin.models) {
        Object.entries(plugin.models).forEach(([modelName, modelInitializer]) => {
          modelsRef.current[modelName] = {
            isControlled: props[modelName] !== void 0,
            getDefaultValue: modelInitializer.getDefaultValue
          };
          initialState[modelName] = modelInitializer.getDefaultValue(props);
        });
      }
    });
    return initialState;
  });
  const models = Object.fromEntries(Object.entries(modelsRef.current).map(([modelName, model]) => {
    const value = props[modelName] ?? modelsState[modelName];
    return [modelName, {
      value,
      setControlledValue: (newValue) => {
        if (!model.isControlled) {
          setModelsState((prevState) => _extends({}, prevState, {
            [modelName]: typeof newValue === "function" ? newValue(value) : newValue
          }));
        }
      },
      isControlled: modelsRef.current[modelName].isControlled
    }];
  }));
  if (true) {
    Object.entries(modelsRef.current).forEach(([modelName, model]) => {
      const controlled = props[modelName];
      const newDefaultValue = model.getDefaultValue(props);
      React5.useEffect(() => {
        if (model.isControlled !== (controlled !== void 0)) {
          console.error([`MUI X: A component is changing the ${model.isControlled ? "" : "un"}controlled ${modelName} state of Chart to be ${model.isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${modelName} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [controlled]);
      const {
        current: defaultValue
      } = React5.useRef(newDefaultValue);
      React5.useEffect(() => {
        if (!model.isControlled && defaultValue !== newDefaultValue) {
          console.error([`MUI X: A component is changing the default ${modelName} state of an uncontrolled Chart after being initialized. To suppress this warning opt to use a controlled Chart.`].join("\n"));
        }
      }, [JSON.stringify(newDefaultValue)]);
    });
  }
  return models;
};

// node_modules/@mui/x-charts/esm/internals/store/useCharts.js
var globalId = 0;
function useCharts(inPlugins, props, seriesConfig5) {
  const chartId = useId();
  const plugins = React6.useMemo(() => [...CHART_CORE_PLUGINS, ...inPlugins], [inPlugins]);
  const pluginParams = extractPluginParamsFromProps({
    plugins,
    props
  });
  pluginParams.id = pluginParams.id ?? chartId;
  const models = useChartModels(plugins, pluginParams);
  const instanceRef = React6.useRef({});
  const instance = instanceRef.current;
  const publicAPI = useChartApiInitialization(props.apiRef);
  const innerChartRootRef = React6.useRef(null);
  const innerSvgRef = React6.useRef(null);
  const storeRef = React6.useRef(null);
  if (storeRef.current == null) {
    globalId += 1;
    const initialState = {
      cacheKey: {
        id: globalId
      }
    };
    plugins.forEach((plugin) => {
      if (plugin.getInitialState) {
        Object.assign(initialState, plugin.getInitialState(pluginParams, initialState, seriesConfig5));
      }
    });
    storeRef.current = new ChartStore(initialState);
  }
  const runPlugin = (plugin) => {
    const pluginResponse = plugin({
      instance,
      params: pluginParams,
      plugins,
      store: storeRef.current,
      svgRef: innerSvgRef,
      chartRootRef: innerChartRootRef,
      seriesConfig: seriesConfig5,
      models
    });
    if (pluginResponse.publicAPI) {
      Object.assign(publicAPI, pluginResponse.publicAPI);
    }
    if (pluginResponse.instance) {
      Object.assign(instance, pluginResponse.instance);
    }
  };
  plugins.forEach(runPlugin);
  const contextValue = React6.useMemo(() => ({
    store: storeRef.current,
    publicAPI,
    instance,
    svgRef: innerSvgRef,
    chartRootRef: innerChartRootRef
  }), [instance, publicAPI]);
  return {
    contextValue
  };
}
function useChartApiInitialization(inputApiRef) {
  const fallbackPublicApiRef = React6.useRef({});
  if (inputApiRef) {
    if (inputApiRef.current == null) {
      inputApiRef.current = {};
    }
    return inputApiRef.current;
  }
  return fallbackPublicApiRef.current;
}

// node_modules/@mui/x-charts/esm/context/ChartProvider/ChartContext.js
var React7 = __toESM(require_react(), 1);
var ChartContext = React7.createContext(null);
if (true) {
  ChartContext.displayName = "ChartContext";
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.js
var React9 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/store/useSelector.js
var import_with_selector = __toESM(require_with_selector(), 1);
var defaultCompare = Object.is;
var useSelector = (store, selector, args = void 0, equals = defaultCompare) => {
  const selectorWithArgs = (state) => selector(state, args);
  return (0, import_with_selector.useSyncExternalStoreWithSelector)(store.subscribe, store.getSnapshot, store.getSnapshot, selectorWithArgs, equals);
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/defaultizeAxis.js
function defaultizeXAxis(inAxis, dataset) {
  const offsets = {
    top: 0,
    bottom: 0,
    none: 0
  };
  const inputAxes = inAxis && inAxis.length > 0 ? inAxis : [{
    id: DEFAULT_X_AXIS_KEY,
    scaleType: "linear"
  }];
  const parsedAxes = inputAxes.map((axisConfig, index2) => {
    const dataKey = axisConfig.dataKey;
    const defaultPosition = index2 === 0 ? "bottom" : "none";
    const position = axisConfig.position ?? defaultPosition;
    const defaultHeight = DEFAULT_AXIS_SIZE_HEIGHT + (axisConfig.label ? AXIS_LABEL_DEFAULT_HEIGHT : 0);
    const sharedConfig = _extends({
      id: `defaultized-x-axis-${index2}`,
      offset: offsets[position]
    }, axisConfig, {
      position,
      height: axisConfig.height ?? defaultHeight
    });
    if (position !== "none") {
      offsets[position] += sharedConfig.height;
    }
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      return sharedConfig;
    }
    if (dataset === void 0) {
      throw new Error(`MUI X: x-axis uses \`dataKey\` but no \`dataset\` is provided.`);
    }
    return _extends({}, sharedConfig, {
      data: dataset.map((d) => d[dataKey])
    });
  });
  return parsedAxes;
}
function defaultizeYAxis(inAxis, dataset) {
  const offsets = {
    right: 0,
    left: 0,
    none: 0
  };
  const inputAxes = inAxis && inAxis.length > 0 ? inAxis : [{
    id: DEFAULT_Y_AXIS_KEY,
    scaleType: "linear"
  }];
  const parsedAxes = inputAxes.map((axisConfig, index2) => {
    const dataKey = axisConfig.dataKey;
    const defaultPosition = index2 === 0 ? "left" : "none";
    const position = axisConfig.position ?? defaultPosition;
    const defaultWidth = DEFAULT_AXIS_SIZE_WIDTH + (axisConfig.label ? AXIS_LABEL_DEFAULT_HEIGHT : 0);
    const sharedConfig = _extends({
      id: `defaultized-y-axis-${index2}`,
      offset: offsets[position]
    }, axisConfig, {
      position,
      width: axisConfig.width ?? defaultWidth
    });
    if (position !== "none") {
      offsets[position] += sharedConfig.width;
    }
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      return sharedConfig;
    }
    if (dataset === void 0) {
      throw new Error(`MUI X: y-axis uses \`dataKey\` but no \`dataset\` is provided.`);
    }
    return _extends({}, sharedConfig, {
      data: dataset.map((d) => d[dataKey])
    });
  });
  return parsedAxes;
}

// node_modules/d3-array/src/ascending.js
function ascending(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x2) => ascending(f(d), x2);
    delta = (d, x2) => f(d) - x2;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left(a2, x2, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x2) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a2, x2, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a2, x2, lo = 0, hi = a2.length) {
    const i = left(a2, x2, lo, hi - 1);
    return i > lo && delta(a2[i - 1], x2) > -delta(a2[i], x2) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x2) {
  return x2 === null ? NaN : +x2;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0)) throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0)) throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0)) throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0)) throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry) return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
    } else if (blury) {
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    }
    return data;
  };
}
function blurh(blur3, T, S, w, h) {
  for (let y2 = 0, n = w * h; y2 < n; ) {
    blur3(T, S, y2, y2 += w, 1);
  }
}
function blurv(blur3, T, S, w, h) {
  for (let x2 = 0, n = w * h; x2 < w; ++x2) {
    blur3(T, S, x2, x2 + n, w);
  }
}
function blurfImage(radius) {
  const blur3 = blurf(radius);
  return (T, S, start, stop, step) => {
    start <<= 2, stop <<= 2, step <<= 2;
    blur3(T, S, start + 0, stop + 0, step);
    blur3(T, S, start + 1, stop + 1, step);
    blur3(T, S, start + 2, stop + 2, step);
    blur3(T, S, start + 3, stop + 3, step);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius) return bluri(radius);
  const t = radius - radius0;
  const w = 2 * radius + 1;
  return (T, S, start, stop, step) => {
    if (!((stop -= step) >= start)) return;
    let sum4 = radius0 * S[start];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i = start, j = start + s0; i < j; i += step) {
      sum4 += S[Math.min(stop, i)];
    }
    for (let i = start, j = stop; i <= j; i += step) {
      sum4 += S[Math.min(stop, i + s0)];
      T[i] = (sum4 + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;
      sum4 -= S[Math.max(start, i - s0)];
    }
  };
}
function bluri(radius) {
  const w = 2 * radius + 1;
  return (T, S, start, stop, step) => {
    if (!((stop -= step) >= start)) return;
    let sum4 = radius * S[start];
    const s2 = step * radius;
    for (let i = start, j = start + s2; i < j; i += step) {
      sum4 += S[Math.min(stop, i)];
    }
    for (let i = start, j = stop; i <= j; i += step) {
      sum4 += S[Math.min(stop, i + s2)];
      T[i] = sum4 / w;
      sum4 -= S[Math.max(start, i - s2)];
    }
  };
}

// node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (entries != null) for (const [key2, value] of entries) this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
};
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start, stop, count2) {
  const step = (stop - start) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start, stop, count2 * 2);
  return [i1, i2, inc];
}
function ticks(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  if (!(count2 > 0)) return [];
  if (start === stop) return [start];
  const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count2) : tickSpec(start, stop, count2);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse2) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) / -inc;
    else for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) / -inc;
    else for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) * inc;
  }
  return ticks2;
}
function tickIncrement(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  return tickSpec(start, stop, count2)[2];
}
function tickStep(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count2) : tickIncrement(start, stop, count2);
  return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-array/src/range.js
function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n);
  while (++i < n) {
    range2[i] = start + i * step;
  }
  return range2;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array2[m + i0];
      array2[m + i0] = array2[i + i0];
      array2[i + i0] = t;
    }
    return array2;
  };
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      if (typeof domain === "function") this.interpolator(domain);
      else this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function") this.interpolator(interpolator);
      else this.range(interpolator);
      break;
    }
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index2 = new InternMap(), domain = [], range2 = [], unknown = implicit;
  function scale2(d) {
    let i = index2.get(d);
    if (i === void 0) {
      if (unknown !== implicit) return unknown;
      index2.set(d, i = domain.push(d) - 1);
    }
    return range2[i % range2.length];
  }
  scale2.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _) {
      if (index2.has(value)) continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale2;
  };
  scale2.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), scale2) : range2.slice();
  };
  scale2.unknown = function(_) {
    return arguments.length ? (unknown = _, scale2) : unknown;
  };
  scale2.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale2, arguments);
  return scale2;
}

// node_modules/d3-scale/src/band.js
function band() {
  var scale2 = ordinal().unknown(void 0), domain = scale2.domain, ordinalRange = scale2.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale2.unknown;
  function rescale() {
    var n = domain().length, reverse2 = r1 < r0, start = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function(i) {
      return start + step * i;
    });
    return ordinalRange(reverse2 ? values.reverse() : values);
  }
  scale2.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale2.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale2.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale2.bandwidth = function() {
    return bandwidth;
  };
  scale2.step = function() {
    return step;
  };
  scale2.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale2.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale2.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale2.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale2.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale2.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale2) {
  var copy3 = scale2.copy;
  scale2.padding = scale2.paddingOuter;
  delete scale2.paddingInner;
  delete scale2.paddingOuter;
  scale2.copy = function() {
    return pointish(copy3());
  };
  return scale2;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m = reHex.exec(format2)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format2)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format2)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format2)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format2)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s2, l, a2) {
  if (a2 <= 0) h = s2 = l = NaN;
  else if (l <= 0 || l >= 1) h = s2 = NaN;
  else if (s2 <= 0) h = NaN;
  return new Hsl(h, s2, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min3 = Math.min(r, g, b), max3 = Math.max(r, g, b), h = NaN, s2 = max3 - min3, l = (max3 + min3) / 2;
  if (s2) {
    if (r === max3) h = (g - b) / s2 + (g < b) * 6;
    else if (g === max3) h = (b - r) / s2 + 2;
    else h = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o.opacity);
}
function hsl(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y2 = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x2, z;
  if (r === g && g === b) x2 = z = y2;
  else {
    x2 = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z), o.opacity);
}
function lab(l, a2, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b, opacity == null ? 1 : opacity);
}
function Lab(l, a2, b, opacity) {
  this.l = +l;
  this.a = +a2;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter(k2) {
    return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  darker(k2) {
    return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  rgb() {
    var y2 = (this.l + 16) / 116, x2 = isNaN(this.a) ? y2 : y2 + this.a / 500, z = isNaN(this.b) ? y2 : y2 - this.b / 200;
    x2 = Xn * lab2xyz(x2);
    y2 = Yn * lab2xyz(y2);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb(3.1338561 * x2 - 1.6168667 * y2 - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x2 + 1.9161415 * y2 + 0.033454 * z),
      lrgb2rgb(0.0719453 * x2 - 0.2289914 * y2 + 1.4052427 * z),
      this.opacity
    );
  }
}));
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x2) {
  return 255 * (x2 <= 31308e-7 ? 12.92 * x2 : 1.055 * Math.pow(x2, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x2) {
  return (x2 /= 255) <= 0.04045 ? x2 / 12.92 : Math.pow((x2 + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * degrees;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h, c2, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c2, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c2, l, opacity) {
  this.h = +h;
  this.c = +c2;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * radians;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter(k2) {
    return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
  },
  darker(k2) {
    return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k2 = (E * (g - l) - C * bl) / D, s2 = Math.sqrt(k2 * k2 + bl * bl) / (E * l * (1 - l)), h = s2 ? Math.atan2(k2, bl) * degrees - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s2, l, o.opacity);
}
function cubehelix(h, s2, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s2, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
    return new Rgb(
      255 * (l + a2 * (A * cosh2 + B * sinh2)),
      255 * (l + a2 * (C * cosh2 + D * sinh2)),
      255 * (l + a2 * (E * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v2, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default = (x2) => () => x2;

// node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y2) {
  return a2 = Math.pow(a2, y2), b = Math.pow(b, y2) - a2, y2 = 1 / y2, function(t) {
    return Math.pow(a2 + t * b, y2);
  };
}
function hue(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default(isNaN(a2) ? b : a2);
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y2) : constant_default(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default(isNaN(a2) ? b : a2);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y2) {
  var color2 = gamma(y2);
  function rgb2(start, end) {
    var r = color2((start = rgb(start)).r, (end = rgb(end)).r), g = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b) b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i) c2[i] = a2[i] * (1 - t) + b[i] * t;
    return c2;
  };
}
function isNumberArray(x2) {
  return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c2 = new Array(nb), i;
  for (i = 0; i < na; ++i) x2[i] = value_default(a2[i], b[i]);
  for (; i < nb; ++i) c2[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i) c2[i] = x2[i](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d = /* @__PURE__ */ new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c2 = {}, k2;
  if (a2 === null || typeof a2 !== "object") a2 = {};
  if (b === null || typeof b !== "object") b = {};
  for (k2 in b) {
    if (k2 in a2) {
      i[k2] = value_default(a2[k2], b[k2]);
    } else {
      c2[k2] = b[k2];
    }
  }
  return function(t) {
    for (k2 in i) c2[k2] = i[k2](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i]) s2[i] += bs;
      else s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i]) s2[i] += bm;
      else s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i]) s2[i] += bs;
    else s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2) s2[(o = q[i2]).i] = o.x(t);
    return s2.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant_default(b) : (t === "number" ? number_default : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b)) a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c2 + b * d) c2 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d)) c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2) a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity2 : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return identity2;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity2;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s2, q) {
    if (a2 !== b) {
      if (a2 - b > 180) b += 360;
      else if (b - a2 > 180) a2 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q) {
    if (a2 !== b) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale2(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q);
    rotate(a2.rotate, b.rotate, s2, q);
    skewX(a2.skewX, b.skewX, s2, q);
    scale2(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s2[(o = q[i]).i] = o.x(t);
      return s2.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x2) {
  return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
}
function sinh(x2) {
  return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
}
function tanh(x2) {
  return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s2 = t * S, coshr0 = cosh(r0), u4 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
        return [
          ux0 + u4 * dx,
          uy0 + u4 * dy,
          w0 * coshr0 / cosh(rho * s2 + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start, end) {
    var h = hue2((start = hsl(start)).h, (end = hsl(end)).h), s2 = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s2(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start, end) {
    var h = hue2((start = hcl(start)).h, (end = hcl(end)).h), c2 = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c2(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y2) {
    y2 = +y2;
    function cubehelix3(start, end) {
      var h = hue2((start = cubehelix(start)).h, (end = cubehelix(end)).h), s2 = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s2(t);
        start.l = l(Math.pow(t, y2));
        start.opacity = opacity(t);
        return start + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/d3-scale/src/constant.js
function constants(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x2) {
  return +x2;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity3(x2) {
  return x2;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x2) {
    return (x2 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t;
  if (a2 > b) t = a2, a2 = b, b = t;
  return function(x2) {
    return Math.max(a2, Math.min(b, x2));
  };
}
function bimap(domain, range2, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x2) {
    return r0(d0(x2));
  };
}
function polymap(domain, range2, interpolate) {
  var j = Math.min(domain.length, range2.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range2[i], range2[i + 1]);
  }
  return function(x2) {
    var i2 = bisect_default(domain, x2, 1, j) - 1;
    return r[i2](d[i2](x2));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range2 = unit, interpolate = value_default, transform, untransform, unknown, clamp = identity3, piecewise2, output, input;
  function rescale() {
    var n = Math.min(domain.length, range2.length);
    if (clamp !== identity3) clamp = clamper(domain[0], domain[n - 1]);
    piecewise2 = n > 2 ? polymap : bimap;
    output = input = null;
    return scale2;
  }
  function scale2(x2) {
    return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise2(domain.map(transform), range2, interpolate)))(transform(clamp(x2)));
  }
  scale2.invert = function(y2) {
    return clamp(untransform((input || (input = piecewise2(range2, domain.map(transform), number_default)))(y2)));
  };
  scale2.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number2), rescale()) : domain.slice();
  };
  scale2.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
  };
  scale2.rangeRound = function(_) {
    return range2 = Array.from(_), interpolate = round_default, rescale();
  };
  scale2.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity3, rescale()) : clamp !== identity3;
  };
  scale2.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale2.unknown = function(_) {
    return arguments.length ? (unknown = _, scale2) : unknown;
  };
  return function(t, u4) {
    transform = t, untransform = u4;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x2) {
  return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
}
function formatDecimalParts(x2, p) {
  if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
  var i, coefficient = x2.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x2.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x2) {
  return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out: for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s2[i]) {
      case ".":
        i0 = i1 = i;
        break;
      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;
      default:
        if (!+s2[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d) return x2 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x2, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d) return x2 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x2, p) => (x2 * 100).toFixed(p),
  "b": (x2) => Math.round(x2).toString(2),
  "c": (x2) => x2 + "",
  "d": formatDecimal_default,
  "e": (x2, p) => x2.toExponential(p),
  "f": (x2, p) => x2.toFixed(p),
  "g": (x2, p) => x2.toPrecision(p),
  "o": (x2) => Math.round(x2).toString(8),
  "p": (x2, p) => formatRounded_default(x2 * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
  "x": (x2) => Math.round(x2).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x2) {
  return x2;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "−" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes_default[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=") zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3) value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3) value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop, count2, specifier) {
  var step = tickStep(start, stop, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale2) {
  var domain = scale2.domain;
  scale2.ticks = function(count2) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count2 == null ? 10 : count2);
  };
  scale2.tickFormat = function(count2, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale2.nice = function(count2) {
    if (count2 == null) count2 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count2);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale2;
  };
  return scale2;
}
function linear2() {
  var scale2 = continuous();
  scale2.copy = function() {
    return copy(scale2, linear2());
  };
  initRange.apply(scale2, arguments);
  return linearish(scale2);
}

// node_modules/d3-scale/src/nice.js
function nice2(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }
  domain[i0] = interval2.floor(x0);
  domain[i1] = interval2.ceil(x1);
  return domain;
}

// node_modules/d3-scale/src/log.js
function transformLog(x2) {
  return Math.log(x2);
}
function transformExp(x2) {
  return Math.exp(x2);
}
function transformLogn(x2) {
  return -Math.log(-x2);
}
function transformExpn(x2) {
  return -Math.exp(-x2);
}
function pow10(x2) {
  return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
}
function reflect(f) {
  return (x2, k2) => -f(-x2, k2);
}
function loggish(transform) {
  const scale2 = transform(transformLog, transformExp);
  const domain = scale2.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale2;
  }
  scale2.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale2.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale2.ticks = (count2) => {
    const d = domain();
    let u4 = d[0];
    let v2 = d[d.length - 1];
    const r = v2 < u4;
    if (r) [u4, v2] = [v2, u4];
    let i = logs(u4);
    let j = logs(v2);
    let k2;
    let t;
    const n = count2 == null ? 10 : +count2;
    let z = [];
    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u4 > 0) for (; i <= j; ++i) {
        for (k2 = 1; k2 < base; ++k2) {
          t = i < 0 ? k2 / pows(-i) : k2 * pows(i);
          if (t < u4) continue;
          if (t > v2) break;
          z.push(t);
        }
      }
      else for (; i <= j; ++i) {
        for (k2 = base - 1; k2 >= 1; --k2) {
          t = i > 0 ? k2 / pows(-i) : k2 * pows(i);
          if (t < u4) continue;
          if (t > v2) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = ticks(u4, v2, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale2.tickFormat = (count2, specifier) => {
    if (count2 == null) count2 = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format(specifier);
    }
    if (count2 === Infinity) return specifier;
    const k2 = Math.max(1, base * count2 / scale2.ticks().length);
    return (d) => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k2 ? specifier(d) : "";
    };
  };
  scale2.nice = () => {
    return domain(nice2(domain(), {
      floor: (x2) => pows(Math.floor(logs(x2))),
      ceil: (x2) => pows(Math.ceil(logs(x2)))
    }));
  };
  return scale2;
}
function log() {
  const scale2 = loggish(transformer()).domain([1, 10]);
  scale2.copy = () => copy(scale2, log()).base(scale2.base());
  initRange.apply(scale2, arguments);
  return scale2;
}

// node_modules/d3-scale/src/pow.js
function transformPow(exponent) {
  return function(x2) {
    return x2 < 0 ? -Math.pow(-x2, exponent) : Math.pow(x2, exponent);
  };
}
function transformSqrt(x2) {
  return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
}
function transformSquare(x2) {
  return x2 < 0 ? -x2 * x2 : x2 * x2;
}
function powish(transform) {
  var scale2 = transform(identity3, identity3), exponent = 1;
  function rescale() {
    return exponent === 1 ? transform(identity3, identity3) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }
  scale2.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };
  return linearish(scale2);
}
function pow() {
  var scale2 = powish(transformer());
  scale2.copy = function() {
    return copy(scale2, pow()).exponent(scale2.exponent());
  };
  initRange.apply(scale2, arguments);
  return scale2;
}
function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}

// node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range2 = [0, 1], unknown, n = 1;
  function scale2(x2) {
    return x2 != null && x2 <= x2 ? range2[bisect_default(domain, x2, 0, n)] : unknown;
  }
  scale2.domain = function(_) {
    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range2.length - 1), scale2) : domain.slice();
  };
  scale2.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), n = Math.min(domain.length, range2.length - 1), scale2) : range2.slice();
  };
  scale2.invertExtent = function(y2) {
    var i = range2.indexOf(y2);
    return [domain[i - 1], domain[i]];
  };
  scale2.unknown = function(_) {
    return arguments.length ? (unknown = _, scale2) : unknown;
  };
  scale2.copy = function() {
    return threshold().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale2, arguments);
}

// node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count2, field) {
  function interval2(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval2.floor = (date2) => {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval2.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval2.round = (date2) => {
    const d0 = interval2(date2), d1 = interval2.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval2.offset = (date2, step) => {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval2.range = (start, stop, step) => {
    const range2 = [];
    start = interval2.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range2;
    let previous;
    do
      range2.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range2;
  };
  interval2.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, (date2, step) => {
      if (date2 >= date2) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count2) {
    interval2.count = (start, end) => {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval2.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field ? (d) => field(d) % step === 0 : (d) => interval2.count(0, d) % step === 0);
    };
  }
  return interval2;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date2, step) => {
  date2.setTime(+date2 + step);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k2) => {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0)) return null;
  if (!(k2 > 1)) return millisecond;
  return timeInterval((date2) => {
    date2.setTime(Math.floor(date2 / k2) * k2);
  }, (date2, step) => {
    date2.setTime(+date2 + step * k2);
  }, (start, end) => {
    return (end - start) / k2;
  });
};
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds());
}, (date2, step) => {
  date2.setTime(+date2 + step * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date2) => {
  return date2.getUTCSeconds();
});
var seconds = second.range;

// node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date2) => {
  date2.setUTCSeconds(0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

// node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date2) => {
  date2.setUTCMinutes(0, 0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getUTCHours();
});
var utcHours = utcHour.range;

// node_modules/d3-time/src/day.js
var timeDay = timeInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
var timeDays = timeDay.range;
var utcDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return date2.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return Math.floor(date2 / durationDay);
});
var unixDays = unixDay.range;

// node_modules/d3-time/src/week.js
function timeWeekday(i) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setDate(date2.getDate() + step * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date2) => {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setMonth(date2.getMonth() + step);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date2) => {
  return date2.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date2) => {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date2) => {
  return date2.getUTCMonth();
});
var utcMonths = utcMonth.range;

// node_modules/d3-time/src/year.js
var timeYear = timeInterval((date2) => {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setFullYear(date2.getFullYear() + step);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date2) => {
  return date2.getFullYear();
});
timeYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
    date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step * k2);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date2) => {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date2) => {
  return date2.getUTCFullYear();
});
utcYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
  });
};
var utcYears = utcYear.range;

// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count2) {
    const reverse2 = stop < start;
    if (reverse2) [start, stop] = [stop, start];
    const interval2 = count2 && typeof count2.range === "function" ? count2 : tickInterval(start, stop, count2);
    const ticks3 = interval2 ? interval2.range(start, +stop + 1) : [];
    return reverse2 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count2) {
    const target = Math.abs(stop - start) / count2;
    const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count2));
    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count2), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

// node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y2, m, d) {
  return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i = -1, j = 0, n = specifier.length, c2, pad2, format2;
      if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null) c2 = specifier.charAt(++i);
          else pad2 = c2 === "e" ? " " : "0";
          if (format2 = formats2[c2]) c2 = format2(date2, pad2);
          string.push(c2);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
      if (i != string.length) return null;
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d)) d.Z = 0;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0) d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c2, parse;
    while (i < n) {
      if (j >= m) return -1;
      c2 = specifier.charCodeAt(i++);
      if (c2 === 37) {
        c2 = specifier.charAt(i++);
        parse = parses[c2 in pads ? specifier.charAt(i++) : c2];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c2 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + timeDay.count(timeYear(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
}
function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date2) {
  return date2.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/d3-scale/src/time.js
function date(t) {
  return new Date(t);
}
function number3(t) {
  return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
  var scale2 = continuous(), invert = scale2.invert, domain = scale2.domain;
  var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale2.invert = function(y2) {
    return new Date(invert(y2));
  };
  scale2.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number3)) : domain().map(date);
  };
  scale2.ticks = function(interval2) {
    var d = domain();
    return ticks2(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
  };
  scale2.tickFormat = function(count2, specifier) {
    return specifier == null ? tickFormat2 : format2(specifier);
  };
  scale2.nice = function(interval2) {
    var d = domain();
    if (!interval2 || typeof interval2.range !== "function") interval2 = tickInterval(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
    return interval2 ? domain(nice2(d, interval2)) : scale2;
  };
  scale2.copy = function() {
    return copy(scale2, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
  };
  return scale2;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}

// node_modules/d3-scale/src/sequential.js
function transformer2() {
  var x0 = 0, x1 = 1, t03, t13, k10, transform, interpolator = identity3, clamp = false, unknown;
  function scale2(x2) {
    return x2 == null || isNaN(x2 = +x2) ? unknown : interpolator(k10 === 0 ? 0.5 : (x2 = (transform(x2) - t03) * k10, clamp ? Math.max(0, Math.min(1, x2)) : x2));
  }
  scale2.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, t03 = transform(x0 = +x0), t13 = transform(x1 = +x1), k10 = t03 === t13 ? 0 : 1 / (t13 - t03), scale2) : [x0, x1];
  };
  scale2.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale2) : clamp;
  };
  scale2.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale2) : interpolator;
  };
  function range2(interpolate) {
    return function(_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale2) : [interpolator(0), interpolator(1)];
    };
  }
  scale2.range = range2(value_default);
  scale2.rangeRound = range2(round_default);
  scale2.unknown = function(_) {
    return arguments.length ? (unknown = _, scale2) : unknown;
  };
  return function(t) {
    transform = t, t03 = t(x0), t13 = t(x1), k10 = t03 === t13 ? 0 : 1 / (t13 - t03);
    return scale2;
  };
}
function copy2(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale2 = linearish(transformer2()(identity3));
  scale2.copy = function() {
    return copy2(scale2, sequential());
  };
  return initInterpolator.apply(scale2, arguments);
}

// node_modules/@mui/x-charts/esm/models/axis.js
function isBandScaleConfig(scaleConfig) {
  return scaleConfig.scaleType === "band";
}
function isPointScaleConfig(scaleConfig) {
  return scaleConfig.scaleType === "point";
}

// node_modules/@mui/x-charts/esm/internals/colorScale.js
function getSequentialColorScale(config) {
  if (config.type === "piecewise") {
    return threshold(config.thresholds, config.colors);
  }
  return sequential([config.min ?? 0, config.max ?? 100], config.color);
}
function getOrdinalColorScale(config) {
  if (config.values) {
    return ordinal(config.values, config.colors).unknown(config.unknownColor ?? null);
  }
  return ordinal(config.colors.map((_, index2) => index2), config.colors).unknown(config.unknownColor ?? null);
}
function getColorScale(config) {
  return config.type === "ordinal" ? getOrdinalColorScale(config) : getSequentialColorScale(config);
}

// node_modules/@mui/x-charts/esm/hooks/useTicks.js
var React8 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/isBandScale.js
function isBandScale(scale2) {
  return scale2.bandwidth !== void 0;
}

// node_modules/@mui/x-charts/esm/internals/isInfinity.js
function isInfinity(v2) {
  return typeof v2 === "number" && !Number.isFinite(v2);
}

// node_modules/@mui/x-charts/esm/hooks/useTicks.js
function getTickNumber(params) {
  const {
    tickMaxStep,
    tickMinStep,
    tickNumber,
    range: range2,
    domain
  } = params;
  const maxTicks = tickMinStep === void 0 ? 999 : Math.floor(Math.abs(domain[1] - domain[0]) / tickMinStep);
  const minTicks = tickMaxStep === void 0 ? 2 : Math.ceil(Math.abs(domain[1] - domain[0]) / tickMaxStep);
  const defaultizedTickNumber = tickNumber ?? Math.floor(Math.abs(range2[1] - range2[0]) / 50);
  return Math.min(maxTicks, Math.max(minTicks, defaultizedTickNumber));
}
var offsetRatio = {
  start: 0,
  extremities: 0,
  end: 1,
  middle: 0.5
};
function useTicks(options) {
  const {
    scale: scale2,
    tickNumber,
    valueFormatter,
    tickInterval,
    tickPlacement = "extremities",
    tickLabelPlacement: tickLabelPlacementProp
  } = options;
  return React8.useMemo(() => {
    if (isBandScale(scale2)) {
      const domain2 = scale2.domain();
      const tickLabelPlacement2 = tickLabelPlacementProp ?? "middle";
      if (scale2.bandwidth() > 0) {
        const filteredDomain2 = typeof tickInterval === "function" && domain2.filter(tickInterval) || typeof tickInterval === "object" && tickInterval || domain2;
        return [...filteredDomain2.map((value) => ({
          value,
          formattedValue: (valueFormatter == null ? void 0 : valueFormatter(value, {
            location: "tick",
            scale: scale2
          })) ?? `${value}`,
          offset: scale2(value) - (scale2.step() - scale2.bandwidth()) / 2 + offsetRatio[tickPlacement] * scale2.step(),
          labelOffset: tickLabelPlacement2 === "tick" ? 0 : scale2.step() * (offsetRatio[tickLabelPlacement2] - offsetRatio[tickPlacement])
        })), ...tickPlacement === "extremities" ? [{
          formattedValue: void 0,
          offset: scale2.range()[1],
          labelOffset: 0
        }] : []];
      }
      const filteredDomain = typeof tickInterval === "function" && domain2.filter(tickInterval) || typeof tickInterval === "object" && tickInterval || domain2;
      return filteredDomain.map((value) => ({
        value,
        formattedValue: (valueFormatter == null ? void 0 : valueFormatter(value, {
          location: "tick",
          scale: scale2
        })) ?? `${value}`,
        offset: scale2(value),
        labelOffset: 0
      }));
    }
    const domain = scale2.domain();
    if (domain.some(isInfinity)) {
      return [];
    }
    const tickLabelPlacement = tickLabelPlacementProp;
    const ticks2 = typeof tickInterval === "object" ? tickInterval : scale2.ticks(tickNumber);
    return ticks2.map((value, i) => {
      return {
        value,
        formattedValue: (valueFormatter == null ? void 0 : valueFormatter(value, {
          location: "tick",
          scale: scale2
        })) ?? scale2.tickFormat(tickNumber)(value),
        offset: scale2(value),
        // Allowing the label to be placed in the middle of a continuous scale is weird.
        // But it is useful in some cases, like funnel categories with a linear scale.
        labelOffset: tickLabelPlacement === "middle" ? scale2(ticks2[i - 1] ?? 0) - (scale2(value) + scale2(ticks2[i - 1] ?? 0)) / 2 : 0
      };
    });
  }, [scale2, tickInterval, tickNumber, valueFormatter, tickPlacement, tickLabelPlacementProp]);
}

// node_modules/@mui/x-charts/esm/internals/getScale.js
function getScale(scaleType, domain, range2) {
  switch (scaleType) {
    case "log":
      return log(domain, range2);
    case "pow":
      return pow(domain, range2);
    case "sqrt":
      return sqrt(domain, range2);
    case "time":
      return time(domain, range2);
    case "utc":
      return utcTime(domain, range2);
    default:
      return linear2(domain, range2);
  }
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/zoom.js
var zoomScaleRange = (scaleRange, zoomRange) => {
  const rangeGap = scaleRange[1] - scaleRange[0];
  const zoomGap = zoomRange[1] - zoomRange[0];
  const min3 = scaleRange[0] - zoomRange[0] * rangeGap / zoomGap;
  const max3 = scaleRange[1] + (100 - zoomRange[1]) * rangeGap / zoomGap;
  return [min3, max3];
};

// node_modules/@mui/x-charts/esm/internals/configInit.js
var cartesianInstance;
var polarInstance;
var CartesianSeriesTypes = class {
  constructor() {
    this.types = /* @__PURE__ */ new Set();
    if (cartesianInstance) {
      throw new Error("You can only create one instance!");
    }
    cartesianInstance = this.types;
  }
  addType(value) {
    this.types.add(value);
  }
  getTypes() {
    return this.types;
  }
};
var PolarSeriesTypes = class {
  constructor() {
    this.types = /* @__PURE__ */ new Set();
    if (polarInstance) {
      throw new Error("You can only create one instance!");
    }
    polarInstance = this.types;
  }
  addType(value) {
    this.types.add(value);
  }
  getTypes() {
    return this.types;
  }
};
var cartesianSeriesTypes = new CartesianSeriesTypes();
cartesianSeriesTypes.addType("bar");
cartesianSeriesTypes.addType("line");
cartesianSeriesTypes.addType("scatter");
var polarSeriesTypes = new PolarSeriesTypes();
polarSeriesTypes.addType("radar");

// node_modules/@mui/x-charts/esm/internals/isCartesian.js
function isCartesianSeriesType(seriesType) {
  return cartesianSeriesTypes.getTypes().has(seriesType);
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/getAxisExtremum.js
var axisExtremumCallback = (acc, chartType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries, getFilters) => {
  var _a;
  const getter = axisDirection === "x" ? seriesConfig5[chartType].xExtremumGetter : seriesConfig5[chartType].yExtremumGetter;
  const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
  const [minChartTypeData, maxChartTypeData] = (getter == null ? void 0 : getter({
    series,
    axis,
    axisIndex,
    isDefaultAxis: axisIndex === 0,
    getFilters
  })) ?? [Infinity, -Infinity];
  const [minData, maxData] = acc;
  return [Math.min(minChartTypeData, minData), Math.max(maxChartTypeData, maxData)];
};
var getAxisExtremum = (axis, axisDirection, seriesConfig5, axisIndex, formattedSeries, getFilters) => {
  const charTypes = Object.keys(seriesConfig5).filter(isCartesianSeriesType);
  const extremums = charTypes.reduce((acc, charType) => axisExtremumCallback(acc, charType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries, getFilters), [Infinity, -Infinity]);
  if (Number.isNaN(extremums[0]) || Number.isNaN(extremums[1])) {
    return [Infinity, -Infinity];
  }
  return extremums;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/getAxisTriggerTooltip.js
var getAxisTriggerTooltip = (axisDirection, seriesConfig5, formattedSeries, defaultAxisId) => {
  const tooltipAxesIds = /* @__PURE__ */ new Set();
  const chartTypes = Object.keys(seriesConfig5).filter(isCartesianSeriesType);
  chartTypes.forEach((chartType) => {
    var _a, _b, _c;
    const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
    const tooltipAxes = (_c = (_b = seriesConfig5[chartType]).axisTooltipGetter) == null ? void 0 : _c.call(_b, series);
    if (tooltipAxes === void 0) {
      return;
    }
    tooltipAxes.forEach(({
      axisId,
      direction
    }) => {
      if (direction === axisDirection) {
        tooltipAxesIds.add(axisId ?? defaultAxisId);
      }
    });
  });
  return tooltipAxesIds;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/computeAxisValue.js
function getRange(drawingArea, axisDirection, axis) {
  const range2 = axisDirection === "x" ? [drawingArea.left, drawingArea.left + drawingArea.width] : [drawingArea.top + drawingArea.height, drawingArea.top];
  return axis.reverse ? [range2[1], range2[0]] : range2;
}
var isDateData = (data) => (data == null ? void 0 : data[0]) instanceof Date;
function createDateFormatter(axis, range2) {
  const timeScale = time(axis.data, range2);
  return (v2, {
    location
  }) => location === "tick" ? timeScale.tickFormat(axis.tickNumber)(v2) : `${v2.toLocaleString()}`;
}
var DEFAULT_CATEGORY_GAP_RATIO = 0.2;
var DEFAULT_BAR_GAP_RATIO = 0.1;
function computeAxisValue({
  drawingArea,
  formattedSeries,
  axis: allAxis,
  seriesConfig: seriesConfig5,
  axisDirection,
  zoomMap,
  zoomOptions,
  getFilters
}) {
  if (allAxis === void 0) {
    return {
      axis: {},
      axisIds: []
    };
  }
  const axisIdsTriggeringTooltip = getAxisTriggerTooltip(axisDirection, seriesConfig5, formattedSeries, allAxis[0].id);
  const completeAxis = {};
  allAxis.forEach((eachAxis, axisIndex) => {
    const axis = eachAxis;
    const zoomOption = zoomOptions == null ? void 0 : zoomOptions[axis.id];
    const zoom = zoomMap == null ? void 0 : zoomMap.get(axis.id);
    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];
    const range2 = getRange(drawingArea, axisDirection, axis);
    const [minData, maxData] = getAxisExtremum(
      axis,
      axisDirection,
      seriesConfig5,
      axisIndex,
      formattedSeries,
      zoom === void 0 && !zoomOption ? getFilters : void 0
      // Do not apply filtering if zoom is already defined.
    );
    const triggerTooltip = !axis.ignoreTooltip && axisIdsTriggeringTooltip.has(axis.id);
    const data = axis.data ?? [];
    if (isBandScaleConfig(axis)) {
      const categoryGapRatio = axis.categoryGapRatio ?? DEFAULT_CATEGORY_GAP_RATIO;
      const barGapRatio = axis.barGapRatio ?? DEFAULT_BAR_GAP_RATIO;
      const scaleRange = axisDirection === "y" ? [range2[1], range2[0]] : range2;
      const zoomedRange2 = zoomScaleRange(scaleRange, zoomRange);
      completeAxis[axis.id] = _extends({
        offset: 0,
        height: 0,
        categoryGapRatio,
        barGapRatio,
        triggerTooltip
      }, axis, {
        data,
        scale: band(axis.data, zoomedRange2).paddingInner(categoryGapRatio).paddingOuter(categoryGapRatio / 2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData(axis.data)) {
        const dateFormatter = createDateFormatter(axis, scaleRange);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (isPointScaleConfig(axis)) {
      const scaleRange = axisDirection === "y" ? [...range2].reverse() : range2;
      const zoomedRange2 = zoomScaleRange(scaleRange, zoomRange);
      completeAxis[axis.id] = _extends({
        offset: 0,
        height: 0,
        triggerTooltip
      }, axis, {
        data,
        scale: point(axis.data, zoomedRange2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData(axis.data)) {
        const dateFormatter = createDateFormatter(axis, scaleRange);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (axis.scaleType === "band" || axis.scaleType === "point") {
      return;
    }
    const scaleType = axis.scaleType ?? "linear";
    const domainLimit = axis.domainLimit ?? "nice";
    const axisExtremums = [axis.min ?? minData, axis.max ?? maxData];
    if (typeof domainLimit === "function") {
      const {
        min: min3,
        max: max3
      } = domainLimit(minData, maxData);
      axisExtremums[0] = min3;
      axisExtremums[1] = max3;
    }
    const rawTickNumber = getTickNumber(_extends({}, axis, {
      range: range2,
      domain: axisExtremums
    }));
    const tickNumber = rawTickNumber / ((zoomRange[1] - zoomRange[0]) / 100);
    const zoomedRange = zoomScaleRange(range2, zoomRange);
    const scale2 = getScale(scaleType, axisExtremums, zoomedRange);
    const finalScale = domainLimit === "nice" ? scale2.nice(rawTickNumber) : scale2;
    const [minDomain, maxDomain] = finalScale.domain();
    const domain = [axis.min ?? minDomain, axis.max ?? maxDomain];
    completeAxis[axis.id] = _extends({
      offset: 0,
      height: 0,
      triggerTooltip
    }, axis, {
      data,
      scaleType,
      scale: finalScale.domain(domain),
      tickNumber,
      colorScale: axis.colorMap && getColorScale(axis.colorMap)
    });
  });
  return {
    axis: completeAxis,
    axisIds: allAxis.map(({
      id
    }) => id)
  };
}

// node_modules/@mui/x-charts/esm/internals/isDefined.js
function isDefined(value) {
  return value !== null && value !== void 0;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/createAxisFilterMapper.js
function createAxisFilterMapper({
  zoomMap,
  zoomOptions,
  seriesConfig: seriesConfig5,
  formattedSeries,
  direction
}) {
  return (axis, axisIndex) => {
    var _a;
    const zoomOption = zoomOptions[axis.id];
    if (!zoomOption || zoomOption.filterMode !== "discard") {
      return null;
    }
    const zoom = zoomMap == null ? void 0 : zoomMap.get(axis.id);
    if (zoom === void 0 || zoom.start <= 0 && zoom.end >= 100) {
      return null;
    }
    let extremums = [];
    const scaleType = axis.scaleType;
    if (scaleType === "point" || scaleType === "band") {
      extremums = [0, (((_a = axis.data) == null ? void 0 : _a.length) ?? 1) - 1];
    } else {
      extremums = getAxisExtremum(axis, direction, seriesConfig5, axisIndex, formattedSeries);
    }
    let min3;
    let max3;
    const continuousScaleType = !scaleType || scaleType === "band" || scaleType === "point" ? "linear" : scaleType;
    [min3, max3] = getScale(continuousScaleType, extremums, [0, 100]).nice().domain();
    min3 = min3 instanceof Date ? min3.getTime() : min3;
    max3 = max3 instanceof Date ? max3.getTime() : max3;
    const minVal = min3 + zoom.start * (max3 - min3) / 100;
    const maxVal = min3 + zoom.end * (max3 - min3) / 100;
    return (value, dataIndex) => {
      var _a2;
      const val = value[direction] ?? ((_a2 = axis.data) == null ? void 0 : _a2[dataIndex]);
      if (val == null) {
        return true;
      }
      if (axis.scaleType === "point" || axis.scaleType === "band" || typeof val === "string") {
        return dataIndex >= minVal && dataIndex <= maxVal;
      }
      return val >= minVal && val <= maxVal;
    };
  };
}
var createGetAxisFilters = (filters) => ({
  currentAxisId,
  seriesXAxisId,
  seriesYAxisId,
  isDefaultAxis
}) => {
  return (value, dataIndex) => {
    var _a, _b;
    const axisId = currentAxisId === seriesXAxisId ? seriesYAxisId : seriesXAxisId;
    if (!axisId || isDefaultAxis) {
      return ((_b = (_a = Object.values(filters ?? {}))[0]) == null ? void 0 : _b.call(_a, value, dataIndex)) ?? true;
    }
    const data = [seriesYAxisId, seriesXAxisId].filter((id) => id !== currentAxisId).map((id) => filters[id ?? ""]).filter(isDefined);
    return data.every((f) => f(value, dataIndex));
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/defaultizeZoom.js
var defaultZoomOptions = {
  minStart: 0,
  maxEnd: 100,
  step: 5,
  minSpan: 10,
  maxSpan: 100,
  panning: true,
  filterMode: "keep"
};
var defaultizeZoom = (zoom, axisId, axisDirection) => {
  if (!zoom) {
    return void 0;
  }
  if (zoom === true) {
    return _extends({
      axisId,
      axisDirection
    }, defaultZoomOptions);
  }
  return _extends({
    axisId,
    axisDirection
  }, defaultZoomOptions, zoom);
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/createZoomLookup.js
var createZoomLookup = (axisDirection) => (axes = []) => axes.reduce((acc, v2) => {
  const {
    zoom,
    id: axisId
  } = v2;
  const defaultizedZoom = defaultizeZoom(zoom, axisId, axisDirection);
  if (defaultizedZoom) {
    acc[axisId] = defaultizedZoom;
  }
  return acc;
}, {});

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxisRendering.selectors.js
var createZoomMap = (zoom) => {
  const zoomItemMap = /* @__PURE__ */ new Map();
  zoom.forEach((zoomItem) => {
    zoomItemMap.set(zoomItem.axisId, zoomItem);
  });
  return zoomItemMap;
};
var selectorChartZoomState = (state) => state.zoom;
var selectorChartZoomIsInteracting = createSelector(selectorChartZoomState, (zoom) => zoom == null ? void 0 : zoom.isInteracting);
var selectorChartZoomMap = createSelector(selectorChartZoomState, (zoom) => (zoom == null ? void 0 : zoom.zoomData) && createZoomMap(zoom == null ? void 0 : zoom.zoomData));
var selectorChartXZoomOptionsLookup = createSelector(selectorChartRawXAxis, createZoomLookup("x"));
var selectorChartYZoomOptionsLookup = createSelector(selectorChartRawYAxis, createZoomLookup("y"));
var selectorChartZoomOptionsLookup = createSelector([selectorChartXZoomOptionsLookup, selectorChartYZoomOptionsLookup], (xLookup, yLookup) => _extends({}, xLookup, yLookup));
var selectorChartXFilter = createSelector([selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartSeriesConfig, selectorChartSeriesProcessed], (zoomMap, zoomOptions, seriesConfig5, formattedSeries) => zoomMap && zoomOptions && createAxisFilterMapper({
  zoomMap,
  zoomOptions,
  seriesConfig: seriesConfig5,
  formattedSeries,
  direction: "x"
}));
var selectorChartYFilter = createSelector([selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartSeriesConfig, selectorChartSeriesProcessed], (zoomMap, zoomOptions, seriesConfig5, formattedSeries) => zoomMap && zoomOptions && createAxisFilterMapper({
  zoomMap,
  zoomOptions,
  seriesConfig: seriesConfig5,
  formattedSeries,
  direction: "y"
}));
var selectorChartZoomAxisFilters = createSelector([selectorChartXFilter, selectorChartYFilter, selectorChartRawXAxis, selectorChartRawYAxis], (xMapper, yMapper, xAxis, yAxis) => {
  if (xMapper === void 0 || yMapper === void 0) {
    return void 0;
  }
  const xFilters = xAxis == null ? void 0 : xAxis.reduce((acc, axis, index2) => {
    const filter2 = xMapper(axis, index2);
    if (filter2 !== null) {
      acc[axis.id] = filter2;
    }
    return acc;
  }, {});
  const yFilters = yAxis == null ? void 0 : yAxis.reduce((acc, axis, index2) => {
    const filter2 = yMapper(axis, index2);
    if (filter2 !== null) {
      acc[axis.id] = filter2;
    }
    return acc;
  }, {});
  if (Object.keys(xFilters ?? {}).length === 0 && Object.keys(yFilters ?? {}).length === 0) {
    return void 0;
  }
  return createGetAxisFilters(_extends({}, xFilters, yFilters));
});
var selectorChartXAxis = createSelector([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters], (axis, drawingArea, formattedSeries, seriesConfig5, zoomMap, zoomOptions, getFilters) => computeAxisValue({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "x",
  zoomMap,
  zoomOptions,
  getFilters
}));
var selectorChartYAxis = createSelector([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters], (axis, drawingArea, formattedSeries, seriesConfig5, zoomMap, zoomOptions, getFilters) => computeAxisValue({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "y",
  zoomMap,
  zoomOptions,
  getFilters
}));

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/getAxisValue.js
function getAsANumber(value) {
  return value instanceof Date ? value.getTime() : value;
}
function getAxisIndex(axisConfig, pointerValue) {
  const {
    scale: scale2,
    data: axisData,
    reverse: reverse2
  } = axisConfig;
  if (!isBandScale(scale2)) {
    const value = scale2.invert(pointerValue);
    if (axisData === void 0) {
      return -1;
    }
    const valueAsNumber = getAsANumber(value);
    const closestIndex = axisData == null ? void 0 : axisData.findIndex((pointValue, index2) => {
      const v2 = getAsANumber(pointValue);
      if (v2 > valueAsNumber) {
        if (index2 === 0 || Math.abs(valueAsNumber - v2) <= Math.abs(valueAsNumber - getAsANumber(axisData[index2 - 1]))) {
          return true;
        }
      }
      if (v2 <= valueAsNumber) {
        if (index2 === axisData.length - 1 || Math.abs(getAsANumber(value) - v2) < Math.abs(getAsANumber(value) - getAsANumber(axisData[index2 + 1]))) {
          return true;
        }
      }
      return false;
    });
    return closestIndex;
  }
  const dataIndex = scale2.bandwidth() === 0 ? Math.floor((pointerValue - Math.min(...scale2.range()) + scale2.step() / 2) / scale2.step()) : Math.floor((pointerValue - Math.min(...scale2.range())) / scale2.step());
  if (dataIndex < 0 || dataIndex >= axisData.length) {
    return -1;
  }
  return reverse2 ? axisData.length - 1 - dataIndex : dataIndex;
}
function getAxisValue(axisConfig, pointerValue, dataIndex) {
  const {
    scale: scale2,
    data: axisData
  } = axisConfig;
  if (!isBandScale(scale2)) {
    const value = scale2.invert(pointerValue);
    if (dataIndex < 0) {
      return value;
    }
    return axisData[dataIndex];
  }
  if (dataIndex < 0 || dataIndex >= axisData.length) {
    return null;
  }
  return axisData[dataIndex];
}

// node_modules/@mui/x-charts/esm/internals/getSVGPoint.js
function getSVGPoint(svg, event) {
  const pt = svg.createSVGPoint();
  pt.x = event.clientX;
  pt.y = event.clientY;
  return pt.matrixTransform(svg.getScreenCTM().inverse());
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartInteraction/useChartInteraction.js
var useChartInteraction = ({
  store
}) => {
  const cleanInteraction = useEventCallback_default(() => {
    store.update((prev) => {
      return _extends({}, prev, {
        interaction: {
          pointer: null,
          item: null
        }
      });
    });
  });
  const removeItemInteraction = useEventCallback_default((itemToRemove) => {
    store.update((prev) => {
      const prevItem = prev.interaction.item;
      if (!itemToRemove) {
        return prevItem === null ? prev : _extends({}, prev, {
          interaction: _extends({}, prev.interaction, {
            item: null
          })
        });
      }
      if (prevItem === null || Object.keys(itemToRemove).some((key) => itemToRemove[key] !== prevItem[key])) {
        return prev;
      }
      return _extends({}, prev, {
        interaction: _extends({}, prev.interaction, {
          item: null
        })
      });
    });
  });
  const setItemInteraction = useEventCallback_default((newItem) => {
    store.update((prev) => _extends({}, prev, {
      interaction: _extends({}, prev.interaction, {
        item: newItem
      })
    }));
  });
  const setPointerCoordinate = useEventCallback_default((coordinate) => {
    store.update((prev) => _extends({}, prev, {
      interaction: _extends({}, prev.interaction, {
        pointer: coordinate
      })
    }));
  });
  return {
    instance: {
      cleanInteraction,
      setItemInteraction,
      removeItemInteraction,
      setPointerCoordinate
    }
  };
};
useChartInteraction.getInitialState = () => ({
  interaction: {
    item: null,
    pointer: null
  }
});
useChartInteraction.params = {};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartInteraction/useChartInteraction.selectors.js
var selectInteraction = (state) => state.interaction;
var selectorChartsInteractionIsInitialized = createSelector(selectInteraction, (interaction) => interaction !== void 0);
var selectorChartsInteractionItem = createSelector(selectInteraction, (interaction) => (interaction == null ? void 0 : interaction.item) ?? null);
var selectorChartsInteractionPointer = createSelector(selectInteraction, (interaction) => (interaction == null ? void 0 : interaction.pointer) ?? null);
var selectorChartsInteractionPointerX = createSelector(selectorChartsInteractionPointer, (pointer) => pointer && pointer.x);
var selectorChartsInteractionPointerY = createSelector(selectorChartsInteractionPointer, (pointer) => pointer && pointer.y);
var selectorChartsInteractionItemIsDefined = createSelector(selectorChartsInteractionItem, (item) => item !== null);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.js
var useChartCartesianAxis = ({
  params,
  store,
  seriesConfig: seriesConfig5,
  svgRef,
  instance
}) => {
  const {
    xAxis,
    yAxis,
    dataset
  } = params;
  if (true) {
    const ids = [...xAxis ?? [], ...yAxis ?? []].filter((axis) => axis.id).map((axis) => axis.id);
    const duplicates = new Set(ids.filter((id, index2) => ids.indexOf(id) !== index2));
    if (duplicates.size > 0) {
      warnOnce([`MUI X: The following axis ids are duplicated: ${Array.from(duplicates).join(", ")}.`, `Please make sure that each axis has a unique id.`].join("\n"), "error");
    }
  }
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const processedSeries = useSelector(store, selectorChartSeriesProcessed);
  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);
  const {
    axis: xAxisWithScale,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  const {
    axis: yAxisWithScale,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  const isFirstRender = React9.useRef(true);
  React9.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      cartesianAxis: _extends({}, prev.cartesianAxis, {
        x: defaultizeXAxis(xAxis, dataset),
        y: defaultizeYAxis(yAxis, dataset)
      })
    }));
  }, [seriesConfig5, drawingArea, xAxis, yAxis, dataset, store]);
  const usedXAxis = xAxisIds[0];
  const usedYAxis = yAxisIds[0];
  React9.useEffect(() => {
    const element = svgRef.current;
    if (!isInteractionEnabled || element === null || params.disableAxisListener) {
      return () => {
      };
    }
    const handleOut = () => {
      var _a;
      (_a = instance.cleanInteraction) == null ? void 0 : _a.call(instance);
    };
    const handleMove = (event) => {
      var _a, _b;
      const target = "targetTouches" in event ? event.targetTouches[0] : event;
      const svgPoint = getSVGPoint(element, target);
      if (!instance.isPointInside(svgPoint, {
        targetElement: event.target
      })) {
        (_a = instance.cleanInteraction) == null ? void 0 : _a.call(instance);
        return;
      }
      (_b = instance.setPointerCoordinate) == null ? void 0 : _b.call(instance, svgPoint);
    };
    const handleDown = (event) => {
      const target = event.currentTarget;
      if (!target) {
        return;
      }
      if ("hasPointerCapture" in target && target.hasPointerCapture(event.pointerId)) {
        target.releasePointerCapture(event.pointerId);
      }
    };
    element.addEventListener("pointerdown", handleDown);
    element.addEventListener("pointermove", handleMove);
    element.addEventListener("pointercancel", handleOut);
    element.addEventListener("pointerleave", handleOut);
    return () => {
      element.removeEventListener("pointerdown", handleDown);
      element.removeEventListener("pointermove", handleMove);
      element.removeEventListener("pointercancel", handleOut);
      element.removeEventListener("pointerleave", handleOut);
    };
  }, [svgRef, store, xAxisWithScale, usedXAxis, yAxisWithScale, usedYAxis, instance, params.disableAxisListener, isInteractionEnabled]);
  React9.useEffect(() => {
    const element = svgRef.current;
    const onAxisClick = params.onAxisClick;
    if (element === null || !onAxisClick) {
      return () => {
      };
    }
    const handleMouseClick = (event) => {
      event.preventDefault();
      let dataIndex = null;
      let isXAxis = false;
      const svgPoint = getSVGPoint(element, event);
      const xIndex = getAxisIndex(xAxisWithScale[usedXAxis], svgPoint.x);
      isXAxis = xIndex !== -1;
      dataIndex = isXAxis ? xIndex : getAxisIndex(yAxisWithScale[usedYAxis], svgPoint.y);
      const USED_AXIS_ID = isXAxis ? xAxisIds[0] : yAxisIds[0];
      if (dataIndex == null || dataIndex === -1) {
        return;
      }
      const axisValue = (isXAxis ? xAxisWithScale : yAxisWithScale)[USED_AXIS_ID].data[dataIndex];
      const seriesValues = {};
      Object.keys(processedSeries).filter((seriesType) => ["bar", "line"].includes(seriesType)).forEach((seriesType) => {
        var _a;
        (_a = processedSeries[seriesType]) == null ? void 0 : _a.seriesOrder.forEach((seriesId) => {
          const seriesItem = processedSeries[seriesType].series[seriesId];
          const providedXAxisId = seriesItem.xAxisId;
          const providedYAxisId = seriesItem.yAxisId;
          const axisKey = isXAxis ? providedXAxisId : providedYAxisId;
          if (axisKey === void 0 || axisKey === USED_AXIS_ID) {
            seriesValues[seriesId] = seriesItem.data[dataIndex];
          }
        });
      });
      onAxisClick(event, {
        dataIndex,
        axisValue,
        seriesValues
      });
    };
    element.addEventListener("click", handleMouseClick);
    return () => {
      element.removeEventListener("click", handleMouseClick);
    };
  }, [params.onAxisClick, processedSeries, svgRef, xAxisWithScale, xAxisIds, yAxisWithScale, yAxisIds, usedXAxis, usedYAxis]);
  return {};
};
useChartCartesianAxis.params = {
  xAxis: true,
  yAxis: true,
  dataset: true,
  onAxisClick: true,
  disableAxisListener: true
};
useChartCartesianAxis.getDefaultizedParams = ({
  params
}) => {
  return _extends({}, params, {
    colors: params.colors ?? rainbowSurgePalette,
    theme: params.theme ?? "light",
    defaultizedXAxis: defaultizeXAxis(params.xAxis, params.dataset),
    defaultizedYAxis: defaultizeYAxis(params.yAxis, params.dataset)
  });
};
useChartCartesianAxis.getInitialState = (params) => ({
  cartesianAxis: {
    x: params.defaultizedXAxis,
    y: params.defaultizedYAxis
  }
});

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianInteraction.selectors.js
var optionalGetAxisId = (_, id) => id;
function indexGetter(value, axes, ids = axes.axisIds[0]) {
  return Array.isArray(ids) ? ids.map((id) => getAxisIndex(axes.axis[id], value)) : getAxisIndex(axes.axis[ids], value);
}
var selectorChartsInteractionXAxisIndex = createSelector([selectorChartsInteractionPointerX, selectorChartXAxis, optionalGetAxisId], (value, axes, id) => value === null ? null : indexGetter(value, axes, id));
var selectorChartsInteractionYAxisIndex = createSelector([selectorChartsInteractionPointerY, selectorChartYAxis, optionalGetAxisId], (value, axes, id) => value === null ? null : indexGetter(value, axes, id));
function valueGetter(value, axes, indexes2, ids = axes.axisIds[0]) {
  return Array.isArray(ids) ? ids.map((id, axisIndex) => getAxisValue(axes.axis[id], value, indexes2[axisIndex])) : getAxisValue(axes.axis[ids], value, indexes2);
}
var selectorChartsInteractionXAxisValue = createSelector([selectorChartsInteractionPointerX, selectorChartXAxis, selectorChartsInteractionXAxisIndex, optionalGetAxisId], (x2, xAxes, xIndex, id) => {
  if (x2 === null || xIndex === null || xAxes.axisIds.length === 0) {
    return null;
  }
  return valueGetter(x2, xAxes, xIndex, id);
});
var selectorChartsInteractionYAxisValue = createSelector([selectorChartsInteractionPointerY, selectorChartYAxis, selectorChartsInteractionYAxisIndex, optionalGetAxisId], (y2, yAxes, yIndex, id) => {
  if (y2 === null || yIndex === null || yAxes.axisIds.length === 0) {
    return null;
  }
  return valueGetter(y2, yAxes, yIndex, id);
});
var selectorChartsInteractionTooltipXAxes = createSelector([selectorChartsInteractionPointerX, selectorChartXAxis], (value, axes) => {
  if (value === null) {
    return [];
  }
  return axes.axisIds.filter((id) => axes.axis[id].triggerTooltip).map((axisId) => ({
    axisId,
    dataIndex: getAxisIndex(axes.axis[axisId], value)
  })).filter(({
    dataIndex
  }) => dataIndex >= 0);
}, {
  memoizeOptions: {
    // Keep the same reference if array content is the same.
    // If possible, avoid this pattern by creating selectors that
    // uses string/number as arguments.
    resultEqualityCheck: isDeepEqual
  }
});
var selectorChartsInteractionTooltipYAxes = createSelector([selectorChartsInteractionPointerY, selectorChartYAxis], (value, axes) => {
  if (value === null) {
    return [];
  }
  return axes.axisIds.filter((id) => axes.axis[id].triggerTooltip).map((axisId) => ({
    axisId,
    dataIndex: getAxisIndex(axes.axis[axisId], value)
  })).filter(({
    dataIndex
  }) => dataIndex >= 0);
}, {
  memoizeOptions: {
    // Keep the same reference if array content is the same.
    // If possible, avoid this pattern by creating selectors that
    // uses string/number as arguments.
    resultEqualityCheck: isDeepEqual
  }
});
var selectorChartsInteractionAxisTooltip = createSelector([selectorChartsInteractionTooltipXAxes, selectorChartsInteractionTooltipYAxes], (xTooltip, yTooltip) => xTooltip.length > 0 || yTooltip.length > 0);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartZAxis/useChartZAxis.js
var React10 = __toESM(require_react(), 1);
function addDefaultId(axisConfig, defaultId) {
  if (axisConfig.id !== void 0) {
    return axisConfig;
  }
  return _extends({
    id: defaultId
  }, axisConfig);
}
function processColorMap(axisConfig) {
  if (!axisConfig.colorMap) {
    return axisConfig;
  }
  return _extends({}, axisConfig, {
    colorScale: axisConfig.colorMap.type === "ordinal" && axisConfig.data ? getOrdinalColorScale(_extends({
      values: axisConfig.data
    }, axisConfig.colorMap)) : getColorScale(axisConfig.colorMap.type === "continuous" ? _extends({
      min: axisConfig.min,
      max: axisConfig.max
    }, axisConfig.colorMap) : axisConfig.colorMap)
  });
}
function getZAxisState(zAxis, dataset) {
  if (!zAxis || zAxis.length === 0) {
    return {
      axis: {},
      axisIds: []
    };
  }
  const zAxisLookup = {};
  const axisIds = [];
  zAxis.forEach((axisConfig, index2) => {
    const dataKey = axisConfig.dataKey;
    const defaultizedId = axisConfig.id ?? `defaultized-z-axis-${index2}`;
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      zAxisLookup[defaultizedId] = processColorMap(addDefaultId(axisConfig, defaultizedId));
      axisIds.push(defaultizedId);
      return;
    }
    if (dataset === void 0) {
      throw new Error("MUI X: z-axis uses `dataKey` but no `dataset` is provided.");
    }
    zAxisLookup[defaultizedId] = processColorMap(addDefaultId(_extends({}, axisConfig, {
      data: dataset.map((d) => d[dataKey])
    }), defaultizedId));
    axisIds.push(defaultizedId);
  });
  return {
    axis: zAxisLookup,
    axisIds
  };
}
var useChartZAxis = ({
  params,
  store
}) => {
  const {
    zAxis,
    dataset
  } = params;
  const isFirstRender = React10.useRef(true);
  React10.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      zAxis: getZAxisState(zAxis, dataset)
    }));
  }, [zAxis, dataset, store]);
  return {};
};
useChartZAxis.params = {
  zAxis: true,
  dataset: true
};
useChartZAxis.getInitialState = (params) => ({
  zAxis: getZAxisState(params.zAxis, params.dataset)
});

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartZAxis/useChartZAxis.selectors.js
var selectRootState = (state) => state;
var selectorChartZAxis = createSelector([selectRootState], (state) => state.zAxis);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/useChartHighlight.js
var useChartHighlight = ({
  store,
  params,
  models
}) => {
  useEnhancedEffect_default(() => {
    store.update((prevState) => _extends({}, prevState, {
      highlight: _extends({}, prevState.highlight, {
        item: models.highlightedItem.value
      })
    }));
  }, [store, models.highlightedItem.value]);
  const clearHighlight = useEventCallback_default(() => {
    var _a;
    (_a = params.onHighlightChange) == null ? void 0 : _a.call(params, null);
    models.highlightedItem.setControlledValue(null);
  });
  const setHighlight = useEventCallback_default((newItem) => {
    var _a;
    (_a = params.onHighlightChange) == null ? void 0 : _a.call(params, newItem);
    models.highlightedItem.setControlledValue(newItem);
  });
  return {
    instance: {
      clearHighlight,
      setHighlight
    }
  };
};
useChartHighlight.models = {
  highlightedItem: {
    getDefaultValue: () => null
  }
};
useChartHighlight.getInitialState = (params) => ({
  highlight: {
    item: params.highlightedItem ?? null
  }
});
useChartHighlight.params = {
  highlightedItem: true,
  onHighlightChange: true
};

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/extremums.js
var createResult = (data, direction) => {
  if (direction === "x") {
    return {
      x: data,
      y: null
    };
  }
  return {
    x: null,
    y: data
  };
};
var getBaseExtremum = (params) => {
  var _a;
  const {
    axis,
    getFilters,
    isDefaultAxis
  } = params;
  const filter2 = getFilters == null ? void 0 : getFilters({
    currentAxisId: axis.id,
    isDefaultAxis
  });
  const data = filter2 ? (_a = axis.data) == null ? void 0 : _a.filter((_, i) => filter2({
    x: null,
    y: null
  }, i)) : axis.data;
  const minX = Math.min(...data ?? []);
  const maxX = Math.max(...data ?? []);
  return [minX, maxX];
};
var getValueExtremum = (direction) => (params) => {
  const {
    series,
    axis,
    getFilters,
    isDefaultAxis
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const axisId = direction === "x" ? series[seriesId].xAxisId : series[seriesId].yAxisId;
    return axisId === axis.id || isDefaultAxis && axisId === void 0;
  }).reduce((acc, seriesId) => {
    const {
      stackedData
    } = series[seriesId];
    const filter2 = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const [seriesMin, seriesMax] = (stackedData == null ? void 0 : stackedData.reduce((seriesAcc, values, index2) => {
      if (filter2 && (!filter2(createResult(values[0], direction), index2) || !filter2(createResult(values[1], direction), index2))) {
        return seriesAcc;
      }
      return [Math.min(...values, seriesAcc[0]), Math.max(...values, seriesAcc[1])];
    }, [Infinity, -Infinity])) ?? [Infinity, -Infinity];
    return [Math.min(seriesMin, acc[0]), Math.max(seriesMax, acc[1])];
  }, [Infinity, -Infinity]);
};
var getExtremumX = (params) => {
  const isHorizontal = Object.keys(params.series).some((seriesId) => params.series[seriesId].layout === "horizontal");
  if (isHorizontal) {
    return getValueExtremum("x")(params);
  }
  return getBaseExtremum(params);
};
var getExtremumY = (params) => {
  const isHorizontal = Object.keys(params.series).some((seriesId) => params.series[seriesId].layout === "horizontal");
  if (isHorizontal) {
    return getBaseExtremum(params);
  }
  return getValueExtremum("y")(params);
};

// node_modules/d3-shape/src/constant.js
function constant_default2(x2) {
  return function constant2() {
    return x2;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max2 = Math.max;
var min2 = Math.min;
var sin = Math.sin;
var sqrt2 = Math.sqrt;
var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;
function acos(x2) {
  return x2 > 1 ? 0 : x2 < -1 ? pi : Math.acos(x2);
}
function asin(x2) {
  return x2 >= 1 ? halfPi : x2 <= -1 ? -halfPi : Math.asin(x2);
}

// node_modules/d3-path/src/path.js
var pi2 = Math.PI;
var tau2 = 2 * pi2;
var epsilon3 = 1e-6;
var tauEpsilon = tau2 - epsilon3;
function append(strings) {
  this._ += strings[0];
  for (let i = 1, n = strings.length; i < n; ++i) {
    this._ += arguments[i] + strings[i];
  }
}
function appendRound(digits) {
  let d = Math.floor(digits);
  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
  if (d > 15) return append;
  const k2 = 10 ** d;
  return function(strings) {
    this._ += strings[0];
    for (let i = 1, n = strings.length; i < n; ++i) {
      this._ += Math.round(arguments[i] * k2) / k2 + strings[i];
    }
  };
}
var Path = class {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x2, y2) {
    this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x2, y2) {
    this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
  }
  quadraticCurveTo(x1, y1, x2, y2) {
    this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
  }
  bezierCurveTo(x1, y1, x2, y2, x3, y3) {
    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    if (r < 0) throw new Error(`negative radius: ${r}`);
    let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    } else if (!(l01_2 > epsilon3)) ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon3) || !r) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    } else {
      let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon3) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }
      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x2, y2, r, a0, a1, ccw) {
    x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
    if (r < 0) throw new Error(`negative radius: ${r}`);
    let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    } else if (Math.abs(this._x1 - x0) > epsilon3 || Math.abs(this._y1 - y0) > epsilon3) {
      this._append`L${x0},${y0}`;
    }
    if (!r) return;
    if (da2 < 0) da2 = da2 % tau2 + tau2;
    if (da2 > tauEpsilon) {
      this._append`A${r},${r},0,1,${cw},${x2 - dx},${y2 - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    } else if (da2 > epsilon3) {
      this._append`A${r},${r},0,${+(da2 >= pi2)},${cw},${this._x1 = x2 + r * Math.cos(a1)},${this._y1 = y2 + r * Math.sin(a1)}`;
    }
  }
  rect(x2, y2, w, h) {
    this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w = +w}v${+h}h${-w}Z`;
  }
  toString() {
    return this._;
  }
};
function path() {
  return new Path();
}
path.prototype = Path.prototype;

// node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_) {
    if (!arguments.length) return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };
  return () => new Path(digits);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt2(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D3 = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt2(max2(0, r * r * d2 - D3 * D3)), cx0 = (D3 * dy - dx * d) / d2, cy0 = (-D3 * dx - dy * d) / d2, cx1 = (D3 * dy + dx * d) / d2, cy1 = (-D3 * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default2(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null, path2 = withPath(arc);
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da2 = abs(a1 - a0), cw = a1 > a0;
    if (!context) context = buffer = path2();
    if (r1 < r0) r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon)) context.moveTo(0, 0);
    else if (da2 > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da2, da1 = da2, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt2(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t03, t13;
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da2 < pi) {
          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
            var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt2(ax * ax + ay * ay) * sqrt2(bx * bx + by * by))) / 2), lc = sqrt2(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min2(rc, (r0 - lc) / (kc - 1));
            rc1 = min2(rc, (r1 - lc) / (kc + 1));
          } else {
            rc0 = rc1 = 0;
          }
        }
      }
      if (!(da1 > epsilon)) context.moveTo(x01, y01);
      else if (rc1 > epsilon) {
        t03 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t13 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc1 < rc) context.arc(t03.cx, t03.cy, rc1, atan2(t03.y01, t03.x01), atan2(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc1, atan2(t03.y01, t03.x01), atan2(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r1, atan2(t03.cy + t03.y11, t03.cx + t03.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), !cw);
          context.arc(t13.cx, t13.cy, rc1, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw);
        }
      } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);
      else if (rc0 > epsilon) {
        t03 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t13 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc0 < rc) context.arc(t03.cx, t03.cy, rc0, atan2(t03.y01, t03.x01), atan2(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc0, atan2(t03.y01, t03.x01), atan2(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r0, atan2(t03.cy + t03.y11, t03.cx + t03.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), cw);
          context.arc(t13.cx, t13.cy, rc0, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw);
        }
      } else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a2) * r, sin(a2) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default2(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default2(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default2(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default2(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default2(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default2(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default2(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

// node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;
function array_default2(x2) {
  return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      // falls through
      default:
        this._context.lineTo(x2, y2);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/line.js
function line_default(x2, y2) {
  var defined = constant_default2(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
  x2 = typeof x2 === "function" ? x2 : x2 === void 0 ? x : constant_default2(x2);
  y2 = typeof y2 === "function" ? y2 : y2 === void 0 ? y : constant_default2(y2);
  function line(data) {
    var i, n = (data = array_default2(data)).length, d, defined0 = false, buffer;
    if (context == null) output = curve(buffer = path2());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x2(d, i, data), +y2(d, i, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default2(+_), line) : x2;
  };
  line.y = function(_) {
    return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default2(+_), line) : y2;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default2(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}

// node_modules/d3-shape/src/area.js
function area_default(x0, y0, y1) {
  var x1 = null, defined = constant_default2(true), context = null, curve = linear_default, output = null, path2 = withPath(area);
  x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant_default2(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default2(0) : constant_default2(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant_default2(+y1);
  function area(data) {
    var i, j, k2, n = (data = array_default2(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null) output = curve(buffer = path2());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k2 = i - 1; k2 >= j; --k2) {
            output.point(x0z[k2], y0z[k2]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default2(+_), x1 = null, area) : x0;
  };
  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default2(+_), area) : x0;
  };
  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default2(+_), area) : x1;
  };
  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default2(+_), y1 = null, area) : y0;
  };
  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default2(+_), area) : y0;
  };
  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default2(+_), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default2(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}

// node_modules/d3-shape/src/descending.js
function descending_default(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-shape/src/identity.js
function identity_default2(d) {
  return d;
}

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default2, sortValues = descending_default, sort2 = null, startAngle = constant_default2(0), endAngle = constant_default2(tau), padAngle = constant_default2(0);
  function pie(data) {
    var i, n = (data = array_default2(data)).length, j, k2, sum4 = 0, index2 = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da2 = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da2) / n, padAngle.apply(this, arguments)), pa = p * (da2 < 0 ? -1 : 1), v2;
    for (i = 0; i < n; ++i) {
      if ((v2 = arcs[index2[i] = i] = +value(data[i], i, data)) > 0) {
        sum4 += v2;
      }
    }
    if (sortValues != null) index2.sort(function(i2, j2) {
      return sortValues(arcs[i2], arcs[j2]);
    });
    else if (sort2 != null) index2.sort(function(i2, j2) {
      return sort2(data[i2], data[j2]);
    });
    for (i = 0, k2 = sum4 ? (da2 - n * pa) / sum4 : 0; i < n; ++i, a0 = a1) {
      j = index2[i], v2 = arcs[j], a1 = a0 + (v2 > 0 ? v2 * k2 : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v2,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default2(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort2 = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort2 = _, sortValues = null, pie) : sort2;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default2(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default2(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default2(+_), pie) : padAngle;
  };
  return pie;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a2, r) {
    this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
  }
};
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}

// node_modules/d3-shape/src/curve/bump.js
var Bump = class {
  constructor(context, x2) {
    this._context = context;
    this._x = x2;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  }
  point(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0: {
        this._point = 1;
        if (this._line) this._context.lineTo(x2, y2);
        else this._context.moveTo(x2, y2);
        break;
      }
      case 1:
        this._point = 2;
      // falls through
      default: {
        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
        break;
      }
    }
    this._x0 = x2, this._y0 = y2;
  }
};
function bumpX(context) {
  return new Bump(context, true);
}
function bumpY(context) {
  return new Bump(context, false);
}

// node_modules/d3-shape/src/symbol/asterisk.js
var sqrt3 = sqrt2(3);

// node_modules/d3-shape/src/symbol/circle.js
var circle_default = {
  draw(context, size) {
    const r = sqrt2(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
};

// node_modules/d3-shape/src/symbol/cross.js
var cross_default = {
  draw(context, size) {
    const r = sqrt2(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = sqrt2(1 / 3);
var tan30_2 = tan30 * 2;
var diamond_default = {
  draw(context, size) {
    const y2 = sqrt2(size / tan30_2);
    const x2 = y2 * tan30;
    context.moveTo(0, -y2);
    context.lineTo(x2, 0);
    context.lineTo(0, y2);
    context.lineTo(-x2, 0);
    context.closePath();
  }
};

// node_modules/d3-shape/src/symbol/square.js
var square_default = {
  draw(context, size) {
    const w = sqrt2(size);
    const x2 = -w / 2;
    context.rect(x2, x2, w, w);
  }
};

// node_modules/d3-shape/src/symbol/star.js
var ka = 0.8908130915292852;
var kr = sin(pi / 10) / sin(7 * pi / 10);
var kx = sin(tau / 10) * kr;
var ky = -cos(tau / 10) * kr;
var star_default = {
  draw(context, size) {
    const r = sqrt2(size * ka);
    const x2 = kx * r;
    const y2 = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x2, y2);
    for (let i = 1; i < 5; ++i) {
      const a2 = tau * i / 5;
      const c2 = cos(a2);
      const s2 = sin(a2);
      context.lineTo(s2 * r, -c2 * r);
      context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
    }
    context.closePath();
  }
};

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt32 = sqrt2(3);
var triangle_default = {
  draw(context, size) {
    const y2 = -sqrt2(size / (sqrt32 * 3));
    context.moveTo(0, y2 * 2);
    context.lineTo(-sqrt32 * y2, -y2);
    context.lineTo(sqrt32 * y2, -y2);
    context.closePath();
  }
};

// node_modules/d3-shape/src/symbol/triangle2.js
var sqrt33 = sqrt2(3);

// node_modules/d3-shape/src/symbol/wye.js
var c = -0.5;
var s = sqrt2(3) / 2;
var k = 1 / sqrt2(12);
var a = (k / 2 + 1) * 3;
var wye_default = {
  draw(context, size) {
    const r = sqrt2(size / a);
    const x0 = r / 2, y0 = r * k;
    const x1 = x0, y1 = r * k + r;
    const x2 = -x1, y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

// node_modules/d3-shape/src/symbol.js
var symbolsFill = [
  circle_default,
  cross_default,
  diamond_default,
  square_default,
  star_default,
  triangle_default,
  wye_default
];
function Symbol2(type, size) {
  let context = null, path2 = withPath(symbol);
  type = typeof type === "function" ? type : constant_default2(type || circle_default);
  size = typeof size === "function" ? size : constant_default2(size === void 0 ? 64 : +size);
  function symbol() {
    let buffer;
    if (!context) context = buffer = path2();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }
  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant_default2(_), symbol) : type;
  };
  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant_default2(+_), symbol) : size;
  };
  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };
  return symbol;
}

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point2(that, x2, y2) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x2) / 6,
    (that._y0 + 4 * that._y1 + y2) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      // falls through
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      // falls through
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x2, this._y2 = y2;
        break;
      case 1:
        this._point = 2;
        this._x3 = x2, this._y3 = y2;
        break;
      case 2:
        this._point = 3;
        this._x4 = x2, this._y4 = y2;
        this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
        break;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      // falls through
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x2 = this._x, y2 = this._y, j = x2.length - 1;
    if (j > 0) {
      var x0 = x2[0], y0 = y2[0], dx = x2[j] - x0, dy = y2[j] - y0, i = -1, t;
      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x2[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y2[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x2, y2) {
    this._x.push(+x2);
    this._y.push(+y2);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x2, y2) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x2),
    that._y2 + that._k * (that._y1 - y2),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        this._x1 = x2, this._y1 = y2;
        break;
      case 2:
        this._point = 3;
      // falls through
      default:
        point3(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y2;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y2);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y2;
        break;
      default:
        point3(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      // falls through
      default:
        point3(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x2, y2) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
    y22 = (y22 * b + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      // falls through
      default:
        point4(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y2;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y2);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y2;
        break;
      default:
        point4(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      // falls through
      default:
        point4(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) this._context.lineTo(x2, y2);
    else this._point = 1, this._context.moveTo(x2, y2);
  }
};

// node_modules/d3-shape/src/curve/monotone.js
function sign(x2) {
  return x2 < 0 ? -1 : 1;
}
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
function point5(that, t03, t13) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t03, x1 - dx, y1 - dx * t13, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    var t13 = NaN;
    x2 = +x2, y2 = +y2;
    if (x2 === this._x1 && y2 === this._y1) return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t13 = slope3(this, x2, y2)), t13);
        break;
      default:
        point5(this, this._t0, t13 = slope3(this, x2, y2));
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
    this._t0 = t13;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
  MonotoneX.prototype.point.call(this, y2, x2);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x2, y2) {
    this._context.moveTo(y2, x2);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x2, y2) {
    this._context.lineTo(y2, x2);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x2 = this._x, y2 = this._y, n = x2.length;
    if (n) {
      this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
      if (n === 2) {
        this._context.lineTo(x2[1], y2[1]);
      } else {
        var px = controlPoints(x2), py = controlPoints(y2);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x2, y2) {
    this._x.push(+x2);
    this._y.push(+y2);
  }
};
function controlPoints(x2) {
  var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
  a2[0] = 0, b[0] = 2, r[0] = x2[0] + 2 * x2[1];
  for (i = 1; i < n - 1; ++i) a2[i] = 1, b[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
  a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
  for (i = 1; i < n; ++i) m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a2[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a2[i] = (r[i] - a2[i + 1]) / b[i];
  b[n - 1] = (x2[n] + a2[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x2[i + 1] - a2[i + 1];
  return [a2, b];
}
function natural_default(context) {
  return new Natural(context);
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      // falls through
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y2);
          this._context.lineTo(x2, y2);
        } else {
          var x1 = this._x * (1 - this._t) + x2 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y2);
        }
        break;
      }
    }
    this._x = x2, this._y = y2;
  }
};
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}

// node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

// node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

// node_modules/d3-shape/src/stack.js
function stackValue(d, key) {
  return d[key];
}
function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}
function stack_default() {
  var keys = constant_default2([]), order = none_default2, offset = none_default, value = stackValue;
  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }
    for (i = 0, oz = array_default2(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant_default2(Array.from(_)), stack) : keys;
  };
  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default2(+_), stack) : value;
  };
  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none_default2 : typeof _ === "function" ? _ : constant_default2(Array.from(_)), stack) : order;
  };
  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none_default : _, stack) : offset;
  };
  return stack;
}

// node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y2; j < m; ++j) {
    for (y2 = i = 0; i < n; ++i) y2 += series[i][j][1] || 0;
    if (y2) for (i = 0; i < n; ++i) series[i][j][1] /= y2;
  }
  none_default(series, order);
}

// node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}

// node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y2 = 0; i < n; ++i) y2 += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y2 / 2;
  }
  none_default(series, order);
}

// node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y2 = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k2 = 0; k2 < i; ++k2) {
        var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y2;
    if (s1) y2 -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y2;
  none_default(series, order);
}

// node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a2, b) {
    return peaks[a2] - peaks[b];
  });
}
function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}

// node_modules/d3-shape/src/order/ascending.js
function ascending_default(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a2, b) {
    return sums[a2] - sums[b];
  });
}
function sum2(series) {
  var s2 = 0, i = -1, n = series.length, v2;
  while (++i < n) if (v2 = +series[i][1]) s2 += v2;
  return s2;
}

// node_modules/d3-shape/src/order/descending.js
function descending_default2(series) {
  return ascending_default(series).reverse();
}

// node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n = series.length, i, j, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }
  return bottoms.reverse().concat(tops);
}

// node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}

// node_modules/@mui/x-charts/esm/internals/stackSeries.js
var StackOrder = {
  /**
   * Series order such that the earliest series (according to the maximum value) is at the bottom.
   * */
  appearance: appearance_default,
  /**
   *  Series order such that the smallest series (according to the sum of values) is at the bottom.
   * */
  ascending: ascending_default,
  /**
   * Series order such that the largest series (according to the sum of values) is at the bottom.
   */
  descending: descending_default2,
  /**
   * Series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside. This order is recommended for streamgraphs in conjunction with the wiggle offset. See Stacked Graphs—Geometry & Aesthetics by Byron & Wattenberg for more information.
   */
  insideOut: insideOut_default,
  /**
   * Given series order [0, 1, … n - 1] where n is the number of elements in series. Thus, the stack order is given by the key accessor.
   */
  none: none_default2,
  /**
   * Reverse of the given series order [n - 1, n - 2, … 0] where n is the number of elements in series. Thus, the stack order is given by the reverse of the key accessor.
   */
  reverse: reverse_default
};
var StackOffset = {
  /**
   * Applies a zero baseline and normalizes the values for each point such that the topline is always one.
   * */
  expand: expand_default,
  /**
   * Positive values are stacked above zero, negative values are stacked below zero, and zero values are stacked at zero.
   * */
  diverging: diverging_default,
  /**
   * Applies a zero baseline.
   * */
  none: none_default,
  /**
   * Shifts the baseline down such that the center of the streamgraph is always at zero.
   * */
  silhouette: silhouette_default,
  /**
   * Shifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the inside-out order. See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.
   * */
  wiggle: wiggle_default
};
var getStackingGroups = (params) => {
  const {
    series,
    seriesOrder,
    defaultStrategy
  } = params;
  const stackingGroups = [];
  const stackIndex = {};
  seriesOrder.forEach((id) => {
    const {
      stack,
      stackOrder,
      stackOffset
    } = series[id];
    if (stack === void 0) {
      stackingGroups.push({
        ids: [id],
        stackingOrder: StackOrder.none,
        stackingOffset: StackOffset.none
      });
    } else if (stackIndex[stack] === void 0) {
      stackIndex[stack] = stackingGroups.length;
      stackingGroups.push({
        ids: [id],
        stackingOrder: StackOrder[stackOrder ?? (defaultStrategy == null ? void 0 : defaultStrategy.stackOrder) ?? "none"],
        stackingOffset: StackOffset[stackOffset ?? (defaultStrategy == null ? void 0 : defaultStrategy.stackOffset) ?? "diverging"]
      });
    } else {
      stackingGroups[stackIndex[stack]].ids.push(id);
      if (stackOrder !== void 0) {
        stackingGroups[stackIndex[stack]].stackingOrder = StackOrder[stackOrder];
      }
      if (stackOffset !== void 0) {
        stackingGroups[stackIndex[stack]].stackingOffset = StackOffset[stackOffset];
      }
    }
  });
  return stackingGroups;
};

// node_modules/@mui/x-charts/esm/internals/defaultizeValueFormatter.js
function defaultizeValueFormatter(series, defaultValueFormatter) {
  const defaultizedSeries = {};
  Object.keys(series).forEach((seriesId) => {
    defaultizedSeries[seriesId] = _extends({}, series[seriesId], {
      valueFormatter: series[seriesId].valueFormatter ?? defaultValueFormatter
    });
  });
  return defaultizedSeries;
}

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/seriesProcessor.js
var seriesProcessor = (params, dataset) => {
  const {
    seriesOrder,
    series
  } = params;
  const stackingGroups = getStackingGroups(params);
  const d3Dataset = dataset ?? [];
  seriesOrder.forEach((id) => {
    const data = series[id].data;
    if (data !== void 0) {
      data.forEach((value, index2) => {
        if (d3Dataset.length <= index2) {
          d3Dataset.push({
            [id]: value
          });
        } else {
          d3Dataset[index2][id] = value;
        }
      });
    } else if (dataset === void 0) {
      throw new Error([`MUI X: bar series with id='${id}' has no data.`, "Either provide a data property to the series or use the dataset prop."].join("\n"));
    }
  });
  const completedSeries = {};
  stackingGroups.forEach((stackingGroup) => {
    const {
      ids,
      stackingOffset,
      stackingOrder
    } = stackingGroup;
    const stackedSeries = stack_default().keys(ids.map((id) => {
      const dataKey = series[id].dataKey;
      return series[id].data === void 0 && dataKey !== void 0 ? dataKey : id;
    })).value((d, key) => d[key] ?? 0).order(stackingOrder).offset(stackingOffset)(d3Dataset);
    ids.forEach((id, index2) => {
      const dataKey = series[id].dataKey;
      completedSeries[id] = _extends({
        layout: "vertical",
        labelMarkType: "square"
      }, series[id], {
        data: dataKey ? dataset.map((data) => {
          const value = data[dataKey];
          if (typeof value !== "number") {
            if (true) {
              if (value !== null) {
                warnOnce([`MUI X: your dataset key "${dataKey}" is used for plotting bars, but contains nonnumerical elements.`, "Bar plots only support numbers and null values."]);
              }
            }
            return 0;
          }
          return value;
        }) : series[id].data,
        stackedData: stackedSeries[index2].map(([a2, b]) => [a2, b])
      });
    });
  });
  return {
    seriesOrder,
    stackingGroups,
    series: defaultizeValueFormatter(completedSeries, (v2) => v2 == null ? "" : v2.toLocaleString())
  };
};
var seriesProcessor_default = seriesProcessor;

// node_modules/@mui/x-charts/esm/internals/getLabel.js
function getLabel(value, location) {
  return typeof value === "function" ? value(location) : value;
}

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/legend.js
var legendGetter = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      markType: series[seriesId].labelMarkType,
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel
    });
    return acc;
  }, []);
};
var legend_default = legendGetter;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/getColor.js
var getColor = (series, xAxis, yAxis) => {
  const verticalLayout = series.layout === "vertical";
  const bandColorScale = verticalLayout ? xAxis == null ? void 0 : xAxis.colorScale : yAxis == null ? void 0 : yAxis.colorScale;
  const valueColorScale = verticalLayout ? yAxis == null ? void 0 : yAxis.colorScale : xAxis == null ? void 0 : xAxis.colorScale;
  const bandValues = verticalLayout ? xAxis == null ? void 0 : xAxis.data : yAxis == null ? void 0 : yAxis.data;
  if (valueColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color2 = value === null ? series.color : valueColorScale(value);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  if (bandColorScale && bandValues) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = bandValues[dataIndex];
      const color2 = value === null ? series.color : bandColorScale(value);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  return () => series.color;
};
var getColor_default = getColor;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/tooltip.js
var tooltipGetter = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const value = series.data[identifier.dataIndex];
  if (value == null) {
    return null;
  }
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: series.labelMarkType
  };
};
var axisTooltipGetter = (series) => {
  return Object.values(series).map((s2) => s2.layout === "horizontal" ? {
    direction: "y",
    axisId: s2.yAxisId
  } : {
    direction: "x",
    axisId: s2.xAxisId
  });
};
var tooltip_default = tooltipGetter;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default = getSeriesWithDefaultValues;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/index.js
var seriesConfig = {
  seriesProcessor: seriesProcessor_default,
  colorProcessor: getColor_default,
  legendGetter: legend_default,
  tooltipGetter: tooltip_default,
  axisTooltipGetter,
  xExtremumGetter: getExtremumX,
  yExtremumGetter: getExtremumY,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default
};

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/extremums.js
var mergeMinMax = (acc, val) => {
  return [val[0] === null ? acc[0] : Math.min(acc[0], val[0]), val[1] === null ? acc[1] : Math.max(acc[1], val[1])];
};
var getExtremumX2 = (params) => {
  const {
    series,
    axis,
    isDefaultAxis,
    getFilters
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const axisId = series[seriesId].xAxisId;
    return axisId === axis.id || axisId === void 0 && isDefaultAxis;
  }).reduce((acc, seriesId) => {
    var _a;
    const filter2 = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const seriesMinMax = (_a = series[seriesId].data) == null ? void 0 : _a.reduce((accSeries, d, dataIndex) => {
      if (filter2 && !filter2(d, dataIndex)) {
        return accSeries;
      }
      return mergeMinMax(accSeries, [d.x, d.x]);
    }, [Infinity, -Infinity]);
    return mergeMinMax(acc, seriesMinMax ?? [Infinity, -Infinity]);
  }, [Infinity, -Infinity]);
};
var getExtremumY2 = (params) => {
  const {
    series,
    axis,
    isDefaultAxis,
    getFilters
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const axisId = series[seriesId].yAxisId;
    return axisId === axis.id || axisId === void 0 && isDefaultAxis;
  }).reduce((acc, seriesId) => {
    var _a;
    const filter2 = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const seriesMinMax = (_a = series[seriesId].data) == null ? void 0 : _a.reduce((accSeries, d, dataIndex) => {
      if (filter2 && !filter2(d, dataIndex)) {
        return accSeries;
      }
      return mergeMinMax(accSeries, [d.y, d.y]);
    }, [Infinity, -Infinity]);
    return mergeMinMax(acc, seriesMinMax ?? [Infinity, -Infinity]);
  }, [Infinity, -Infinity]);
};

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/seriesProcessor.js
var seriesProcessor2 = ({
  series,
  seriesOrder
}, dataset) => {
  const completeSeries = Object.fromEntries(Object.entries(series).map(([seriesId, seriesData]) => {
    const datasetKeys = seriesData == null ? void 0 : seriesData.datasetKeys;
    const missingKeys = ["x", "y", "id"].filter((key) => typeof (datasetKeys == null ? void 0 : datasetKeys[key]) !== "string");
    if ((seriesData == null ? void 0 : seriesData.datasetKeys) && missingKeys.length > 0) {
      throw new Error([`MUI X: scatter series with id='${seriesId}' has incomplete datasetKeys.`, `Properties ${missingKeys.map((key) => `"${key}"`).join(", ")} are missing.`].join("\n"));
    }
    const data = !datasetKeys ? seriesData.data ?? [] : (dataset == null ? void 0 : dataset.map((d) => {
      return {
        x: d[datasetKeys.x] ?? null,
        y: d[datasetKeys.y] ?? null,
        z: datasetKeys.z && d[datasetKeys.z],
        id: datasetKeys.id && d[datasetKeys.id]
      };
    })) ?? [];
    return [seriesId, _extends({
      labelMarkType: "circle",
      markerSize: 4
    }, seriesData, {
      data,
      valueFormatter: seriesData.valueFormatter ?? ((v2) => v2 && `(${v2.x}, ${v2.y})`)
    })];
  }));
  return {
    series: completeSeries,
    seriesOrder
  };
};
var seriesProcessor_default2 = seriesProcessor2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/getColor.js
var getColor2 = (series, xAxis, yAxis, zAxis) => {
  const zColorScale = zAxis == null ? void 0 : zAxis.colorScale;
  const yColorScale = yAxis == null ? void 0 : yAxis.colorScale;
  const xColorScale = xAxis == null ? void 0 : xAxis.colorScale;
  if (zColorScale) {
    return (dataIndex) => {
      var _a, _b;
      if (dataIndex === void 0) {
        return series.color;
      }
      if (((_a = zAxis == null ? void 0 : zAxis.data) == null ? void 0 : _a[dataIndex]) !== void 0) {
        const color3 = zColorScale((_b = zAxis == null ? void 0 : zAxis.data) == null ? void 0 : _b[dataIndex]);
        if (color3 !== null) {
          return color3;
        }
      }
      const value = series.data[dataIndex];
      const color2 = value === null ? series.color : zColorScale(value.z);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  if (yColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color2 = value === null ? series.color : yColorScale(value.y);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  if (xColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color2 = value === null ? series.color : xColorScale(value.x);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  return () => series.color;
};
var getColor_default2 = getColor2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/legend.js
var legendGetter2 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      markType: series[seriesId].labelMarkType,
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel
    });
    return acc;
  }, []);
};
var legend_default2 = legendGetter2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/tooltip.js
var tooltipGetter2 = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const value = series.data[identifier.dataIndex];
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: series.labelMarkType
  };
};
var tooltip_default2 = tooltipGetter2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues2 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default2 = getSeriesWithDefaultValues2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/index.js
var seriesConfig2 = {
  seriesProcessor: seriesProcessor_default2,
  colorProcessor: getColor_default2,
  legendGetter: legend_default2,
  tooltipGetter: tooltip_default2,
  xExtremumGetter: getExtremumX2,
  yExtremumGetter: getExtremumY2,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default2
};

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/extremums.js
var getExtremumX3 = (params) => {
  const {
    axis
  } = params;
  const minX = Math.min(...axis.data ?? []);
  const maxX = Math.max(...axis.data ?? []);
  return [minX, maxX];
};
function getSeriesExtremums(getValues, data, stackedData, filter2) {
  return stackedData.reduce((seriesAcc, stackedValue, index2) => {
    if (data[index2] === null) {
      return seriesAcc;
    }
    const [base, value] = getValues(stackedValue);
    if (filter2 && (!filter2({
      y: base,
      x: null
    }, index2) || !filter2({
      y: value,
      x: null
    }, index2))) {
      return seriesAcc;
    }
    return [Math.min(base, value, seriesAcc[0]), Math.max(base, value, seriesAcc[1])];
  }, [Infinity, -Infinity]);
}
var getExtremumY3 = (params) => {
  const {
    series,
    axis,
    isDefaultAxis,
    getFilters
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const yAxisId = series[seriesId].yAxisId;
    return yAxisId === axis.id || isDefaultAxis && yAxisId === void 0;
  }).reduce((acc, seriesId) => {
    const {
      area,
      stackedData,
      data
    } = series[seriesId];
    const isArea = area !== void 0;
    const filter2 = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const getValues = isArea && axis.scaleType !== "log" && typeof series[seriesId].baseline !== "string" ? (d) => d : (d) => [d[1], d[1]];
    const seriesExtremums = getSeriesExtremums(getValues, data, stackedData, filter2);
    const [seriesMin, seriesMax] = seriesExtremums;
    return [Math.min(seriesMin, acc[0]), Math.max(seriesMax, acc[1])];
  }, [Infinity, -Infinity]);
};

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/seriesProcessor.js
var seriesProcessor3 = (params, dataset) => {
  const {
    seriesOrder,
    series
  } = params;
  const stackingGroups = getStackingGroups(_extends({}, params, {
    defaultStrategy: {
      stackOffset: "none"
    }
  }));
  const d3Dataset = dataset ?? [];
  seriesOrder.forEach((id) => {
    const data = series[id].data;
    if (data !== void 0) {
      data.forEach((value, index2) => {
        if (d3Dataset.length <= index2) {
          d3Dataset.push({
            [id]: value
          });
        } else {
          d3Dataset[index2][id] = value;
        }
      });
    } else if (dataset === void 0 && true) {
      throw new Error([`MUI X: line series with id='${id}' has no data.`, "Either provide a data property to the series or use the dataset prop."].join("\n"));
    }
  });
  const completedSeries = {};
  stackingGroups.forEach((stackingGroup) => {
    const {
      ids,
      stackingOrder,
      stackingOffset
    } = stackingGroup;
    const stackedSeries = stack_default().keys(ids.map((id) => {
      const dataKey = series[id].dataKey;
      return series[id].data === void 0 && dataKey !== void 0 ? dataKey : id;
    })).value((d, key) => d[key] ?? 0).order(stackingOrder).offset(stackingOffset)(d3Dataset);
    ids.forEach((id, index2) => {
      const dataKey = series[id].dataKey;
      completedSeries[id] = _extends({
        labelMarkType: "line"
      }, series[id], {
        data: dataKey ? dataset.map((data) => {
          const value = data[dataKey];
          if (typeof value !== "number") {
            if (true) {
              if (value !== null) {
                warnOnce([`MUI X: Your dataset key "${dataKey}" is used for plotting line, but contains nonnumerical elements.`, "Line plots only support numbers and null values."]);
              }
            }
            return null;
          }
          return value;
        }) : series[id].data,
        stackedData: stackedSeries[index2].map(([a2, b]) => [a2, b])
      });
    });
  });
  return {
    seriesOrder,
    stackingGroups,
    series: defaultizeValueFormatter(completedSeries, (v2) => v2 == null ? "" : v2.toLocaleString())
  };
};
var seriesProcessor_default3 = seriesProcessor3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/getColor.js
var getColor3 = (series, xAxis, yAxis) => {
  const yColorScale = yAxis == null ? void 0 : yAxis.colorScale;
  const xColorScale = xAxis == null ? void 0 : xAxis.colorScale;
  if (yColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color2 = value === null ? series.color : yColorScale(value);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  if (xColorScale) {
    return (dataIndex) => {
      var _a;
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = (_a = xAxis.data) == null ? void 0 : _a[dataIndex];
      const color2 = value === null ? series.color : xColorScale(value);
      if (color2 === null) {
        return series.color;
      }
      return color2;
    };
  }
  return () => series.color;
};
var getColor_default3 = getColor3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/legend.js
var legendGetter3 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      markType: series[seriesId].labelMarkType,
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel
    });
    return acc;
  }, []);
};
var legend_default3 = legendGetter3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/tooltip.js
var tooltipGetter3 = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const value = series.data[identifier.dataIndex];
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: series.labelMarkType
  };
};
var axisTooltipGetter2 = (series) => {
  return Object.values(series).map((s2) => ({
    direction: "x",
    axisId: s2.xAxisId
  }));
};
var tooltip_default3 = tooltipGetter3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues3 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default3 = getSeriesWithDefaultValues3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/index.js
var seriesConfig3 = {
  colorProcessor: getColor_default3,
  seriesProcessor: seriesProcessor_default3,
  legendGetter: legend_default3,
  tooltipGetter: tooltip_default3,
  axisTooltipGetter: axisTooltipGetter2,
  xExtremumGetter: getExtremumX3,
  yExtremumGetter: getExtremumY3,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default3
};

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/seriesProcessor.js
var getSortingComparator = (comparator = "none") => {
  if (typeof comparator === "function") {
    return comparator;
  }
  switch (comparator) {
    case "none":
      return null;
    case "desc":
      return (a2, b) => b - a2;
    case "asc":
      return (a2, b) => a2 - b;
    default:
      return null;
  }
};
var seriesProcessor4 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  const defaultizedSeries = {};
  seriesOrder.forEach((seriesId) => {
    const arcs = pie_default().startAngle(2 * Math.PI * (series[seriesId].startAngle ?? 0) / 360).endAngle(2 * Math.PI * (series[seriesId].endAngle ?? 360) / 360).padAngle(2 * Math.PI * (series[seriesId].paddingAngle ?? 0) / 360).sortValues(getSortingComparator(series[seriesId].sortingValues ?? "none"))(series[seriesId].data.map((piePoint) => piePoint.value));
    defaultizedSeries[seriesId] = _extends({
      labelMarkType: "circle",
      valueFormatter: (item) => item.value.toLocaleString()
    }, series[seriesId], {
      data: series[seriesId].data.map((item, index2) => _extends({}, item, {
        id: item.id ?? `auto-generated-pie-id-${seriesId}-${index2}`
      }, arcs[index2])).map((item, index2) => {
        var _a, _b;
        return _extends({
          labelMarkType: "circle"
        }, item, {
          formattedValue: ((_b = (_a = series[seriesId]).valueFormatter) == null ? void 0 : _b.call(_a, _extends({}, item, {
            label: getLabel(item.label, "arc")
          }), {
            dataIndex: index2
          })) ?? item.value.toLocaleString()
        });
      })
    });
  });
  return {
    seriesOrder,
    series: defaultizedSeries
  };
};
var seriesProcessor_default4 = seriesProcessor4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/getColor.js
var getColor4 = (series) => {
  return (dataIndex) => {
    return series.data[dataIndex].color;
  };
};
var getColor_default4 = getColor4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/legend.js
var legendGetter4 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    series[seriesId].data.forEach((item, dataIndex) => {
      const formattedLabel = getLabel(item.label, "legend");
      if (formattedLabel === void 0) {
        return;
      }
      acc.push({
        markType: item.labelMarkType ?? series[seriesId].labelMarkType,
        id: item.id ?? dataIndex,
        seriesId,
        color: item.color,
        label: formattedLabel,
        itemId: item.id ?? dataIndex
      });
    });
    return acc;
  }, []);
};
var legend_default4 = legendGetter4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/tooltip.js
var tooltipGetter4 = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const point6 = series.data[identifier.dataIndex];
  if (point6 == null) {
    return null;
  }
  const label = getLabel(point6.label, "tooltip");
  const value = _extends({}, point6, {
    label
  });
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: point6.labelMarkType ?? series.labelMarkType
  };
};
var tooltip_default4 = tooltipGetter4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues4 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`
  }, seriesData, {
    data: seriesData.data.map((d, index2) => _extends({
      color: colors[index2 % colors.length]
    }, d))
  });
};
var getSeriesWithDefaultValues_default4 = getSeriesWithDefaultValues4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/index.js
var seriesConfig4 = {
  colorProcessor: getColor_default4,
  seriesProcessor: seriesProcessor_default4,
  legendGetter: legend_default4,
  tooltipGetter: tooltip_default4,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default4
};

// node_modules/@mui/x-charts/esm/context/ChartProvider/ChartProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var defaultSeriesConfig = {
  bar: seriesConfig,
  scatter: seriesConfig2,
  line: seriesConfig3,
  pie: seriesConfig4
};
var defaultPlugins = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight];
function ChartProvider(props) {
  const {
    children,
    plugins = defaultPlugins,
    pluginParams = {},
    seriesConfig: seriesConfig5 = defaultSeriesConfig
  } = props;
  const {
    contextValue
  } = useCharts(plugins, pluginParams, seriesConfig5);
  return (0, import_jsx_runtime.jsx)(ChartContext.Provider, {
    value: contextValue,
    children
  });
}

// node_modules/@mui/x-charts/esm/context/ChartProvider/useChartContext.js
var React12 = __toESM(require_react(), 1);
var useChartContext = () => {
  const context = React12.useContext(ChartContext);
  if (context == null) {
    throw new Error(["MUI X: Could not find the Chart context.", "It looks like you rendered your component outside of a ChartDataProvider.", "This can also happen if you are bundling multiple versions of the library."].join("\n"));
  }
  return context;
};

// node_modules/@mui/x-charts/esm/internals/store/useStore.js
function useStore() {
  const context = useChartContext();
  if (!context) {
    throw new Error(["MUI X: Could not find the charts context.", "It looks like you rendered your component outside of a ChartContainer parent component."].join("\n"));
  }
  return context.store;
}

// node_modules/@mui/x-charts/esm/hooks/useDrawingArea.js
function useDrawingArea() {
  const store = useStore();
  return useSelector(store, selectorChartDrawingArea);
}

// node_modules/@mui/x-charts/esm/hooks/useChartId.js
function useChartId2() {
  const store = useStore();
  return useSelector(store, selectorChartId);
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.js
var React13 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/defaultizeAxis.js
function defaultizeAxis(inAxis, dataset, axisName) {
  const DEFAULT_AXIS_KEY = axisName === "rotation" ? DEFAULT_ROTATION_AXIS_KEY : DEFAULT_RADIUS_AXIS_KEY;
  const inputAxes = inAxis && inAxis.length > 0 ? inAxis : [{
    id: DEFAULT_AXIS_KEY
  }];
  return inputAxes.map((axisConfig, index2) => {
    const id = `defaultized-${axisName}-axis-${index2}`;
    const dataKey = axisConfig.dataKey;
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      return _extends({
        id
      }, axisConfig);
    }
    if (dataset === void 0) {
      throw new Error(`MUI X: ${axisName}-axis uses \`dataKey\` but no \`dataset\` is provided.`);
    }
    return _extends({
      id,
      data: dataset.map((d) => d[dataKey])
    }, axisConfig);
  });
}

// node_modules/@mui/x-charts/esm/internals/isPolar.js
function isPolarSeriesType(seriesType) {
  return polarSeriesTypes.getTypes().has(seriesType);
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/getAxisExtremum.js
var axisExtremumCallback2 = (acc, chartType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries) => {
  var _a;
  const getter = axisDirection === "rotation" ? seriesConfig5[chartType].rotationExtremumGetter : seriesConfig5[chartType].radiusExtremumGetter;
  const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
  const [minChartTypeData, maxChartTypeData] = (getter == null ? void 0 : getter({
    series,
    axis,
    axisIndex,
    isDefaultAxis: axisIndex === 0
  })) ?? [Infinity, -Infinity];
  const [minData, maxData] = acc;
  return [Math.min(minChartTypeData, minData), Math.max(maxChartTypeData, maxData)];
};
var getAxisExtremum2 = (axis, axisDirection, seriesConfig5, axisIndex, formattedSeries) => {
  const polarSeriesTypes2 = Object.keys(seriesConfig5).filter(isPolarSeriesType);
  const extremums = polarSeriesTypes2.reduce((acc, charType) => axisExtremumCallback2(acc, charType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries), [Infinity, -Infinity]);
  if (Number.isNaN(extremums[0]) || Number.isNaN(extremums[1])) {
    return [Infinity, -Infinity];
  }
  return extremums;
};

// node_modules/@mui/x-charts/esm/internals/angleConversion.js
var deg2rad = (value, defaultRad) => {
  if (value === void 0) {
    return defaultRad;
  }
  return Math.PI * value / 180;
};
var rad2deg = (value, defaultDeg) => {
  if (value === void 0) {
    return defaultDeg;
  }
  return 180 * value / Math.PI;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/getAxisTriggerTooltip.js
var getAxisTriggerTooltip2 = (axisDirection, seriesConfig5, formattedSeries, defaultAxisId) => {
  const tooltipAxesIds = /* @__PURE__ */ new Set();
  const chartTypes = Object.keys(seriesConfig5).filter(isPolarSeriesType);
  chartTypes.forEach((chartType) => {
    var _a, _b, _c;
    const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
    const tooltipAxes = (_c = (_b = seriesConfig5[chartType]).axisTooltipGetter) == null ? void 0 : _c.call(_b, series);
    if (tooltipAxes === void 0) {
      return;
    }
    tooltipAxes.forEach(({
      axisId,
      direction
    }) => {
      if (direction === axisDirection) {
        tooltipAxesIds.add(axisId ?? defaultAxisId);
      }
    });
  });
  return tooltipAxesIds;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/computeAxisValue.js
function getRange2(drawingArea, axisDirection, axis) {
  if (axisDirection === "rotation") {
    if (axis.scaleType === "point") {
      const angles = [deg2rad(axis.startAngle, 0), deg2rad(axis.endAngle, 2 * Math.PI)];
      const diff = angles[1] - angles[0];
      if (diff > Math.PI * 2 - 0.1) {
        angles[1] -= diff / axis.data.length;
      }
      return angles;
    }
    return [deg2rad(axis.startAngle, 0), deg2rad(axis.endAngle, 2 * Math.PI)];
  }
  return [0, Math.min(drawingArea.height, drawingArea.width) / 2];
}
var isDateData2 = (data) => (data == null ? void 0 : data[0]) instanceof Date;
function createDateFormatter2(axis, range2) {
  const timeScale = time(axis.data, range2);
  return (v2, {
    location
  }) => location === "tick" ? timeScale.tickFormat(axis.tickNumber)(v2) : `${v2.toLocaleString()}`;
}
var DEFAULT_CATEGORY_GAP_RATIO2 = 0.2;
var DEFAULT_BAR_GAP_RATIO2 = 0.1;
function computeAxisValue2({
  drawingArea,
  formattedSeries,
  axis: allAxis,
  seriesConfig: seriesConfig5,
  axisDirection
}) {
  if (allAxis === void 0) {
    return {
      axis: {},
      axisIds: []
    };
  }
  const axisIdsTriggeringTooltip = getAxisTriggerTooltip2(axisDirection, seriesConfig5, formattedSeries, allAxis[0].id);
  const completeAxis = {};
  allAxis.forEach((eachAxis, axisIndex) => {
    const axis = eachAxis;
    const range2 = getRange2(drawingArea, axisDirection, axis);
    const [minData, maxData] = getAxisExtremum2(axis, axisDirection, seriesConfig5, axisIndex, formattedSeries);
    const triggerTooltip = !axis.ignoreTooltip && axisIdsTriggeringTooltip.has(axis.id);
    const data = axis.data ?? [];
    if (isBandScaleConfig(axis)) {
      const categoryGapRatio = axis.categoryGapRatio ?? DEFAULT_CATEGORY_GAP_RATIO2;
      const barGapRatio = axis.barGapRatio ?? DEFAULT_BAR_GAP_RATIO2;
      completeAxis[axis.id] = _extends({
        offset: 0,
        categoryGapRatio,
        barGapRatio,
        triggerTooltip
      }, axis, {
        data,
        scale: band(axis.data, range2).paddingInner(categoryGapRatio).paddingOuter(categoryGapRatio / 2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData2(axis.data)) {
        const dateFormatter = createDateFormatter2(axis, range2);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (isPointScaleConfig(axis)) {
      completeAxis[axis.id] = _extends({
        offset: 0,
        triggerTooltip
      }, axis, {
        data,
        scale: point(axis.data, range2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData2(axis.data)) {
        const dateFormatter = createDateFormatter2(axis, range2);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (axis.scaleType === "band" || axis.scaleType === "point") {
      return;
    }
    const scaleType = axis.scaleType ?? "linear";
    const domainLimit = axis.domainLimit ?? "nice";
    const axisExtremums = [axis.min ?? minData, axis.max ?? maxData];
    if (typeof domainLimit === "function") {
      const {
        min: min3,
        max: max3
      } = domainLimit(minData, maxData);
      axisExtremums[0] = min3;
      axisExtremums[1] = max3;
    }
    const rawTickNumber = getTickNumber(_extends({}, axis, {
      range: range2,
      domain: axisExtremums
    }));
    const tickNumber = rawTickNumber / ((range2[1] - range2[0]) / 100);
    const scale2 = getScale(scaleType, axisExtremums, range2);
    const finalScale = domainLimit === "nice" ? scale2.nice(rawTickNumber) : scale2;
    const [minDomain, maxDomain] = finalScale.domain();
    const domain = [axis.min ?? minDomain, axis.max ?? maxDomain];
    completeAxis[axis.id] = _extends({
      offset: 0,
      triggerTooltip
    }, axis, {
      data,
      scaleType,
      scale: finalScale.domain(domain),
      tickNumber,
      colorScale: axis.colorMap && getColorScale(axis.colorMap)
    });
  });
  return {
    axis: completeAxis,
    axisIds: allAxis.map(({
      id
    }) => id)
  };
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.selectors.js
var selectorChartPolarAxisState = (state) => state.polarAxis;
var selectorChartRawRotationAxis = createSelector(selectorChartPolarAxisState, (axis) => axis == null ? void 0 : axis.rotation);
var selectorChartRawRadiusAxis = createSelector(selectorChartPolarAxisState, (axis) => axis == null ? void 0 : axis.radius);
var selectorChartRotationAxis = createSelector([selectorChartRawRotationAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig], (axis, drawingArea, formattedSeries, seriesConfig5) => computeAxisValue2({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "rotation"
}));
var selectorChartRadiusAxis = createSelector([selectorChartRawRadiusAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig], (axis, drawingArea, formattedSeries, seriesConfig5) => computeAxisValue2({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "radius"
}));
var selectorChartPolarCenter = createSelector([selectorChartDrawingArea], (drawingArea) => ({
  cx: drawingArea.left + drawingArea.width / 2,
  cy: drawingArea.top + drawingArea.height / 2
}));

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/coordinateTransformation.js
var generateSvg2rotation = (center) => (x2, y2) => Math.atan2(x2 - center.cx, center.cy - y2);
var generateSvg2polar = (center) => (x2, y2) => {
  const angle = Math.atan2(x2 - center.cx, center.cy - y2);
  return [Math.sqrt((x2 - center.cx) ** 2 + (center.cy - y2) ** 2), angle];
};
var generatePolar2svg = (center) => (radius, rotation) => {
  return [center.cx + radius * Math.sin(rotation), center.cy - radius * Math.cos(rotation)];
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.js
var useChartPolarAxis = ({
  params,
  store,
  seriesConfig: seriesConfig5,
  svgRef,
  instance
}) => {
  const {
    rotationAxis,
    radiusAxis,
    dataset
  } = params;
  if (true) {
    const ids = [...rotationAxis ?? [], ...radiusAxis ?? []].filter((axis) => axis.id).map((axis) => axis.id);
    const duplicates = new Set(ids.filter((id, index2) => ids.indexOf(id) !== index2));
    if (duplicates.size > 0) {
      warnOnce([`MUI X: The following axis ids are duplicated: ${Array.from(duplicates).join(", ")}.`, `Please make sure that each axis has a unique id.`].join("\n"), "error");
    }
  }
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const center = useSelector(store, selectorChartPolarCenter);
  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);
  const {
    axis: rotationAxisWithScale,
    axisIds: rotationAxisIds
  } = useSelector(store, selectorChartRotationAxis);
  const {
    axis: radiusAxisWithScale,
    axisIds: radiusAxisIds
  } = useSelector(store, selectorChartRadiusAxis);
  const isFirstRender = React13.useRef(true);
  React13.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      polarAxis: _extends({}, prev.polarAxis, {
        rotation: defaultizeAxis(rotationAxis, dataset, "rotation"),
        radius: defaultizeAxis(radiusAxis, dataset, "radius")
      })
    }));
  }, [seriesConfig5, drawingArea, rotationAxis, radiusAxis, dataset, store]);
  const svg2rotation = React13.useMemo(() => generateSvg2rotation({
    cx: center.cx,
    cy: center.cy
  }), [center.cx, center.cy]);
  const svg2polar = React13.useMemo(() => generateSvg2polar({
    cx: center.cx,
    cy: center.cy
  }), [center.cx, center.cy]);
  const polar2svg = React13.useMemo(() => generatePolar2svg({
    cx: center.cx,
    cy: center.cy
  }), [center.cx, center.cy]);
  const usedRotationAxisId = rotationAxisIds[0];
  const usedRadiusAxisId = radiusAxisIds[0];
  const mousePosition = React13.useRef({
    isInChart: false,
    x: -1,
    y: -1
  });
  React13.useEffect(() => {
    const element = svgRef.current;
    if (!isInteractionEnabled || element === null || params.disableAxisListener) {
      return () => {
      };
    }
    const handleOut = () => {
      var _a;
      mousePosition.current = {
        isInChart: false,
        x: -1,
        y: -1
      };
      (_a = instance.cleanInteraction) == null ? void 0 : _a.call(instance);
    };
    const handleMove = (event) => {
      var _a;
      const target = "targetTouches" in event ? event.targetTouches[0] : event;
      const svgPoint = getSVGPoint(element, target);
      mousePosition.current.x = svgPoint.x;
      mousePosition.current.y = svgPoint.y;
      if (!instance.isPointInside(svgPoint, {
        targetElement: event.target
      })) {
        if (mousePosition.current.isInChart) {
          instance == null ? void 0 : instance.cleanInteraction();
          mousePosition.current.isInChart = false;
        }
        return;
      }
      const radiusSquare = (center.cx - svgPoint.x) ** 2 + (center.cy - svgPoint.y) ** 2;
      const maxRadius = radiusAxisWithScale[usedRadiusAxisId].scale.range()[1];
      if (radiusSquare > maxRadius ** 2) {
        if (mousePosition.current.isInChart) {
          instance == null ? void 0 : instance.cleanInteraction();
          mousePosition.current.isInChart = false;
        }
        return;
      }
      mousePosition.current.isInChart = true;
      (_a = instance.setPointerCoordinate) == null ? void 0 : _a.call(instance, svgPoint);
    };
    const handleDown = (event) => {
      const target = event.currentTarget;
      if (!target) {
        return;
      }
      if ("hasPointerCapture" in target && target.hasPointerCapture(event.pointerId)) {
        target.releasePointerCapture(event.pointerId);
      }
    };
    element.addEventListener("pointerdown", handleDown);
    element.addEventListener("pointermove", handleMove);
    element.addEventListener("pointerout", handleOut);
    element.addEventListener("pointercancel", handleOut);
    element.addEventListener("pointerleave", handleOut);
    return () => {
      element.removeEventListener("pointerdown", handleDown);
      element.removeEventListener("pointermove", handleMove);
      element.removeEventListener("pointerout", handleOut);
      element.removeEventListener("pointercancel", handleOut);
      element.removeEventListener("pointerleave", handleOut);
    };
  }, [svgRef, store, center, radiusAxisWithScale, usedRadiusAxisId, rotationAxisWithScale, usedRotationAxisId, instance, params.disableAxisListener, isInteractionEnabled, svg2rotation]);
  return {
    instance: {
      svg2polar,
      svg2rotation,
      polar2svg
    }
  };
};
useChartPolarAxis.params = {
  rotationAxis: true,
  radiusAxis: true,
  dataset: true,
  disableAxisListener: true
};
useChartPolarAxis.getInitialState = (params) => ({
  polarAxis: {
    rotation: defaultizeAxis(params.rotationAxis, params.dataset, "rotation"),
    radius: defaultizeAxis(params.radiusAxis, params.dataset, "radius")
  }
});

// node_modules/@mui/x-charts/esm/hooks/useAxis.js
function useXAxes() {
  const store = useStore();
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  return {
    xAxis,
    xAxisIds
  };
}
function useYAxes() {
  const store = useStore();
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  return {
    yAxis,
    yAxisIds
  };
}
function useXAxis(axisId) {
  const store = useStore();
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  const id = axisId ?? xAxisIds[0];
  return xAxis[id];
}
function useYAxis(axisId) {
  const store = useStore();
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  const id = axisId ?? yAxisIds[0];
  return yAxis[id];
}
function useRotationAxes() {
  const store = useStore();
  const {
    axis: rotationAxis,
    axisIds: rotationAxisIds
  } = useSelector(store, selectorChartRotationAxis);
  return {
    rotationAxis,
    rotationAxisIds
  };
}
function useRadiusAxes() {
  const store = useStore();
  const {
    axis: radiusAxis,
    axisIds: radiusAxisIds
  } = useSelector(store, selectorChartRadiusAxis);
  return {
    radiusAxis,
    radiusAxisIds
  };
}
function useRotationAxis(identifier) {
  const store = useStore();
  const {
    axis: rotationAxis,
    axisIds: rotationAxisIds
  } = useSelector(store, selectorChartRotationAxis);
  const id = typeof identifier === "string" ? identifier : rotationAxisIds[identifier ?? 0];
  return rotationAxis[id];
}
function useRadiusAxis(identifier) {
  const store = useStore();
  const {
    axis: radiusAxis,
    axisIds: radiusAxisIds
  } = useSelector(store, selectorChartRadiusAxis);
  const id = typeof identifier === "string" ? identifier : radiusAxisIds[identifier ?? 0];
  return radiusAxis[id];
}

// node_modules/@mui/x-charts/esm/hooks/useScale.js
function getValueToPositionMapper(scale2) {
  if (isBandScale(scale2)) {
    return (value) => (scale2(value) ?? 0) + scale2.bandwidth() / 2;
  }
  return (value) => scale2(value);
}
function useXScale(axisId) {
  const axis = useXAxis(axisId);
  return axis.scale;
}
function useYScale(axisId) {
  const axis = useYAxis(axisId);
  return axis.scale;
}
function useRotationScale(identifier) {
  const axis = useRotationAxis(identifier);
  return axis == null ? void 0 : axis.scale;
}
function useRadiusScale(identifier) {
  const axis = useRadiusAxis(identifier);
  return axis == null ? void 0 : axis.scale;
}

// node_modules/@mui/x-charts/esm/hooks/useZAxis.js
function useZAxes() {
  const store = useStore();
  const {
    axis: zAxis,
    axisIds: zAxisIds
  } = useSelector(store, selectorChartZAxis) ?? {
    axis: {},
    axisIds: []
  };
  return {
    zAxis,
    zAxisIds
  };
}
function useZAxis(identifier) {
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const id = typeof identifier === "string" ? identifier : zAxisIds[identifier ?? 0];
  return zAxis[id];
}

// node_modules/@mui/x-charts/esm/hooks/useColorScale.js
function useXColorScale(axisId) {
  const axis = useXAxis(axisId);
  return axis.colorScale;
}
function useYColorScale(axisId) {
  const axis = useYAxis(axisId);
  return axis.colorScale;
}
function useZColorScale(axisId) {
  const axis = useZAxis(axisId);
  return axis.colorScale;
}

// node_modules/@mui/x-charts/esm/hooks/useSvgRef.js
function useSvgRef() {
  const context = useChartContext();
  if (!context) {
    throw new Error(["MUI X: Could not find the svg ref context.", "It looks like you rendered your component outside of a ChartContainer parent component."].join("\n"));
  }
  return context.svgRef;
}

// node_modules/@mui/x-charts/esm/hooks/useSeries.js
function useSeries() {
  const store = useStore();
  return useSelector(store, selectorChartSeriesProcessed);
}

// node_modules/@mui/x-internals/esm/fastArrayCompare/fastArrayCompare.js
function fastArrayCompare(a2, b) {
  if (a2 === b) {
    return true;
  }
  if (!Array.isArray(a2) || !Array.isArray(b)) {
    return false;
  }
  let i = a2.length;
  if (i !== b.length) {
    return false;
  }
  while (i--) {
    if (a2[i] !== b[i]) {
      return false;
    }
  }
  return true;
}

// node_modules/@mui/x-charts/esm/internals/createSeriesSelectorOfType.js
function createSeriesSelectorsOfType(seriesType) {
  const selectorSeriesWithIds = createSelector([selectorChartSeriesProcessed, (_, ids) => ids], (processedSeries, ids) => {
    var _a, _b, _c, _d, _e, _f;
    if (!ids || Array.isArray(ids) && ids.length === 0) {
      return ((_b = (_a = processedSeries[seriesType]) == null ? void 0 : _a.seriesOrder) == null ? void 0 : _b.map((seriesId) => {
        var _a2;
        return (_a2 = processedSeries[seriesType]) == null ? void 0 : _a2.series[seriesId];
      })) ?? [];
    }
    if (!Array.isArray(ids)) {
      return (_d = (_c = processedSeries[seriesType]) == null ? void 0 : _c.series) == null ? void 0 : _d[ids];
    }
    const result = [];
    const failedIds = [];
    for (const id of ids) {
      const series = (_f = (_e = processedSeries[seriesType]) == null ? void 0 : _e.series) == null ? void 0 : _f[id];
      if (series) {
        result.push(series);
      } else {
        failedIds.push(id);
      }
    }
    if (failedIds.length > 0) {
      const formattedIds = failedIds.map((v2) => JSON.stringify(v2)).join(", ");
      const fnName = `use${seriesType.charAt(0).toUpperCase()}${seriesType.slice(1)}Series`;
      warnOnce([`MUI X: The following ids provided to "${fnName}" could not be found: ${formattedIds}.`, `Make sure that they exist and their series are using the "${seriesType}" series type.`]);
    }
    return result;
  });
  return (ids) => {
    const store = useStore();
    return useSelector(store, selectorSeriesWithIds, ids, fastArrayCompare);
  };
}
function createAllSeriesSelectorOfType(seriesType) {
  const selectorSeries = createSelector(selectorChartSeriesProcessed, (processedSeries) => processedSeries[seriesType]);
  return () => {
    const store = useStore();
    return useSelector(store, selectorSeries);
  };
}

// node_modules/@mui/x-charts/esm/hooks/useScatterSeries.js
var useSelectorSeries = createSeriesSelectorsOfType("scatter");
var useSelectorSeriesContext = createAllSeriesSelectorOfType("scatter");
function useScatterSeries(seriesIds) {
  return useSelectorSeries(seriesIds);
}
function useScatterSeriesContext() {
  return useSelectorSeriesContext();
}

// node_modules/@mui/x-charts/esm/hooks/usePieSeries.js
var useSelectorSeries2 = createSeriesSelectorsOfType("pie");
var useSelectorSeriesContext2 = createAllSeriesSelectorOfType("pie");
function usePieSeries(seriesIds) {
  return useSelectorSeries2(seriesIds);
}
function usePieSeriesContext() {
  return useSelectorSeriesContext2();
}

// node_modules/@mui/x-charts/esm/hooks/useBarSeries.js
var useSelectorSeries3 = createSeriesSelectorsOfType("bar");
var useSelectorSeriesContext3 = createAllSeriesSelectorOfType("bar");
function useBarSeries(seriesIds) {
  return useSelectorSeries3(seriesIds);
}
function useBarSeriesContext() {
  return useSelectorSeriesContext3();
}

// node_modules/@mui/x-charts/esm/hooks/useLineSeries.js
var useSelectorSeries4 = createSeriesSelectorsOfType("line");
var useSelectorSeriesContext4 = createAllSeriesSelectorOfType("line");
function useLineSeries(seriesIds) {
  return useSelectorSeries4(seriesIds);
}
function useLineSeriesContext() {
  return useSelectorSeriesContext4();
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/createIsHighlighted.js
var createIsHighlighted = (highlightScope, highlightedItem) => (item) => {
  if (!highlightScope || !highlightedItem || !item) {
    return false;
  }
  if (highlightScope.highlight === "series") {
    return item.seriesId === highlightedItem.seriesId;
  }
  if (highlightScope.highlight === "item") {
    return item.dataIndex === highlightedItem.dataIndex && item.seriesId === highlightedItem.seriesId;
  }
  return false;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/createIsFaded.js
var createIsFaded = (highlightScope, highlightedItem) => (item) => {
  if (!highlightScope || !highlightedItem || !item) {
    return false;
  }
  if (highlightScope.fade === "series") {
    return item.seriesId === highlightedItem.seriesId && item.dataIndex !== highlightedItem.dataIndex;
  }
  if (highlightScope.fade === "global") {
    return item.seriesId !== highlightedItem.seriesId || item.dataIndex !== highlightedItem.dataIndex;
  }
  return false;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/useChartHighlight.selectors.js
var selectHighlight = (state) => state.highlight;
var selectSeries = (state) => state.series;
var selectorChartsHighlightScopePerSeriesId = createSelector(selectSeries, (series) => {
  const map4 = /* @__PURE__ */ new Map();
  Object.keys(series.processedSeries).forEach((seriesType) => {
    const seriesData = series.processedSeries[seriesType];
    Object.keys((seriesData == null ? void 0 : seriesData.series) ?? {}).forEach((seriesId) => {
      const seriesItem = seriesData == null ? void 0 : seriesData.series[seriesId];
      map4.set(seriesId, seriesItem == null ? void 0 : seriesItem.highlightScope);
    });
  });
  return map4;
});
var selectorChartsHighlightedItem = createSelector(selectHighlight, (highlight) => highlight.item);
var selectorChartsHighlightScope = createSelector([selectorChartsHighlightScopePerSeriesId, selectorChartsHighlightedItem], (seriesIdToHighlightScope, highlightedItem) => {
  if (!highlightedItem) {
    return null;
  }
  const highlightScope = seriesIdToHighlightScope.get(highlightedItem.seriesId);
  if (highlightScope === void 0) {
    return null;
  }
  return highlightScope;
});
var selectorChartsIsHighlightedCallback = createSelector([selectorChartsHighlightScope, selectorChartsHighlightedItem], createIsHighlighted);
var selectorChartsIsFadedCallback = createSelector([selectorChartsHighlightScope, selectorChartsHighlightedItem], createIsFaded);
var selectorChartsIsHighlighted = createSelector([selectorChartsHighlightScope, selectorChartsHighlightedItem, (_, item) => item], (highlightScope, highlightedItem, item) => createIsHighlighted(highlightScope, highlightedItem)(item));
var selectorChartsIsFaded = createSelector([selectorChartsHighlightScope, selectorChartsHighlightedItem, (_, item) => item], (highlightScope, highlightedItem, item) => createIsFaded(highlightScope, highlightedItem)(item));

// node_modules/@mui/x-charts/esm/hooks/useItemHighlighted.js
function useItemHighlighted(item) {
  const store = useStore();
  const isHighlighted = useSelector(store, selectorChartsIsHighlighted, item);
  const isFaded = useSelector(store, selectorChartsIsFaded, item);
  return {
    isHighlighted,
    isFaded: !isHighlighted && isFaded
  };
}

// node_modules/@mui/x-charts/esm/hooks/useItemHighlightedGetter.js
function useItemHighlightedGetter() {
  const store = useStore();
  const isHighlighted = useSelector(store, selectorChartsIsHighlightedCallback);
  const isFaded = useSelector(store, selectorChartsIsFadedCallback);
  return {
    isHighlighted,
    isFaded
  };
}

// node_modules/@mui/x-charts/esm/hooks/useLegend.js
function getSeriesToDisplay(series, seriesConfig5) {
  return Object.keys(series).flatMap((seriesType) => {
    const getter = seriesConfig5[seriesType].legendGetter;
    return getter === void 0 ? [] : getter(series[seriesType]);
  });
}
function useLegend() {
  const series = useSeries();
  const store = useStore();
  const seriesConfig5 = useSelector(store, selectorChartSeriesConfig);
  return {
    items: getSeriesToDisplay(series, seriesConfig5)
  };
}

// node_modules/@mui/x-charts/esm/hooks/useChartGradientId.js
var React14 = __toESM(require_react(), 1);
function useChartGradientIdBuilder() {
  const chartId = useChartId2();
  return React14.useCallback((axisId) => `${chartId}-gradient-${axisId}`, [chartId]);
}
function useChartGradientIdObjectBoundBuilder() {
  const chartId = useChartId2();
  return React14.useCallback((axisId) => `${chartId}-gradient-${axisId}-object-bound`, [chartId]);
}
function useChartGradientId(axisId) {
  return useChartGradientIdBuilder()(axisId);
}
function useChartGradientIdObjectBound(axisId) {
  return useChartGradientIdObjectBoundBuilder()(axisId);
}

// node_modules/@mui/x-charts/esm/internals/animation/useAnimateInternal.js
var React15 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/animation/animation.js
var import_bezier_easing = __toESM(require_src(), 1);
var ANIMATION_DURATION_MS = 300;
var ANIMATION_TIMING_FUNCTION = "cubic-bezier(0.66, 0, 0.34, 1)";
var ANIMATION_TIMING_FUNCTION_JS = (0, import_bezier_easing.default)(0.66, 0, 0.34, 1);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time2) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time2;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time2) {
  var t = new Timer();
  t.restart(callback, delay, time2);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t03, t13 = taskHead, t22, time2 = Infinity;
  while (t13) {
    if (t13._call) {
      if (time2 > t13._time) time2 = t13._time;
      t03 = t13, t13 = t13._next;
    } else {
      t22 = t13._next, t13._next = null;
      t13 = t03 ? t03._next = t22 : taskHead = t22;
    }
  }
  taskTail = t03;
  sleep(time2);
}
function sleep(time2) {
  if (frame) return;
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity) timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t;
}

// node_modules/@mui/x-charts/esm/internals/animation/Transition.js
var Transition = class {
  /**
   * Create a new ResumableTransition.
   * @param duration Duration in milliseconds
   * @param easingFn The easing function
   * @param onTick Callback function called on each animation frame with the eased time in range [0, 1].
   */
  constructor(duration, easingFn, onTick) {
    this.duration = void 0;
    this.elapsed = 0;
    this.easingFn = void 0;
    this.timer = null;
    this.onTickCallback = void 0;
    this.duration = duration;
    this.easingFn = easingFn;
    this.onTickCallback = onTick;
    this.resume();
  }
  get running() {
    return this.timer !== null;
  }
  timerCallback(elapsed) {
    this.elapsed = Math.min(elapsed, this.duration);
    const t = this.duration === 0 ? 1 : this.elapsed / this.duration;
    const easedT = this.easingFn(t);
    this.onTickCallback(easedT);
    if (this.elapsed >= this.duration) {
      this.stop();
    }
  }
  /**
   * Resume the transition
   */
  resume() {
    if (this.running || this.elapsed >= this.duration) {
      return this;
    }
    const time2 = now() - this.elapsed;
    this.timer = timer((elapsed) => this.timerCallback(elapsed), 0, time2);
    timerFlush();
    return this;
  }
  /**
   * Stops the transition.
   */
  stop() {
    if (!this.running) {
      return this;
    }
    if (this.timer) {
      this.timer.stop();
      this.timer = null;
    }
    return this;
  }
  /**
   * Immediately finishes the transition and calls the tick callback with the final value.
   */
  finish() {
    this.stop();
    timeout_default(() => this.timerCallback(this.duration));
    timerFlush();
    return this;
  }
};

// node_modules/@mui/x-charts/esm/internals/shallowEqual.js
function shallowEqual(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  const keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  for (let i = 0; i < keysA.length; i += 1) {
    const currentKey = keysA[i];
    if (!Object.prototype.hasOwnProperty.call(objB, currentKey) || // @ts-ignore
    !Object.is(objA[currentKey], objB[currentKey])) {
      return false;
    }
  }
  return true;
}

// node_modules/@mui/x-charts/esm/internals/animation/useAnimateInternal.js
function useAnimateInternal(props, {
  createInterpolator,
  applyProps,
  skip,
  initialProps = props
}) {
  const lastInterpolatedPropsRef = React15.useRef(initialProps);
  const transitionRef = React15.useRef(null);
  const elementRef = React15.useRef(null);
  const lastPropsRef = React15.useRef(props);
  useEnhancedEffect_default(() => {
    lastPropsRef.current = props;
  }, [props]);
  useEnhancedEffect_default(() => {
    var _a;
    if (skip) {
      (_a = transitionRef.current) == null ? void 0 : _a.finish();
      transitionRef.current = null;
      elementRef.current = null;
      lastInterpolatedPropsRef.current = props;
    }
  }, [props, skip]);
  const animate = React15.useCallback((element) => {
    const lastInterpolatedProps = lastInterpolatedPropsRef.current;
    const interpolate = createInterpolator(lastInterpolatedProps, props);
    transitionRef.current = new Transition(ANIMATION_DURATION_MS, ANIMATION_TIMING_FUNCTION_JS, (t) => {
      const interpolatedProps = interpolate(t);
      lastInterpolatedPropsRef.current = interpolatedProps;
      applyProps(element, interpolatedProps);
    });
  }, [applyProps, createInterpolator, props]);
  const setRef = React15.useCallback((element) => {
    var _a, _b, _c, _d;
    if (element === null) {
      (_a = transitionRef.current) == null ? void 0 : _a.stop();
      return;
    }
    const lastElement = elementRef.current;
    if (lastElement === element) {
      if (shallowEqual(lastPropsRef.current, props)) {
        (_b = transitionRef.current) == null ? void 0 : _b.resume();
        return;
      }
      (_c = transitionRef.current) == null ? void 0 : _c.stop();
    }
    if (lastElement) {
      (_d = transitionRef.current) == null ? void 0 : _d.stop();
    }
    elementRef.current = element;
    if (transitionRef.current || !skip) {
      animate(element);
    }
  }, [animate, props, skip]);
  return setRef;
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimate.js
function useAnimate(props, {
  createInterpolator,
  transformProps,
  applyProps,
  skip,
  initialProps = props,
  ref
}) {
  const transform = transformProps ?? ((p) => p);
  const animateRef = useAnimateInternal(props, {
    initialProps,
    createInterpolator,
    applyProps: (element, animatedProps) => applyProps(element, transform(animatedProps)),
    skip
  });
  const usedProps = skip ? props : initialProps;
  return _extends({}, transformProps(usedProps), {
    ref: useForkRef(animateRef, ref)
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateArea.js
function useAnimateArea(props) {
  return useAnimate({
    d: props.d
  }, {
    createInterpolator: (lastProps, newProps) => {
      const interpolate = string_default(lastProps.d, newProps.d);
      return (t) => ({
        d: interpolate(t)
      });
    },
    applyProps: (element, {
      d
    }) => element.setAttribute("d", d),
    transformProps: (p) => p,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateBar.js
function barPropsInterpolator(from, to) {
  const interpolateX = number_default(from.x, to.x);
  const interpolateY = number_default(from.y, to.y);
  const interpolateWidth = number_default(from.width, to.width);
  const interpolateHeight = number_default(from.height, to.height);
  return (t) => {
    return {
      x: interpolateX(t),
      y: interpolateY(t),
      width: interpolateWidth(t),
      height: interpolateHeight(t)
    };
  };
}
function useAnimateBar(props) {
  const initialProps = {
    x: props.layout === "vertical" ? props.x : props.xOrigin,
    y: props.layout === "vertical" ? props.yOrigin : props.y,
    width: props.layout === "vertical" ? props.width : 0,
    height: props.layout === "vertical" ? 0 : props.height
  };
  return useAnimate({
    x: props.x,
    y: props.y,
    width: props.width,
    height: props.height
  }, {
    createInterpolator: barPropsInterpolator,
    applyProps(element, animatedProps) {
      element.setAttribute("x", animatedProps.x.toString());
      element.setAttribute("y", animatedProps.y.toString());
      element.setAttribute("width", animatedProps.width.toString());
      element.setAttribute("height", animatedProps.height.toString());
    },
    transformProps: (p) => p,
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateBarLabel.js
function barLabelPropsInterpolator(from, to) {
  const interpolateX = number_default(from.x, to.x);
  const interpolateY = number_default(from.y, to.y);
  const interpolateWidth = number_default(from.width, to.width);
  const interpolateHeight = number_default(from.height, to.height);
  return (t) => {
    return {
      x: interpolateX(t),
      y: interpolateY(t),
      width: interpolateWidth(t),
      height: interpolateHeight(t)
    };
  };
}
function useAnimateBarLabel(props) {
  const initialProps = {
    x: props.layout === "vertical" ? props.x + props.width / 2 : props.xOrigin,
    y: props.layout === "vertical" ? props.yOrigin : props.y + props.height / 2,
    width: props.width,
    height: props.height
  };
  const currentProps = {
    x: props.x + props.width / 2,
    y: props.y + props.height / 2,
    width: props.width,
    height: props.height
  };
  return useAnimate(currentProps, {
    createInterpolator: barLabelPropsInterpolator,
    transformProps: (p) => p,
    applyProps(element, animatedProps) {
      element.setAttribute("x", animatedProps.x.toString());
      element.setAttribute("y", animatedProps.y.toString());
      element.setAttribute("width", animatedProps.width.toString());
      element.setAttribute("height", animatedProps.height.toString());
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateLine.js
function useAnimateLine(props) {
  return useAnimate({
    d: props.d
  }, {
    createInterpolator: (lastProps, newProps) => {
      const interpolate = string_default(lastProps.d, newProps.d);
      return (t) => ({
        d: interpolate(t)
      });
    },
    applyProps: (element, {
      d
    }) => element.setAttribute("d", d),
    skip: props.skipAnimation,
    transformProps: (p) => p,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimatePieArc.js
function pieArcPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolatePaddingAngle = number_default(from.paddingAngle, to.paddingAngle);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      paddingAngle: interpolatePaddingAngle(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimatePieArc(props) {
  const initialProps = {
    startAngle: (props.startAngle + props.endAngle) / 2,
    endAngle: (props.startAngle + props.endAngle) / 2,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  };
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: pieArcPropsInterpolator,
    transformProps: (p) => ({
      d: arc_default().cornerRadius(p.cornerRadius)({
        padAngle: p.paddingAngle,
        innerRadius: p.innerRadius,
        outerRadius: p.outerRadius,
        startAngle: p.startAngle,
        endAngle: p.endAngle
      }),
      visibility: p.startAngle === p.endAngle ? "hidden" : "visible"
    }),
    applyProps(element, p) {
      element.setAttribute("d", p.d);
      element.setAttribute("visibility", p.visibility);
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimatePieArcLabel.js
function pieArcLabelPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolatePaddingAngle = number_default(from.paddingAngle, to.paddingAngle);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      paddingAngle: interpolatePaddingAngle(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimatePieArcLabel(props) {
  const initialProps = {
    startAngle: (props.startAngle + props.endAngle) / 2,
    endAngle: (props.startAngle + props.endAngle) / 2,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  };
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: pieArcLabelPropsInterpolator,
    transformProps: (animatedProps) => {
      const [x2, y2] = arc_default().cornerRadius(animatedProps.cornerRadius).centroid({
        padAngle: animatedProps.paddingAngle,
        startAngle: animatedProps.startAngle,
        endAngle: animatedProps.endAngle,
        innerRadius: animatedProps.innerRadius,
        outerRadius: animatedProps.outerRadius
      });
      return {
        x: x2,
        y: y2
      };
    },
    applyProps(element, {
      x: x2,
      y: y2
    }) {
      element.setAttribute("x", x2.toString());
      element.setAttribute("y", y2.toString());
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/useChartRootRef.js
function useChartRootRef() {
  const context = useChartContext();
  return context.chartRootRef;
}

// node_modules/@mui/x-charts/esm/hooks/useChartsLocalization.js
var React17 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsLocalizationProvider/ChartsLocalizationProvider.js
var React16 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/locales/utils/getChartsLocalization.js
var getChartsLocalization = (chartsTranslations) => {
  return {
    components: {
      MuiChartsLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, chartsTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-charts/esm/locales/enUS.js
var enUSLocaleText = {
  // Overlay
  loading: "Loading data…",
  noData: "No data to display"
};
var DEFAULT_LOCALE = enUSLocaleText;
var enUS = getChartsLocalization(enUSLocaleText);

// node_modules/@mui/x-charts/esm/ChartsLocalizationProvider/ChartsLocalizationProvider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var _excluded2 = ["localeText"];
var ChartsLocalizationContext = React16.createContext(null);
if (true) {
  ChartsLocalizationContext.displayName = "ChartsLocalizationContext";
}
function ChartsLocalizationProvider(inProps) {
  const {
    localeText: inLocaleText
  } = inProps, other = _objectWithoutPropertiesLoose(inProps, _excluded2);
  const {
    localeText: parentLocaleText
  } = React16.useContext(ChartsLocalizationContext) ?? {
    localeText: void 0
  };
  const props = useThemeProps({
    // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
    // We will then merge this theme value with our value manually
    props: other,
    name: "MuiChartsLocalizationProvider"
  });
  const {
    children,
    localeText: themeLocaleText
  } = props;
  const localeText = React16.useMemo(() => _extends({}, DEFAULT_LOCALE, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
  const contextValue = React16.useMemo(() => {
    return {
      localeText
    };
  }, [localeText]);
  return (0, import_jsx_runtime2.jsx)(ChartsLocalizationContext.Provider, {
    value: contextValue,
    children
  });
}
true ? ChartsLocalizationProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types.default.node,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/hooks/useChartsLocalization.js
var useChartsLocalization = () => {
  const localization = React17.useContext(ChartsLocalizationContext);
  if (localization === null) {
    throw new Error(["MUI X: Can not find the charts localization context.", "It looks like you forgot to wrap your component in ChartsLocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-charts` package"].join("\n"));
  }
  return localization;
};

// node_modules/@mui/x-charts/esm/models/seriesType/index.js
function isDefaultizedBarSeries(series) {
  return series.type === "bar";
}
function isBarSeries(series) {
  return series.type === "bar";
}

// node_modules/@mui/x-charts/esm/ChartsClipPath/ChartsClipPath.js
var React18 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function ChartsClipPath(props) {
  const {
    id,
    offset: offsetProps
  } = props;
  const {
    left,
    top,
    width,
    height
  } = useDrawingArea();
  const offset = _extends({
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }, offsetProps);
  return (0, import_jsx_runtime3.jsx)("clipPath", {
    id,
    children: (0, import_jsx_runtime3.jsx)("rect", {
      x: left - offset.left,
      y: top - offset.top,
      width: width + offset.left + offset.right,
      height: height + offset.top + offset.bottom
    })
  });
}
true ? ChartsClipPath.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  id: import_prop_types2.default.string.isRequired,
  offset: import_prop_types2.default.shape({
    bottom: import_prop_types2.default.number,
    left: import_prop_types2.default.number,
    right: import_prop_types2.default.number,
    top: import_prop_types2.default.number
  })
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
var React23 = __toESM(require_react(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
var React21 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/chartsReferenceLineClasses.js
function getReferenceLineUtilityClass(slot) {
  return generateUtilityClass("MuiChartsReferenceLine", slot);
}
var referenceLineClasses = generateUtilityClasses("MuiChartsReferenceLine", ["root", "vertical", "horizontal", "line", "label"]);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/common.js
var ReferenceLineRoot = styled_default("g")(({
  theme
}) => ({
  [`& .${referenceLineClasses.line}`]: {
    fill: "none",
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges",
    strokeWidth: 1,
    pointerEvents: "none"
  },
  [`& .${referenceLineClasses.label}`]: _extends({
    fill: (theme.vars || theme).palette.text.primary,
    stroke: "none",
    pointerEvents: "none",
    fontSize: 12
  }, theme.typography.body1)
}));

// node_modules/@mui/x-charts/esm/ChartsText/ChartsText.js
var React20 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/domUtils.js
function isSsr() {
  return typeof window === "undefined";
}
var stringCache = {
  widthCache: {},
  cacheCount: 0
};
var MAX_CACHE_NUM = 2e3;
var SPAN_STYLE = {
  position: "absolute",
  top: "-20000px",
  left: 0,
  padding: 0,
  margin: 0,
  border: "none",
  whiteSpace: "pre"
};
var STYLE_LIST = ["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height", "top", "left", "fontSize", "padding", "margin", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom"];
var MEASUREMENT_SPAN_ID = "mui_measurement_span";
function autoCompleteStyle(name, value) {
  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {
    return `${value}px`;
  }
  return value;
}
function camelToMiddleLine(text) {
  const strs = text.split("");
  const formatStrs = strs.reduce((result, entry) => {
    if (entry === entry.toUpperCase()) {
      return [...result, "-", entry.toLowerCase()];
    }
    return [...result, entry];
  }, []);
  return formatStrs.join("");
}
var getStyleString = (style) => Object.keys(style).sort().reduce((result, s2) => `${result}${camelToMiddleLine(s2)}:${autoCompleteStyle(s2, style[s2])};`, "");
var domCleanTimeout;
var getStringSize = (text, style = {}) => {
  if (text === void 0 || text === null || isSsr()) {
    return {
      width: 0,
      height: 0
    };
  }
  const str = `${text}`;
  const styleString = getStyleString(style);
  const cacheKey = `${str}-${styleString}`;
  if (stringCache.widthCache[cacheKey]) {
    return stringCache.widthCache[cacheKey];
  }
  try {
    let measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
    if (measurementSpan === null) {
      measurementSpan = document.createElement("span");
      measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
      measurementSpan.setAttribute("aria-hidden", "true");
      document.body.appendChild(measurementSpan);
    }
    const measurementSpanStyle = _extends({}, SPAN_STYLE, style);
    Object.keys(measurementSpanStyle).map((styleKey) => {
      measurementSpan.style[camelToMiddleLine(styleKey)] = autoCompleteStyle(styleKey, measurementSpanStyle[styleKey]);
      return styleKey;
    });
    measurementSpan.textContent = str;
    const rect = measurementSpan.getBoundingClientRect();
    const result = {
      width: rect.width,
      height: rect.height
    };
    stringCache.widthCache[cacheKey] = result;
    if (stringCache.cacheCount + 1 > MAX_CACHE_NUM) {
      stringCache.cacheCount = 0;
      stringCache.widthCache = {};
    } else {
      stringCache.cacheCount += 1;
    }
    if (false) {
      measurementSpan.textContent = "";
    } else {
      if (domCleanTimeout) {
        clearTimeout(domCleanTimeout);
      }
      domCleanTimeout = setTimeout(() => {
        measurementSpan.textContent = "";
      }, 0);
    }
    return result;
  } catch {
    return {
      width: 0,
      height: 0
    };
  }
};

// node_modules/@mui/x-charts/esm/internals/getWordsByLines.js
function getWordsByLines({
  style,
  needsComputation,
  text
}) {
  return text.split("\n").map((subText) => _extends({
    text: subText
  }, needsComputation ? getStringSize(subText, style) : {
    width: 0,
    height: 0
  }));
}

// node_modules/@mui/x-charts/esm/hooks/useIsHydrated.js
var React19 = __toESM(require_react(), 1);
function useIsHydrated() {
  const [isHydrated, setIsHydrated] = React19.useState(typeof window !== "undefined" || false);
  React19.useEffect(() => {
    setIsHydrated(true);
  }, []);
  return isHydrated;
}

// node_modules/@mui/x-charts/esm/ChartsText/ChartsText.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var _excluded3 = ["x", "y", "style", "text", "ownerState"];
var _excluded22 = ["angle", "textAnchor", "dominantBaseline"];
function ChartsText(props) {
  const {
    x: x2,
    y: y2,
    style: styleProps,
    text
  } = props, textProps = _objectWithoutPropertiesLoose(props, _excluded3);
  const _ref = styleProps ?? {}, {
    angle,
    textAnchor,
    dominantBaseline
  } = _ref, style = _objectWithoutPropertiesLoose(_ref, _excluded22);
  const isHydrated = useIsHydrated();
  const wordsByLines = React20.useMemo(() => getWordsByLines({
    style,
    needsComputation: isHydrated && text.includes("\n"),
    text
  }), [style, text, isHydrated]);
  let startDy;
  switch (dominantBaseline) {
    case "hanging":
    case "text-before-edge":
      startDy = 0;
      break;
    case "central":
      startDy = (wordsByLines.length - 1) / 2 * -wordsByLines[0].height;
      break;
    default:
      startDy = (wordsByLines.length - 1) * -wordsByLines[0].height;
      break;
  }
  return (0, import_jsx_runtime4.jsx)("text", _extends({}, textProps, {
    transform: angle ? `rotate(${angle}, ${x2}, ${y2})` : void 0,
    x: x2,
    y: y2,
    textAnchor,
    dominantBaseline,
    style,
    children: wordsByLines.map((line, index2) => (0, import_jsx_runtime4.jsx)("tspan", {
      x: x2,
      dy: `${index2 === 0 ? startDy : wordsByLines[0].height}px`,
      dominantBaseline,
      children: line.text
    }, index2))
  }));
}
true ? ChartsText.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Height of a text line (in `em`).
   */
  lineHeight: import_prop_types3.default.number,
  /**
   * If `true`, the line width is computed.
   * @default false
   */
  needsComputation: import_prop_types3.default.bool,
  ownerState: import_prop_types3.default.any,
  /**
   * Style applied to text elements.
   */
  style: import_prop_types3.default.object,
  /**
   * Text displayed.
   */
  text: import_prop_types3.default.string.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var getTextParams = ({
  top,
  height,
  spacingY,
  labelAlign = "middle"
}) => {
  switch (labelAlign) {
    case "start":
      return {
        y: top + spacingY,
        style: {
          dominantBaseline: "hanging",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        y: top + height - spacingY,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    default:
      return {
        y: top + height / 2,
        style: {
          dominantBaseline: "central",
          textAnchor: "start"
        }
      };
  }
};
function getXReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "vertical"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsXReferenceLine(props) {
  const {
    x: x2,
    label = "",
    spacing = 5,
    classes: inClasses,
    labelAlign,
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    top,
    height
  } = useDrawingArea();
  const xAxisScale = useXScale(axisId);
  const xPosition = xAxisScale(x2);
  if (xPosition === void 0) {
    if (true) {
      warnOnce(`MUI X: the value ${x2} does not exist in the data of x axis with id ${axisId}.`, "error");
    }
    return null;
  }
  const d = `M ${xPosition} ${top} l 0 ${height}`;
  const classes = getXReferenceLineClasses(inClasses);
  const spacingX = typeof spacing === "object" ? spacing.x ?? 0 : spacing;
  const spacingY = typeof spacing === "object" ? spacing.y ?? 0 : spacing;
  const textParams = _extends({
    x: xPosition + spacingX,
    text: label,
    fontSize: 12
  }, getTextParams({
    top,
    height,
    spacingY,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime5.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime5.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime5.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsYReferenceLine.js
var React22 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var getTextParams2 = ({
  left,
  width,
  spacingX,
  labelAlign = "middle"
}) => {
  switch (labelAlign) {
    case "start":
      return {
        x: left + spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        x: left + width - spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "end"
        }
      };
    default:
      return {
        x: left + width / 2,
        style: {
          dominantBaseline: "auto",
          textAnchor: "middle"
        }
      };
  }
};
function getYReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "horizontal"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsYReferenceLine(props) {
  const {
    y: y2,
    label = "",
    spacing = 5,
    classes: inClasses,
    labelAlign,
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    left,
    width
  } = useDrawingArea();
  const yAxisScale = useYScale(axisId);
  const yPosition = yAxisScale(y2);
  if (yPosition === void 0) {
    if (true) {
      warnOnce(`MUI X: the value ${y2} does not exist in the data of y axis with id ${axisId}.`, "error");
    }
    return null;
  }
  const d = `M ${left} ${yPosition} l ${width} 0`;
  const classes = getYReferenceLineClasses(inClasses);
  const spacingX = typeof spacing === "object" ? spacing.x ?? 0 : spacing;
  const spacingY = typeof spacing === "object" ? spacing.y ?? 0 : spacing;
  const textParams = _extends({
    y: yPosition - spacingY,
    text: label,
    fontSize: 12
  }, getTextParams2({
    left,
    width,
    spacingX,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime6.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime6.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime6.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function ChartsReferenceLine(props) {
  const {
    x: x2,
    y: y2
  } = props;
  if (x2 !== void 0 && y2 !== void 0) {
    throw new Error("MUI X: The ChartsReferenceLine cannot have both `x` and `y` props set.");
  }
  if (x2 === void 0 && y2 === void 0) {
    throw new Error("MUI X: The ChartsReferenceLine should have a value in `x` or `y` prop.");
  }
  if (x2 !== void 0) {
    return (0, import_jsx_runtime7.jsx)(ChartsXReferenceLine, _extends({}, props));
  }
  return (0, import_jsx_runtime7.jsx)(ChartsYReferenceLine, _extends({}, props));
}
true ? ChartsReferenceLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the axis used for the reference value.
   * @default The `id` of the first defined axis.
   */
  axisId: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types4.default.object,
  /**
   * The label to display along the reference line.
   */
  label: import_prop_types4.default.string,
  /**
   * The alignment if the label is in the chart drawing area.
   * @default 'middle'
   */
  labelAlign: import_prop_types4.default.oneOf(["end", "middle", "start"]),
  /**
   * The style applied to the label.
   */
  labelStyle: import_prop_types4.default.object,
  /**
   * The style applied to the line.
   */
  lineStyle: import_prop_types4.default.object,
  /**
   * Additional space around the label in px.
   * Can be a number or an object `{ x, y }` to distinguish space with the reference line and space with axes.
   * @default 5
   */
  spacing: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.shape({
    x: import_prop_types4.default.number,
    y: import_prop_types4.default.number
  })]),
  /**
   * The x value associated with the reference line.
   * If defined the reference line will be vertical.
   */
  x: import_prop_types4.default.oneOfType([import_prop_types4.default.instanceOf(Date), import_prop_types4.default.number, import_prop_types4.default.string]),
  /**
   * The y value associated with the reference line.
   * If defined the reference line will be horizontal.
   */
  y: import_prop_types4.default.oneOfType([import_prop_types4.default.instanceOf(Date), import_prop_types4.default.number, import_prop_types4.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsAxis/ChartsAxis.js
var React27 = __toESM(require_react(), 1);
var import_prop_types7 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsXAxis/ChartsXAxis.js
var React25 = __toESM(require_react(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/clampAngle.js
function clampAngle(angle) {
  return (angle % 360 + 360) % 360;
}
var TWO_PI = 2 * Math.PI;
function clampAngleRad(angle) {
  return (angle % TWO_PI + TWO_PI) % TWO_PI;
}

// node_modules/@mui/x-charts/esm/internals/getGraphemeCount.js
var segmenter = typeof window !== "undefined" && "Intl" in window && "Segmenter" in Intl ? new Intl.Segmenter(void 0, {
  granularity: "grapheme"
}) : null;
function getGraphemeCountFallback(text) {
  return text.length;
}
function getGraphemeCountModern(text) {
  const segments = segmenter.segment(text);
  let count2 = 0;
  for (const _unused of segments) {
    count2 += 1;
  }
  return count2;
}
var getGraphemeCount = segmenter ? getGraphemeCountModern : getGraphemeCountFallback;

// node_modules/@mui/x-charts/esm/internals/degToRad.js
function degToRad(degrees3) {
  return degrees3 * (Math.PI / 180);
}

// node_modules/@mui/x-charts/esm/internals/sliceUntil.js
var segmenter2 = typeof window !== "undefined" && "Intl" in window && "Segmenter" in Intl ? new Intl.Segmenter(void 0, {
  granularity: "grapheme"
}) : null;
function sliceUntilFallback(text, endIndex) {
  return text.slice(0, endIndex);
}
function sliceUntilModern(text, endIndex) {
  const segments = segmenter2.segment(text);
  let newText = "";
  let i = 0;
  for (const segment of segments) {
    newText += segment.segment;
    i += 1;
    if (i >= endIndex) {
      break;
    }
  }
  return newText;
}
var sliceUntil = segmenter2 ? sliceUntilModern : sliceUntilFallback;

// node_modules/@mui/x-charts/esm/internals/ellipsize.js
var ELLIPSIS = "…";
function doesTextFitInRect(text, config) {
  const {
    width,
    height,
    measureText
  } = config;
  const angle = degToRad(config.angle);
  const textSize = measureText(text);
  const angledWidth = Math.abs(textSize.width * Math.cos(angle)) + Math.abs(textSize.height * Math.sin(angle));
  const angledHeight = Math.abs(textSize.width * Math.sin(angle)) + Math.abs(textSize.height * Math.cos(angle));
  return angledWidth <= width && angledHeight <= height;
}
function ellipsize(text, doesTextFit) {
  if (doesTextFit(text)) {
    return text;
  }
  let shortenedText = text;
  let step = 1;
  let by = 1 / 2;
  const graphemeCount = getGraphemeCount(text);
  let newLength = graphemeCount;
  let lastLength = graphemeCount;
  let longestFittingText = null;
  do {
    lastLength = newLength;
    newLength = Math.floor(graphemeCount * by);
    if (newLength === 0) {
      break;
    }
    shortenedText = sliceUntil(text, newLength).trim();
    const fits = doesTextFit(shortenedText + ELLIPSIS);
    step += 1;
    if (fits) {
      longestFittingText = shortenedText;
      by += 1 / 2 ** step;
    } else {
      by -= 1 / 2 ** step;
    }
  } while (Math.abs(newLength - lastLength) !== 1);
  return longestFittingText ? longestFittingText + ELLIPSIS : "";
}

// node_modules/@mui/x-charts/esm/ChartsAxis/axisClasses.js
function getAxisUtilityClass(slot) {
  return generateUtilityClass("MuiChartsAxis", slot);
}
var axisClasses = generateUtilityClasses("MuiChartsAxis", ["root", "line", "tickContainer", "tick", "tickLabel", "label", "directionX", "directionY", "top", "bottom", "left", "right"]);

// node_modules/@mui/x-charts/esm/internals/components/AxisSharedComponents.js
var AxisRoot = styled_default("g", {
  name: "MuiChartsAxis",
  slot: "Root"
})(({
  theme
}) => ({
  [`& .${axisClasses.tickLabel}`]: _extends({}, theme.typography.caption, {
    fill: (theme.vars || theme).palette.text.primary
  }),
  [`& .${axisClasses.label}`]: {
    fill: (theme.vars || theme).palette.text.primary
  },
  [`& .${axisClasses.line}`]: {
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges",
    strokeWidth: 1
  },
  [`& .${axisClasses.tick}`]: {
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges"
  }
}));

// node_modules/@mui/x-charts/esm/internals/geometry.js
var ANGLE_APPROX = 5;
function getMinXTranslation(width, height, angle = 0) {
  if (true) {
    if (angle > 90 && angle < -90) {
      warnOnce([`MUI X: It seems you applied an angle larger than 90° or smaller than -90° to an axis text.`, `This could cause some text overlapping.`, `If you encounter a use case where it's needed, please open an issue.`]);
    }
  }
  const standardAngle = Math.min(Math.abs(angle) % 180, Math.abs(Math.abs(angle) % 180 - 180) % 180);
  if (standardAngle < ANGLE_APPROX) {
    return width;
  }
  if (standardAngle > 90 - ANGLE_APPROX) {
    return height;
  }
  const radAngle = deg2rad(standardAngle);
  const angleSwich = Math.atan2(height, width);
  if (radAngle < angleSwich) {
    return width / Math.cos(radAngle);
  }
  return height / Math.sin(radAngle);
}

// node_modules/@mui/x-charts/esm/hooks/useMounted.js
var React24 = __toESM(require_react(), 1);
function useMounted(defer = false) {
  const [mountedState, setMountedState] = React24.useState(false);
  useEnhancedEffect_default(() => {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  React24.useEffect(() => {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  return mountedState;
}

// node_modules/@mui/x-charts/esm/ChartsText/defaultTextPlacement.js
function getDefaultTextAnchor(angle) {
  const adjustedAngle = clampAngle(angle);
  if (adjustedAngle <= 30 || adjustedAngle >= 330) {
    return "middle";
  }
  if (adjustedAngle <= 210 && adjustedAngle >= 150) {
    return "middle";
  }
  if (adjustedAngle <= 180) {
    return "end";
  }
  return "start";
}
function getDefaultBaseline(angle) {
  const adjustedAngle = clampAngle(angle);
  if (adjustedAngle <= 30 || adjustedAngle >= 330) {
    return "hanging";
  }
  if (adjustedAngle <= 210 && adjustedAngle >= 150) {
    return "auto";
  }
  return "central";
}

// node_modules/@mui/x-charts/esm/internals/invertTextAnchor.js
function invertTextAnchor(textAnchor) {
  switch (textAnchor) {
    case "start":
      return "end";
    case "end":
      return "start";
    default:
      return textAnchor;
  }
}

// node_modules/@mui/x-charts/esm/ChartsXAxis/ChartsXAxis.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var _excluded4 = ["scale", "tickNumber", "reverse"];
var useUtilityClasses = (ownerState) => {
  const {
    classes,
    position
  } = ownerState;
  const slots = {
    root: ["root", "directionX", position],
    line: ["line"],
    tickContainer: ["tickContainer"],
    tick: ["tick"],
    tickLabel: ["tickLabel"],
    label: ["label"]
  };
  return composeClasses(slots, getAxisUtilityClass, classes);
};
var TICK_LABEL_GAP = 3;
var AXIS_LABEL_TICK_LABEL_GAP = 4;
function getVisibleLabels(xTicks, {
  tickLabelStyle: style,
  tickLabelInterval,
  tickLabelMinGap,
  reverse: reverse2,
  isMounted,
  isPointInside
}) {
  const getTickLabelSize = (tick) => {
    if (!isMounted || tick.formattedValue === void 0) {
      return {
        width: 0,
        height: 0
      };
    }
    const tickSizes = getWordsByLines({
      style,
      needsComputation: true,
      text: tick.formattedValue
    });
    return {
      width: Math.max(...tickSizes.map((size) => size.width)),
      height: Math.max(tickSizes.length * tickSizes[0].height)
    };
  };
  if (typeof tickLabelInterval === "function") {
    return new Set(xTicks.filter((item, index2) => tickLabelInterval(item.value, index2)));
  }
  let previousTextLimit = 0;
  const direction = reverse2 ? -1 : 1;
  return new Set(xTicks.filter((item, labelIndex) => {
    const {
      offset,
      labelOffset
    } = item;
    const textPosition = offset + labelOffset;
    if (labelIndex > 0 && direction * textPosition < direction * (previousTextLimit + tickLabelMinGap)) {
      return false;
    }
    if (!isPointInside(textPosition)) {
      return false;
    }
    const {
      width,
      height
    } = getTickLabelSize(item);
    const distance = getMinXTranslation(width, height, style == null ? void 0 : style.angle);
    const currentTextLimit = textPosition - direction * distance / 2;
    if (labelIndex > 0 && direction * currentTextLimit < direction * (previousTextLimit + tickLabelMinGap)) {
      return false;
    }
    previousTextLimit = textPosition + direction * distance / 2;
    return true;
  }));
}
function shortenLabels(visibleLabels, drawingArea, maxHeight, isRtl, tickLabelStyle) {
  const shortenedLabels = /* @__PURE__ */ new Map();
  const angle = clampAngle((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0);
  let leftBoundFactor = 1;
  let rightBoundFactor = 1;
  if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "start") {
    leftBoundFactor = Infinity;
    rightBoundFactor = 1;
  } else if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "end") {
    leftBoundFactor = 1;
    rightBoundFactor = Infinity;
  } else {
    leftBoundFactor = 2;
    rightBoundFactor = 2;
  }
  if (angle > 90 && angle < 270) {
    [leftBoundFactor, rightBoundFactor] = [rightBoundFactor, leftBoundFactor];
  }
  if (isRtl) {
    [leftBoundFactor, rightBoundFactor] = [rightBoundFactor, leftBoundFactor];
  }
  for (const item of visibleLabels) {
    if (item.formattedValue) {
      const width = Math.min((item.offset + item.labelOffset) * leftBoundFactor, (drawingArea.left + drawingArea.width + drawingArea.right - item.offset - item.labelOffset) * rightBoundFactor);
      const doesTextFit = (text) => doesTextFitInRect(text, {
        width,
        height: maxHeight,
        angle,
        measureText: (string) => getStringSize(string, tickLabelStyle)
      });
      shortenedLabels.set(item, ellipsize(item.formattedValue.toString(), doesTextFit));
    }
  }
  return shortenedLabels;
}
var XAxisRoot = styled_default(AxisRoot, {
  name: "MuiChartsXAxis",
  slot: "Root"
})({});
var defaultProps = {
  disableLine: false,
  disableTicks: false,
  tickSize: 6,
  tickLabelMinGap: 4
};
function ChartsXAxis(inProps) {
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const _xAxis = xAxis[inProps.axisId ?? xAxisIds[0]], {
    scale: xScale,
    tickNumber,
    reverse: reverse2
  } = _xAxis, settings = _objectWithoutPropertiesLoose(_xAxis, _excluded4);
  const isMounted = useMounted();
  const themedProps = useThemeProps({
    props: _extends({}, settings, inProps),
    name: "MuiChartsXAxis"
  });
  const defaultizedProps = _extends({}, defaultProps, themedProps);
  const {
    position,
    disableLine,
    disableTicks,
    tickLabelStyle,
    label,
    labelStyle,
    tickSize: tickSizeProp,
    valueFormatter,
    slots,
    slotProps,
    tickInterval,
    tickLabelInterval,
    tickPlacement,
    tickLabelPlacement,
    tickLabelMinGap,
    sx,
    offset,
    height: axisHeight
  } = defaultizedProps;
  const theme = useTheme();
  const isRtl = useRtl();
  const classes = useUtilityClasses(defaultizedProps);
  const drawingArea = useDrawingArea();
  const {
    left,
    top,
    width,
    height
  } = drawingArea;
  const {
    instance
  } = useChartContext();
  const isHydrated = useIsHydrated();
  const tickSize = disableTicks ? 4 : tickSizeProp;
  const positionSign = position === "bottom" ? 1 : -1;
  const Line = (slots == null ? void 0 : slots.axisLine) ?? "line";
  const Tick = (slots == null ? void 0 : slots.axisTick) ?? "line";
  const TickLabel = (slots == null ? void 0 : slots.axisTickLabel) ?? ChartsText;
  const Label = (slots == null ? void 0 : slots.axisLabel) ?? ChartsText;
  const defaultTextAnchor = getDefaultTextAnchor((position === "bottom" ? 0 : 180) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const defaultDominantBaseline = getDefaultBaseline((position === "bottom" ? 0 : 180) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const axisTickLabelProps = useSlotProps_default({
    elementType: TickLabel,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisTickLabel,
    additionalProps: {
      style: _extends({}, theme.typography.caption, {
        fontSize: 12,
        lineHeight: 1.25,
        textAnchor: isRtl ? invertTextAnchor(defaultTextAnchor) : defaultTextAnchor,
        dominantBaseline: defaultDominantBaseline
      }, tickLabelStyle)
    },
    className: classes.tickLabel,
    ownerState: {}
  });
  const xTicks = useTicks({
    scale: xScale,
    tickNumber,
    valueFormatter,
    tickInterval,
    tickPlacement,
    tickLabelPlacement
  });
  const visibleLabels = getVisibleLabels(xTicks, {
    tickLabelStyle: axisTickLabelProps.style,
    tickLabelInterval,
    tickLabelMinGap,
    reverse: reverse2,
    isMounted,
    isPointInside: (x2) => instance.isPointInside({
      x: x2,
      y: -1
    }, {
      direction: "x"
    })
  });
  const axisLabelProps = useSlotProps_default({
    elementType: Label,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisLabel,
    additionalProps: {
      style: _extends({}, theme.typography.body1, {
        lineHeight: 1,
        fontSize: 14,
        textAnchor: "middle",
        dominantBaseline: position === "bottom" ? "text-after-edge" : "text-before-edge"
      }, labelStyle)
    },
    ownerState: {}
  });
  const domain = xScale.domain();
  const ordinalAxis = isBandScale(xScale);
  if (ordinalAxis && domain.length === 0 || !ordinalAxis && domain.some(isInfinity) || position === "none") {
    return null;
  }
  const labelHeight = label ? getStringSize(label, axisLabelProps.style).height : 0;
  const labelRefPoint = {
    x: left + width / 2,
    y: positionSign * axisHeight
  };
  const tickLabelsMaxHeight = Math.max(0, axisHeight - (label ? labelHeight + AXIS_LABEL_TICK_LABEL_GAP : 0) - tickSize - TICK_LABEL_GAP);
  const tickLabels = isHydrated ? shortenLabels(visibleLabels, drawingArea, tickLabelsMaxHeight, isRtl, axisTickLabelProps.style) : new Map(Array.from(visibleLabels).map((item) => [item, item.formattedValue]));
  return (0, import_jsx_runtime8.jsxs)(XAxisRoot, {
    transform: `translate(0, ${position === "bottom" ? top + height + offset : top - offset})`,
    className: classes.root,
    sx,
    children: [!disableLine && (0, import_jsx_runtime8.jsx)(Line, _extends({
      x1: left,
      x2: left + width,
      className: classes.line
    }, slotProps == null ? void 0 : slotProps.axisLine)), xTicks.map((item, index2) => {
      const {
        offset: tickOffset,
        labelOffset
      } = item;
      const xTickLabel = labelOffset ?? 0;
      const yTickLabel = positionSign * (tickSize + TICK_LABEL_GAP);
      const showTick = instance.isPointInside({
        x: tickOffset,
        y: -1
      }, {
        direction: "x"
      });
      const tickLabel = tickLabels.get(item);
      const showTickLabel = visibleLabels.has(item);
      return (0, import_jsx_runtime8.jsxs)("g", {
        transform: `translate(${tickOffset}, 0)`,
        className: classes.tickContainer,
        children: [!disableTicks && showTick && (0, import_jsx_runtime8.jsx)(Tick, _extends({
          y2: positionSign * tickSize,
          className: classes.tick
        }, slotProps == null ? void 0 : slotProps.axisTick)), tickLabel !== void 0 && showTickLabel && (0, import_jsx_runtime8.jsx)(TickLabel, _extends({
          x: xTickLabel,
          y: yTickLabel
        }, axisTickLabelProps, {
          text: tickLabel
        }))]
      }, index2);
    }), label && (0, import_jsx_runtime8.jsx)("g", {
      className: classes.label,
      children: (0, import_jsx_runtime8.jsx)(Label, _extends({}, labelRefPoint, axisLabelProps, {
        text: label
      }))
    })]
  });
}
true ? ChartsXAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  axis: import_prop_types5.default.oneOf(["x"]),
  /**
   * The id of the axis to render.
   * If undefined, it will be the first defined axis.
   */
  axisId: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types5.default.object,
  /**
   * If true, the axis line is disabled.
   * @default false
   */
  disableLine: import_prop_types5.default.bool,
  /**
   * If true, the ticks are disabled.
   * @default false
   */
  disableTicks: import_prop_types5.default.bool,
  /**
   * The fill color of the axis text.
   * @default 'currentColor'
   */
  fill: import_prop_types5.default.string,
  /**
   * The label of the axis.
   */
  label: import_prop_types5.default.string,
  /**
   * The style applied to the axis label.
   */
  labelStyle: import_prop_types5.default.object,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types5.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types5.default.object,
  /**
   * The stroke color of the axis line.
   * @default 'currentColor'
   */
  stroke: import_prop_types5.default.string,
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  /**
   * Defines which ticks are displayed.
   * Its value can be:
   * - 'auto' In such case the ticks are computed based on axis scale and other parameters.
   * - a filtering function of the form `(value, index) => boolean` which is available only if the axis has "point" scale.
   * - an array containing the values where ticks should be displayed.
   * @see See {@link https://mui.com/x/react-charts/axis/#fixed-tick-positions}
   * @default 'auto'
   */
  tickInterval: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["auto"]), import_prop_types5.default.array, import_prop_types5.default.func]),
  /**
   * Defines which ticks get its label displayed. Its value can be:
   * - 'auto' In such case, labels are displayed if they do not overlap with the previous one.
   * - a filtering function of the form (value, index) => boolean. Warning: the index is tick index, not data ones.
   * @default 'auto'
   */
  tickLabelInterval: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["auto"]), import_prop_types5.default.func]),
  /**
   * The minimum gap in pixels between two tick labels.
   * If two tick labels are closer than this minimum gap, one of them will be hidden.
   * @default 4
   */
  tickLabelMinGap: import_prop_types5.default.number,
  /**
   * The placement of ticks label. Can be the middle of the band, or the tick position.
   * Only used if scale is 'band'.
   * @default 'middle'
   */
  tickLabelPlacement: import_prop_types5.default.oneOf(["middle", "tick"]),
  /**
   * The style applied to ticks text.
   */
  tickLabelStyle: import_prop_types5.default.object,
  /**
   * Maximal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMaxStep: import_prop_types5.default.number,
  /**
   * Minimal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMinStep: import_prop_types5.default.number,
  /**
   * The number of ticks. This number is not guaranteed.
   * Not supported by categorical axis (band, points).
   */
  tickNumber: import_prop_types5.default.number,
  /**
   * The placement of ticks in regard to the band interval.
   * Only used if scale is 'band'.
   * @default 'extremities'
   */
  tickPlacement: import_prop_types5.default.oneOf(["end", "extremities", "middle", "start"]),
  /**
   * The size of the ticks.
   * @default 6
   */
  tickSize: import_prop_types5.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsYAxis/ChartsYAxis.js
var React26 = __toESM(require_react(), 1);
var import_prop_types6 = __toESM(require_prop_types(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var _excluded5 = ["scale", "tickNumber"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes,
    position
  } = ownerState;
  const slots = {
    root: ["root", "directionY", position],
    line: ["line"],
    tickContainer: ["tickContainer"],
    tick: ["tick"],
    tickLabel: ["tickLabel"],
    label: ["label"]
  };
  return composeClasses(slots, getAxisUtilityClass, classes);
};
var TICK_LABEL_GAP2 = 2;
var AXIS_LABEL_TICK_LABEL_GAP2 = 2;
function shortenLabels2(visibleLabels, drawingArea, maxWidth, isRtl, tickLabelStyle) {
  const shortenedLabels = /* @__PURE__ */ new Map();
  const angle = clampAngle((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0);
  let topBoundFactor = 1;
  let bottomBoundFactor = 1;
  if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "start") {
    topBoundFactor = Infinity;
    bottomBoundFactor = 1;
  } else if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "end") {
    topBoundFactor = 1;
    bottomBoundFactor = Infinity;
  } else {
    topBoundFactor = 2;
    bottomBoundFactor = 2;
  }
  if (angle > 180) {
    [topBoundFactor, bottomBoundFactor] = [bottomBoundFactor, topBoundFactor];
  }
  if (isRtl) {
    [topBoundFactor, bottomBoundFactor] = [bottomBoundFactor, topBoundFactor];
  }
  for (const item of visibleLabels) {
    if (item.formattedValue) {
      const height = Math.min((item.offset + item.labelOffset) * topBoundFactor, (drawingArea.top + drawingArea.height + drawingArea.bottom - item.offset - item.labelOffset) * bottomBoundFactor);
      const doesTextFit = (text) => doesTextFitInRect(text, {
        width: maxWidth,
        height,
        angle,
        measureText: (string) => getStringSize(string, tickLabelStyle)
      });
      shortenedLabels.set(item, ellipsize(item.formattedValue.toString(), doesTextFit));
    }
  }
  return shortenedLabels;
}
var YAxisRoot = styled_default(AxisRoot, {
  name: "MuiChartsYAxis",
  slot: "Root"
})({});
var defaultProps2 = {
  disableLine: false,
  disableTicks: false,
  tickSize: 6
};
function ChartsYAxis(inProps) {
  const {
    yAxisIds,
    yAxis
  } = useYAxes();
  const _yAxis = yAxis[inProps.axisId ?? yAxisIds[0]], {
    scale: yScale,
    tickNumber
  } = _yAxis, settings = _objectWithoutPropertiesLoose(_yAxis, _excluded5);
  const themedProps = useThemeProps({
    props: _extends({}, settings, inProps),
    name: "MuiChartsYAxis"
  });
  const defaultizedProps = _extends({}, defaultProps2, themedProps);
  const {
    position,
    disableLine,
    disableTicks,
    label,
    labelStyle,
    tickLabelStyle,
    tickSize: tickSizeProp,
    valueFormatter,
    slots,
    slotProps,
    tickPlacement,
    tickLabelPlacement,
    tickInterval,
    tickLabelInterval,
    sx,
    offset,
    width: axisWidth
  } = defaultizedProps;
  const theme = useTheme();
  const isRtl = useRtl();
  const isHydrated = useIsHydrated();
  const classes = useUtilityClasses2(defaultizedProps);
  const {
    instance
  } = useChartContext();
  const drawingArea = useDrawingArea();
  const {
    left,
    top,
    width,
    height
  } = drawingArea;
  const tickSize = disableTicks ? 4 : tickSizeProp;
  const yTicks = useTicks({
    scale: yScale,
    tickNumber,
    valueFormatter,
    tickPlacement,
    tickLabelPlacement,
    tickInterval
  });
  const positionSign = position === "right" ? 1 : -1;
  const tickFontSize = typeof (tickLabelStyle == null ? void 0 : tickLabelStyle.fontSize) === "number" ? tickLabelStyle.fontSize : 12;
  const Line = (slots == null ? void 0 : slots.axisLine) ?? "line";
  const Tick = (slots == null ? void 0 : slots.axisTick) ?? "line";
  const TickLabel = (slots == null ? void 0 : slots.axisTickLabel) ?? ChartsText;
  const Label = (slots == null ? void 0 : slots.axisLabel) ?? ChartsText;
  const defaultTextAnchor = getDefaultTextAnchor((position === "right" ? -90 : 90) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const defaultDominantBaseline = getDefaultBaseline((position === "right" ? -90 : 90) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const axisTickLabelProps = useSlotProps_default({
    elementType: TickLabel,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisTickLabel,
    additionalProps: {
      style: _extends({}, theme.typography.caption, {
        fontSize: tickFontSize,
        textAnchor: isRtl ? invertTextAnchor(defaultTextAnchor) : defaultTextAnchor,
        dominantBaseline: defaultDominantBaseline
      }, tickLabelStyle)
    },
    className: classes.tickLabel,
    ownerState: {}
  });
  const axisLabelProps = useSlotProps_default({
    elementType: Label,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisLabel,
    additionalProps: {
      style: _extends({}, theme.typography.body1, {
        lineHeight: 1,
        fontSize: 14,
        angle: positionSign * 90,
        textAnchor: "middle",
        dominantBaseline: "text-before-edge"
      }, labelStyle)
    },
    ownerState: {}
  });
  const lineSlotProps = useSlotProps_default({
    elementType: Line,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisLine,
    additionalProps: {
      strokeLinecap: "square"
    },
    ownerState: {}
  });
  const domain = yScale.domain();
  const ordinalAxis = isBandScale(yScale);
  if (ordinalAxis && domain.length === 0 || !ordinalAxis && domain.some(isInfinity) || position === "none") {
    return null;
  }
  const labelRefPoint = {
    x: positionSign * axisWidth,
    y: top + height / 2
  };
  const tickLabelsMaxWidth = Math.max(0, axisWidth - (label ? getStringSize(label, axisLabelProps.style).height + AXIS_LABEL_TICK_LABEL_GAP2 : 0) - tickSize - TICK_LABEL_GAP2);
  const tickLabels = isHydrated ? shortenLabels2(yTicks, drawingArea, tickLabelsMaxWidth, isRtl, axisTickLabelProps.style) : new Map(Array.from(yTicks).map((item) => [item, item.formattedValue]));
  return (0, import_jsx_runtime9.jsxs)(YAxisRoot, {
    transform: `translate(${position === "right" ? left + width + offset : left - offset}, 0)`,
    className: classes.root,
    sx,
    children: [!disableLine && (0, import_jsx_runtime9.jsx)(Line, _extends({
      y1: top,
      y2: top + height,
      className: classes.line
    }, lineSlotProps)), yTicks.map((item, index2) => {
      const {
        offset: tickOffset,
        labelOffset,
        value
      } = item;
      const xTickLabel = positionSign * (tickSize + TICK_LABEL_GAP2);
      const yTickLabel = labelOffset;
      const skipLabel = typeof tickLabelInterval === "function" && !(tickLabelInterval == null ? void 0 : tickLabelInterval(value, index2));
      const showLabel = instance.isPointInside({
        x: -1,
        y: tickOffset
      }, {
        direction: "y"
      });
      const tickLabel = tickLabels.get(item);
      if (!showLabel) {
        return null;
      }
      return (0, import_jsx_runtime9.jsxs)("g", {
        transform: `translate(0, ${tickOffset})`,
        className: classes.tickContainer,
        children: [!disableTicks && (0, import_jsx_runtime9.jsx)(Tick, _extends({
          x2: positionSign * tickSize,
          className: classes.tick
        }, slotProps == null ? void 0 : slotProps.axisTick)), tickLabel !== void 0 && !skipLabel && (0, import_jsx_runtime9.jsx)(TickLabel, _extends({
          x: xTickLabel,
          y: yTickLabel,
          text: tickLabel
        }, axisTickLabelProps))]
      }, index2);
    }), label && isHydrated && (0, import_jsx_runtime9.jsx)("g", {
      className: classes.label,
      children: (0, import_jsx_runtime9.jsx)(Label, _extends({}, labelRefPoint, axisLabelProps, {
        text: label
      }))
    })]
  });
}
true ? ChartsYAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  axis: import_prop_types6.default.oneOf(["y"]),
  /**
   * The id of the axis to render.
   * If undefined, it will be the first defined axis.
   */
  axisId: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types6.default.object,
  /**
   * If true, the axis line is disabled.
   * @default false
   */
  disableLine: import_prop_types6.default.bool,
  /**
   * If true, the ticks are disabled.
   * @default false
   */
  disableTicks: import_prop_types6.default.bool,
  /**
   * The fill color of the axis text.
   * @default 'currentColor'
   */
  fill: import_prop_types6.default.string,
  /**
   * The label of the axis.
   */
  label: import_prop_types6.default.string,
  /**
   * The style applied to the axis label.
   */
  labelStyle: import_prop_types6.default.object,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types6.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types6.default.object,
  /**
   * The stroke color of the axis line.
   * @default 'currentColor'
   */
  stroke: import_prop_types6.default.string,
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
  /**
   * Defines which ticks are displayed.
   * Its value can be:
   * - 'auto' In such case the ticks are computed based on axis scale and other parameters.
   * - a filtering function of the form `(value, index) => boolean` which is available only if the axis has "point" scale.
   * - an array containing the values where ticks should be displayed.
   * @see See {@link https://mui.com/x/react-charts/axis/#fixed-tick-positions}
   * @default 'auto'
   */
  tickInterval: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["auto"]), import_prop_types6.default.array, import_prop_types6.default.func]),
  /**
   * Defines which ticks get its label displayed. Its value can be:
   * - 'auto' In such case, labels are displayed if they do not overlap with the previous one.
   * - a filtering function of the form (value, index) => boolean. Warning: the index is tick index, not data ones.
   * @default 'auto'
   */
  tickLabelInterval: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["auto"]), import_prop_types6.default.func]),
  /**
   * The placement of ticks label. Can be the middle of the band, or the tick position.
   * Only used if scale is 'band'.
   * @default 'middle'
   */
  tickLabelPlacement: import_prop_types6.default.oneOf(["middle", "tick"]),
  /**
   * The style applied to ticks text.
   */
  tickLabelStyle: import_prop_types6.default.object,
  /**
   * Maximal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMaxStep: import_prop_types6.default.number,
  /**
   * Minimal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMinStep: import_prop_types6.default.number,
  /**
   * The number of ticks. This number is not guaranteed.
   * Not supported by categorical axis (band, points).
   */
  tickNumber: import_prop_types6.default.number,
  /**
   * The placement of ticks in regard to the band interval.
   * Only used if scale is 'band'.
   * @default 'extremities'
   */
  tickPlacement: import_prop_types6.default.oneOf(["end", "extremities", "middle", "start"]),
  /**
   * The size of the ticks.
   * @default 6
   */
  tickSize: import_prop_types6.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsAxis/ChartsAxis.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
function ChartsAxis(props) {
  const {
    slots,
    slotProps
  } = props;
  const {
    xAxisIds,
    xAxis
  } = useXAxes();
  const {
    yAxisIds,
    yAxis
  } = useYAxes();
  return (0, import_jsx_runtime10.jsxs)(React27.Fragment, {
    children: [xAxisIds.map((axisId) => {
      if (!xAxis[axisId].position || xAxis[axisId].position === "none") {
        return null;
      }
      return (0, import_jsx_runtime10.jsx)(ChartsXAxis, {
        slots,
        slotProps,
        axisId
      }, axisId);
    }), yAxisIds.map((axisId) => {
      if (!yAxis[axisId].position || yAxis[axisId].position === "none") {
        return null;
      }
      return (0, import_jsx_runtime10.jsx)(ChartsYAxis, {
        slots,
        slotProps,
        axisId
      }, axisId);
    })]
  });
}
true ? ChartsAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types7.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types7.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsGrid.js
var React30 = __toESM(require_react(), 1);
var import_prop_types8 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsGrid/chartsGridClasses.js
function getChartsGridUtilityClass(slot) {
  return generateUtilityClass("MuiChartsGrid", slot);
}
var chartsGridClasses = generateUtilityClasses("MuiChartsGrid", ["root", "line", "horizontalLine", "verticalLine"]);

// node_modules/@mui/x-charts/esm/ChartsGrid/styledComponents.js
var GridRoot = styled_default("g", {
  name: "MuiChartsGrid",
  slot: "Root",
  overridesResolver: (props, styles) => [{
    [`&.${chartsGridClasses.verticalLine}`]: styles.verticalLine
  }, {
    [`&.${chartsGridClasses.horizontalLine}`]: styles.horizontalLine
  }, styles.root]
})({});
var GridLine = styled_default("line", {
  name: "MuiChartsGrid",
  slot: "Line"
})(({
  theme
}) => ({
  stroke: (theme.vars || theme).palette.divider,
  shapeRendering: "crispEdges",
  strokeWidth: 1
}));

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsVerticalGrid.js
var React28 = __toESM(require_react(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function ChartsGridVertical(props) {
  const {
    axis,
    start,
    end,
    classes
  } = props;
  const {
    scale: scale2,
    tickNumber,
    tickInterval
  } = axis;
  const xTicks = useTicks({
    scale: scale2,
    tickNumber,
    tickInterval
  });
  return (0, import_jsx_runtime11.jsx)(React28.Fragment, {
    children: xTicks.map(({
      value,
      offset
    }) => {
      var _a;
      return (0, import_jsx_runtime11.jsx)(GridLine, {
        y1: start,
        y2: end,
        x1: offset,
        x2: offset,
        className: classes.verticalLine
      }, `vertical-${((_a = value.getTime) == null ? void 0 : _a.call(value)) ?? value}`);
    })
  });
}

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsHorizontalGrid.js
var React29 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
function ChartsGridHorizontal(props) {
  const {
    axis,
    start,
    end,
    classes
  } = props;
  const {
    scale: scale2,
    tickNumber,
    tickInterval
  } = axis;
  const yTicks = useTicks({
    scale: scale2,
    tickNumber,
    tickInterval
  });
  return (0, import_jsx_runtime12.jsx)(React29.Fragment, {
    children: yTicks.map(({
      value,
      offset
    }) => {
      var _a;
      return (0, import_jsx_runtime12.jsx)(GridLine, {
        y1: offset,
        y2: offset,
        x1: start,
        x2: end,
        className: classes.horizontalLine
      }, `horizontal-${((_a = value.getTime) == null ? void 0 : _a.call(value)) ?? value}`);
    })
  });
}

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsGrid.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var _excluded6 = ["vertical", "horizontal"];
var useUtilityClasses3 = ({
  classes
}) => {
  const slots = {
    root: ["root"],
    verticalLine: ["line", "verticalLine"],
    horizontalLine: ["line", "horizontalLine"]
  };
  return composeClasses(slots, getChartsGridUtilityClass, classes);
};
function ChartsGrid(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiChartsGrid"
  });
  const drawingArea = useDrawingArea();
  const {
    vertical,
    horizontal
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const classes = useUtilityClasses3(props);
  const horizontalAxis = yAxis[yAxisIds[0]];
  const verticalAxis = xAxis[xAxisIds[0]];
  return (0, import_jsx_runtime13.jsxs)(GridRoot, _extends({}, other, {
    className: classes.root,
    children: [vertical && (0, import_jsx_runtime13.jsx)(ChartsGridVertical, {
      axis: verticalAxis,
      start: drawingArea.top,
      end: drawingArea.height + drawingArea.top,
      classes
    }), horizontal && (0, import_jsx_runtime13.jsx)(ChartsGridHorizontal, {
      axis: horizontalAxis,
      start: drawingArea.left,
      end: drawingArea.width + drawingArea.left,
      classes
    })]
  }));
}
true ? ChartsGrid.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types8.default.object,
  /**
   * Displays horizontal grid.
   */
  horizontal: import_prop_types8.default.bool,
  /**
   * Displays vertical grid.
   */
  vertical: import_prop_types8.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltip.js
var React38 = __toESM(require_react(), 1);
var import_prop_types13 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsItemTooltipContent.js
var React33 = __toESM(require_react(), 1);
var import_prop_types10 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsTooltip/chartsTooltipClasses.js
function getChartsTooltipUtilityClass(slot) {
  return generateUtilityClass("MuiChartsTooltip", slot);
}
var chartsTooltipClasses = generateUtilityClasses("MuiChartsTooltip", ["root", "paper", "table", "row", "cell", "mark", "markContainer", "labelCell", "valueCell", "axisValueCell"]);
var useUtilityClasses4 = (classes) => {
  const slots = {
    root: ["root"],
    paper: ["paper"],
    table: ["table"],
    row: ["row"],
    cell: ["cell"],
    mark: ["mark"],
    markContainer: ["markContainer"],
    labelCell: ["labelCell"],
    valueCell: ["valueCell"],
    axisValueCell: ["axisValueCell"]
  };
  return composeClasses(slots, getChartsTooltipUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/ChartsTooltip/useItemTooltip.js
function useInternalItemTooltip() {
  var _a, _b, _c;
  const store = useStore();
  const identifier = useSelector(store, selectorChartsInteractionItem);
  const seriesConfig5 = useSelector(store, selectorChartSeriesConfig);
  const series = useSeries();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const {
    rotationAxis,
    rotationAxisIds
  } = useRotationAxes();
  const {
    radiusAxis,
    radiusAxisIds
  } = useRadiusAxes();
  const xAxisId = series.xAxisId ?? xAxisIds[0];
  const yAxisId = series.yAxisId ?? yAxisIds[0];
  const zAxisId = series.zAxisId ?? zAxisIds[0];
  const rotationAxisId = series.rotationAxisId ?? rotationAxisIds[0];
  const radiusAxisId = series.radiusAxisId ?? radiusAxisIds[0];
  if (!identifier) {
    return null;
  }
  const itemSeries = (_a = series[identifier.type]) == null ? void 0 : _a.series[identifier.seriesId];
  if (!itemSeries) {
    return null;
  }
  const getColor6 = ((_c = (_b = seriesConfig5[itemSeries.type]).colorProcessor) == null ? void 0 : _c.call(_b, itemSeries, xAxisId && xAxis[xAxisId], yAxisId && yAxis[yAxisId], zAxisId && zAxis[zAxisId])) ?? (() => "");
  const axesConfig = {};
  if (xAxisId !== void 0) {
    axesConfig.x = xAxis[xAxisId];
  }
  if (yAxisId !== void 0) {
    axesConfig.y = yAxis[yAxisId];
  }
  if (rotationAxisId !== void 0) {
    axesConfig.rotation = rotationAxis[rotationAxisId];
  }
  if (radiusAxisId !== void 0) {
    axesConfig.radius = radiusAxis[radiusAxisId];
  }
  return seriesConfig5[itemSeries.type].tooltipGetter({
    series: itemSeries,
    axesConfig,
    getColor: getColor6,
    identifier
  });
}
var useItemTooltip = () => {
  return useInternalItemTooltip();
};
var useRadarItemTooltip = () => {
  return useInternalItemTooltip();
};

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltipTable.js
var ChartsTooltipPaper = styled_default("div", {
  name: "MuiChartsTooltip",
  slot: "Container",
  overridesResolver: (props, styles) => styles.paper
  // FIXME: Inconsistent naming with slot
})(({
  theme
}) => {
  var _a;
  return {
    backgroundColor: (theme.vars || theme).palette.background.paper,
    color: (theme.vars || theme).palette.text.primary,
    borderRadius: (_a = (theme.vars || theme).shape) == null ? void 0 : _a.borderRadius,
    border: `solid ${(theme.vars || theme).palette.divider} 1px`
  };
});
var ChartsTooltipTable = styled_default("table", {
  name: "MuiChartsTooltip",
  slot: "Table"
})(({
  theme
}) => ({
  borderSpacing: 0,
  [`& .${chartsTooltipClasses.markContainer}`]: {
    display: "inline-block",
    width: `calc(20px + ${theme.spacing(1.5)})`,
    verticalAlign: "middle"
  },
  "& caption": {
    borderBottom: `solid ${(theme.vars || theme).palette.divider} 1px`,
    padding: theme.spacing(0.5, 1.5),
    textAlign: "start",
    whiteSpace: "nowrap",
    "& span": {
      marginRight: theme.spacing(1.5)
    }
  }
}));
var ChartsTooltipRow = styled_default("tr", {
  name: "MuiChartsTooltip",
  slot: "Row"
})(({
  theme
}) => ({
  "tr:first-of-type& td": {
    paddingTop: theme.spacing(0.5)
  },
  "tr:last-of-type& td": {
    paddingBottom: theme.spacing(0.5)
  }
}));
var ChartsTooltipCell = styled_default(Typography_default, {
  name: "MuiChartsTooltip",
  slot: "Cell"
})(({
  theme
}) => ({
  verticalAlign: "middle",
  color: (theme.vars || theme).palette.text.secondary,
  textAlign: "start",
  [`&.${chartsTooltipClasses.cell}`]: {
    paddingLeft: theme.spacing(1),
    paddingRight: theme.spacing(1)
  },
  [`&.${chartsTooltipClasses.labelCell}`]: {
    fontWeight: theme.typography.fontWeightRegular
  },
  [`&.${chartsTooltipClasses.valueCell}, &.${chartsTooltipClasses.axisValueCell}`]: {
    color: (theme.vars || theme).palette.text.primary,
    fontWeight: theme.typography.fontWeightMedium
  },
  [`&.${chartsTooltipClasses.valueCell}`]: {
    paddingLeft: theme.spacing(1.5),
    paddingRight: theme.spacing(1.5)
  },
  "td:first-of-type&, th:first-of-type&": {
    paddingLeft: theme.spacing(1.5)
  },
  "td:last-of-type&, th:last-of-type&": {
    paddingRight: theme.spacing(1.5)
  }
}));

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabelMark.js
var React32 = __toESM(require_react(), 1);
var import_prop_types9 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLabel/labelMarkClasses.js
function getLabelMarkUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLabelMark", slot);
}
var labelMarkClasses = generateUtilityClasses("MuiChartsLabelMark", ["root", "line", "square", "circle", "mask", "fill"]);
var useUtilityClasses5 = (props) => {
  const {
    type
  } = props;
  const slots = {
    root: typeof type === "function" ? ["root"] : ["root", type],
    mask: ["mask"],
    fill: ["fill"]
  };
  return composeClasses(slots, getLabelMarkUtilityClass, props.classes);
};

// node_modules/@mui/x-charts/esm/internals/consumeThemeProps.js
var React31 = __toESM(require_react(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var consumeThemeProps = (name, options, InComponent) => React31.forwardRef(function ConsumeThemeInternal(props, ref) {
  var _a;
  const themedProps = useThemeProps({
    props,
    // eslint-disable-next-line material-ui/mui-name-matches-component-name
    name
  });
  const defaultProps3 = typeof options.defaultProps === "function" ? options.defaultProps(themedProps) : options.defaultProps ?? {};
  const outProps = resolveProps(defaultProps3, themedProps);
  const theme = useTheme();
  const classes = (_a = options.classesResolver) == null ? void 0 : _a.call(options, outProps, theme);
  const OutComponent = React31.forwardRef(InComponent);
  if (true) {
    OutComponent.displayName = `consumeThemeProps(${name})`;
  }
  return (0, import_jsx_runtime14.jsx)(OutComponent, _extends({}, outProps, {
    classes,
    ref
  }));
});

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabelMark.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var _excluded7 = ["type", "color", "className", "classes"];
var Root = styled_default("div", {
  name: "MuiChartsLabelMark",
  slot: "Root"
})(() => {
  return {
    display: "flex",
    width: 14,
    height: 14,
    [`&.${labelMarkClasses.line}`]: {
      width: 16,
      height: "unset",
      alignItems: "center",
      [`.${labelMarkClasses.mask}`]: {
        height: 4,
        width: "100%",
        borderRadius: 1,
        overflow: "hidden"
      }
    },
    [`&.${labelMarkClasses.square}`]: {
      height: 13,
      width: 13,
      borderRadius: 2,
      overflow: "hidden"
    },
    [`&.${labelMarkClasses.circle}`]: {
      height: 15,
      width: 15,
      borderRadius: "50%",
      overflow: "hidden"
    },
    svg: {
      display: "block"
    },
    [`& .${labelMarkClasses.mask} > *`]: {
      height: "100%",
      width: "100%"
    },
    [`& .${labelMarkClasses.mask}`]: {
      height: "100%",
      width: "100%"
    }
  };
});
var ChartsLabelMark = consumeThemeProps("MuiChartsLabelMark", {
  defaultProps: {
    type: "square"
  },
  classesResolver: useUtilityClasses5
}, function ChartsLabelMark2(props, ref) {
  const {
    type,
    color: color2,
    className,
    classes
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const Component = type;
  return (0, import_jsx_runtime15.jsx)(Root, _extends({
    className: clsx_default(classes == null ? void 0 : classes.root, className),
    ownerState: props,
    "aria-hidden": "true",
    ref
  }, other, {
    children: (0, import_jsx_runtime15.jsx)("div", {
      className: classes == null ? void 0 : classes.mask,
      children: typeof Component === "function" ? (0, import_jsx_runtime15.jsx)(Component, {
        className: classes == null ? void 0 : classes.fill,
        color: color2
      }) : (0, import_jsx_runtime15.jsx)("svg", {
        viewBox: "0 0 24 24",
        preserveAspectRatio: type === "line" ? "none" : void 0,
        children: (0, import_jsx_runtime15.jsx)("rect", {
          className: classes == null ? void 0 : classes.fill,
          width: "24",
          height: "24",
          fill: color2
        })
      })
    })
  }));
});
true ? ChartsLabelMark.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types9.default.object,
  /**
   * The color of the mark.
   */
  color: import_prop_types9.default.string,
  /**
   * The type of the mark.
   * @default 'square'
   */
  type: import_prop_types9.default.oneOf(["circle", "line", "square"])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsItemTooltipContent.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
function ChartsItemTooltipContent(props) {
  const {
    classes: propClasses,
    sx
  } = props;
  const tooltipData = useInternalItemTooltip();
  const classes = useUtilityClasses4(propClasses);
  if (!tooltipData) {
    return null;
  }
  if ("values" in tooltipData) {
    const {
      label: seriesLabel,
      color: color3,
      markType: markType2
    } = tooltipData;
    return (0, import_jsx_runtime16.jsx)(ChartsTooltipPaper, {
      sx,
      className: classes.paper,
      children: (0, import_jsx_runtime16.jsxs)(ChartsTooltipTable, {
        className: classes.table,
        children: [(0, import_jsx_runtime16.jsxs)(Typography_default, {
          component: "caption",
          children: [(0, import_jsx_runtime16.jsx)("div", {
            className: classes.markContainer,
            children: (0, import_jsx_runtime16.jsx)(ChartsLabelMark, {
              type: markType2,
              color: color3,
              className: classes.mark
            })
          }), seriesLabel]
        }), (0, import_jsx_runtime16.jsx)("tbody", {
          children: tooltipData.values.map(({
            formattedValue: formattedValue2,
            label: label2
          }) => (0, import_jsx_runtime16.jsxs)(ChartsTooltipRow, {
            className: classes.row,
            children: [(0, import_jsx_runtime16.jsx)(ChartsTooltipCell, {
              className: clsx_default(classes.labelCell, classes.cell),
              component: "th",
              children: label2
            }), (0, import_jsx_runtime16.jsx)(ChartsTooltipCell, {
              className: clsx_default(classes.valueCell, classes.cell),
              component: "td",
              children: formattedValue2
            })]
          }, label2))
        })]
      })
    });
  }
  const {
    color: color2,
    label,
    formattedValue,
    markType
  } = tooltipData;
  return (0, import_jsx_runtime16.jsx)(ChartsTooltipPaper, {
    sx,
    className: classes.paper,
    children: (0, import_jsx_runtime16.jsx)(ChartsTooltipTable, {
      className: classes.table,
      children: (0, import_jsx_runtime16.jsx)("tbody", {
        children: (0, import_jsx_runtime16.jsxs)(ChartsTooltipRow, {
          className: classes.row,
          children: [(0, import_jsx_runtime16.jsxs)(ChartsTooltipCell, {
            className: clsx_default(classes.labelCell, classes.cell),
            component: "th",
            children: [(0, import_jsx_runtime16.jsx)("div", {
              className: classes.markContainer,
              children: (0, import_jsx_runtime16.jsx)(ChartsLabelMark, {
                type: markType,
                color: color2,
                className: classes.mark
              })
            }), label]
          }), (0, import_jsx_runtime16.jsx)(ChartsTooltipCell, {
            className: clsx_default(classes.valueCell, classes.cell),
            component: "td",
            children: formattedValue
          })]
        })
      })
    })
  });
}
true ? ChartsItemTooltipContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types10.default.object,
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsAxisTooltipContent.js
var React36 = __toESM(require_react(), 1);
var import_prop_types11 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useColorProcessor.js
var React34 = __toESM(require_react(), 1);
function useColorProcessor(seriesType) {
  const store = useStore();
  const seriesConfig5 = useSelector(store, selectorChartSeriesConfig);
  const colorProcessors = React34.useMemo(() => {
    const rep = {};
    Object.keys(seriesConfig5).forEach((seriesT) => {
      rep[seriesT] = seriesConfig5[seriesT].colorProcessor;
    });
    return rep;
  }, [seriesConfig5]);
  if (!seriesType) {
    return colorProcessors;
  }
  return colorProcessors[seriesType];
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/utils.js
var React35 = __toESM(require_react(), 1);
function useMouseTracker() {
  const svgRef = useSvgRef();
  const [mousePosition, setMousePosition] = React35.useState(null);
  React35.useEffect(() => {
    const element = svgRef.current;
    if (element === null) {
      return () => {
      };
    }
    const controller = new AbortController();
    const handleOut = (event) => {
      if (event.pointerType !== "mouse") {
        setMousePosition(null);
      }
    };
    const handleMove = (event) => {
      setMousePosition({
        x: event.clientX,
        y: event.clientY,
        height: event.height,
        pointerType: event.pointerType
      });
    };
    element.addEventListener("pointerdown", handleMove, {
      signal: controller.signal
    });
    element.addEventListener("pointermove", handleMove, {
      signal: controller.signal
    });
    element.addEventListener("pointerup", handleOut, {
      signal: controller.signal
    });
    return () => {
      controller.abort();
    };
  }, [svgRef]);
  return mousePosition;
}
function usePointerType() {
  const svgRef = useSvgRef();
  const [pointerType, setPointerType] = React35.useState(null);
  React35.useEffect(() => {
    const element = svgRef.current;
    if (element === null) {
      return () => {
      };
    }
    const handleOut = (event) => {
      if (event.pointerType !== "mouse") {
        setPointerType(null);
      }
    };
    const handleEnter = (event) => {
      setPointerType({
        pointerType: event.pointerType
      });
    };
    element.addEventListener("pointerenter", handleEnter);
    element.addEventListener("pointerup", handleOut);
    return () => {
      element.removeEventListener("pointerenter", handleEnter);
      element.removeEventListener("pointerup", handleOut);
    };
  }, [svgRef]);
  return pointerType;
}
function utcFormatter(v2) {
  if (v2 instanceof Date) {
    return v2.toUTCString();
  }
  return v2.toLocaleString();
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/getAxisIndex.js
function getAxisIndex2(axisConfig, pointerValue) {
  const {
    scale: scale2,
    data: axisData,
    reverse: reverse2
  } = axisConfig;
  if (!isBandScale(scale2)) {
    throw new Error("MUI X: getAxisValue is not implemented for polare continuous axes.");
  }
  if (!axisData) {
    return -1;
  }
  const angleGap = clampAngleRad(pointerValue - Math.min(...scale2.range()));
  const dataIndex = scale2.bandwidth() === 0 ? Math.floor((angleGap + scale2.step() / 2) / scale2.step()) % axisData.length : Math.floor(angleGap / scale2.step());
  if (dataIndex < 0 || dataIndex >= axisData.length) {
    return -1;
  }
  return reverse2 ? axisData.length - 1 - dataIndex : dataIndex;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarInteraction.selectors.js
var optionalGetAxisId2 = (_, id) => id;
var optionalGetAxisIds = (_, ids) => ids;
function indexGetter2(value, axes, ids) {
  return Array.isArray(ids) ? ids.map((id) => getAxisIndex2(axes.axis[id], value)) : getAxisIndex2(axes.axis[ids], value);
}
var selectorChartsInteractionRotationAngle = createSelector([selectorChartsInteractionPointerX, selectorChartsInteractionPointerY, selectorChartPolarCenter], (x2, y2, center) => {
  if (x2 === null || y2 === null) {
    return null;
  }
  return generateSvg2rotation(center)(x2, y2);
});
var selectorChartsInteractionRotationAxisIndex = createSelector([selectorChartsInteractionRotationAngle, selectorChartRotationAxis, optionalGetAxisId2], (rotation, rotationAxis, id = rotationAxis.axisIds[0]) => rotation === null ? null : indexGetter2(rotation, rotationAxis, id));
var selectorChartsInteractionRotationAxisIndexes = createSelector([selectorChartsInteractionRotationAngle, selectorChartRotationAxis, optionalGetAxisIds], (rotation, rotationAxis, ids = rotationAxis.axisIds) => rotation === null ? null : indexGetter2(rotation, rotationAxis, ids));
var selectorChartsInteractionRotationAxisValue = createSelector([selectorChartRotationAxis, selectorChartsInteractionRotationAxisIndex, optionalGetAxisId2], (rotationAxis, rotationIndex, id = rotationAxis.axisIds[0]) => {
  var _a;
  if (rotationIndex === null || rotationIndex === -1 || rotationAxis.axisIds.length === 0) {
    return null;
  }
  const data = (_a = rotationAxis.axis[id]) == null ? void 0 : _a.data;
  if (!data) {
    return null;
  }
  return data[rotationIndex];
});
var selectorChartsInteractionRotationAxisValues = createSelector([selectorChartRotationAxis, selectorChartsInteractionRotationAxisIndexes, optionalGetAxisIds], (rotationAxis, rotationIndexes, ids = rotationAxis.axisIds) => {
  if (rotationIndexes === null) {
    return null;
  }
  return ids.map((id, axisIndex) => {
    var _a;
    const rotationIndex = rotationIndexes[axisIndex];
    if (rotationIndex === -1) {
      return null;
    }
    return (_a = rotationAxis.axis[id].data) == null ? void 0 : _a[rotationIndex];
  });
});
var selectorChartsInteractionTooltipRotationAxes = createSelector([selectorChartsInteractionRotationAxisIndexes, selectorChartRotationAxis], (indexes2, axes) => {
  if (indexes2 === null) {
    return [];
  }
  return axes.axisIds.map((axisId, axisIndex) => ({
    axisId,
    dataIndex: indexes2[axisIndex]
  })).filter(({
    axisId,
    dataIndex
  }) => axes.axis[axisId].triggerTooltip && dataIndex >= 0);
}, {
  memoizeOptions: {
    // Keep the same reference if array content is the same.
    // If possible, avoid this pattern by creating selectors that
    // uses string/number as arguments.
    resultEqualityCheck: isDeepEqual
  }
});
var selectorChartsInteractionTooltipRadiusAxes = createSelector([], () => {
  return [];
});
var selectorChartsInteractionPolarAxisTooltip = createSelector([selectorChartsInteractionTooltipRotationAxes], (rotationTooltip) => rotationTooltip.length > 0);

// node_modules/@mui/x-charts/esm/ChartsTooltip/useAxisTooltip.js
function defaultAxisTooltipConfig(axis, dataIndex, axisDirection) {
  var _a;
  const axisValue = ((_a = axis.data) == null ? void 0 : _a[dataIndex]) ?? null;
  const axisFormatter = axis.valueFormatter ?? ((v2) => axis.scaleType === "utc" ? utcFormatter(v2) : v2.toLocaleString());
  const axisFormattedValue = axisFormatter(axisValue, {
    location: "tooltip",
    scale: axis.scale
  });
  return {
    axisDirection,
    axisId: axis.id,
    mainAxis: axis,
    dataIndex,
    axisValue,
    axisFormattedValue,
    seriesItems: []
  };
}
function useAxisTooltip(params = {}) {
  const {
    multipleAxes,
    directions
  } = params;
  const defaultXAxis = useXAxis();
  const defaultYAxis = useYAxis();
  const defaultRotationAxis = useRotationAxis();
  const store = useStore();
  const tooltipXAxes = useSelector(store, selectorChartsInteractionTooltipXAxes);
  const tooltipYAxes = useSelector(store, selectorChartsInteractionTooltipYAxes);
  const tooltipRotationAxes = useSelector(store, selectorChartsInteractionTooltipRotationAxes);
  const series = useSeries();
  const {
    xAxis
  } = useXAxes();
  const {
    yAxis
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const {
    rotationAxis
  } = useRotationAxes();
  const colorProcessors = useColorProcessor();
  if (tooltipXAxes.length === 0 && tooltipYAxes.length === 0 && tooltipRotationAxes.length === 0) {
    return null;
  }
  const tooltipAxes = [];
  if (directions === void 0 || directions.includes("x")) {
    tooltipXAxes.forEach(({
      axisId,
      dataIndex
    }) => {
      if (!multipleAxes && tooltipAxes.length > 1) {
        return;
      }
      tooltipAxes.push(defaultAxisTooltipConfig(xAxis[axisId], dataIndex, "x"));
    });
  }
  if (directions === void 0 || directions.includes("y")) {
    tooltipYAxes.forEach(({
      axisId,
      dataIndex
    }) => {
      if (!multipleAxes && tooltipAxes.length > 1) {
        return;
      }
      tooltipAxes.push(defaultAxisTooltipConfig(yAxis[axisId], dataIndex, "y"));
    });
  }
  if (directions === void 0 || directions.includes("rotation")) {
    tooltipRotationAxes.forEach(({
      axisId,
      dataIndex
    }) => {
      if (!multipleAxes && tooltipAxes.length > 1) {
        return;
      }
      tooltipAxes.push(defaultAxisTooltipConfig(rotationAxis[axisId], dataIndex, "rotation"));
    });
  }
  Object.keys(series).filter(isCartesianSeriesType).forEach((seriesType) => {
    const seriesOfType = series[seriesType];
    if (!seriesOfType) {
      return [];
    }
    return seriesOfType.seriesOrder.forEach((seriesId) => {
      var _a;
      const seriesToAdd = seriesOfType.series[seriesId];
      const providedXAxisId = seriesToAdd.xAxisId ?? defaultXAxis.id;
      const providedYAxisId = seriesToAdd.yAxisId ?? defaultYAxis.id;
      const tooltipItemIndex = tooltipAxes.findIndex(({
        axisDirection,
        axisId
      }) => axisDirection === "x" && axisId === providedXAxisId || axisDirection === "y" && axisId === providedYAxisId);
      if (tooltipItemIndex >= 0) {
        const zAxisId = "zAxisId" in seriesToAdd ? seriesToAdd.zAxisId : zAxisIds[0];
        const {
          dataIndex
        } = tooltipAxes[tooltipItemIndex];
        const color2 = ((_a = colorProcessors[seriesType]) == null ? void 0 : _a.call(colorProcessors, seriesToAdd, xAxis[providedXAxisId], yAxis[providedYAxisId], zAxisId ? zAxis[zAxisId] : void 0)(dataIndex)) ?? "";
        const value = seriesToAdd.data[dataIndex] ?? null;
        const formattedValue = seriesToAdd.valueFormatter(value, {
          dataIndex
        });
        const formattedLabel = getLabel(seriesToAdd.label, "tooltip") ?? null;
        tooltipAxes[tooltipItemIndex].seriesItems.push({
          seriesId,
          color: color2,
          value,
          formattedValue,
          formattedLabel,
          markType: seriesToAdd.labelMarkType
        });
      }
    });
  });
  Object.keys(series).filter(isPolarSeriesType).forEach((seriesType) => {
    const seriesOfType = series[seriesType];
    if (!seriesOfType) {
      return [];
    }
    return seriesOfType.seriesOrder.forEach((seriesId) => {
      var _a;
      const seriesToAdd = seriesOfType.series[seriesId];
      const providedRotationAxisId = (
        // @ts-expect-error Should be fixed when we introduce a polar series with a rotationAxisId
        seriesToAdd.rotationAxisId ?? (defaultRotationAxis == null ? void 0 : defaultRotationAxis.id)
      );
      const tooltipItemIndex = tooltipAxes.findIndex(({
        axisDirection,
        axisId
      }) => axisDirection === "rotation" && axisId === providedRotationAxisId);
      if (tooltipItemIndex >= 0) {
        const {
          dataIndex
        } = tooltipAxes[tooltipItemIndex];
        const color2 = ((_a = colorProcessors[seriesType]) == null ? void 0 : _a.call(colorProcessors, seriesToAdd)(dataIndex)) ?? "";
        const value = seriesToAdd.data[dataIndex] ?? null;
        const formattedValue = seriesToAdd.valueFormatter(value, {
          dataIndex
        });
        const formattedLabel = getLabel(seriesToAdd.label, "tooltip") ?? null;
        tooltipAxes[tooltipItemIndex].seriesItems.push({
          seriesId,
          color: color2,
          value,
          formattedValue,
          formattedLabel,
          markType: seriesToAdd.labelMarkType
        });
      }
    });
  });
  if (!multipleAxes) {
    return tooltipAxes.length === 0 ? tooltipAxes[0] : null;
  }
  return tooltipAxes;
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/useAxesTooltip.js
function useAxesTooltip(params) {
  return useAxisTooltip(_extends({}, params, {
    multipleAxes: true
  }));
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsAxisTooltipContent.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
function ChartsAxisTooltipContent(props) {
  const classes = useUtilityClasses4(props.classes);
  const tooltipData = useAxesTooltip();
  if (tooltipData === null) {
    return null;
  }
  return (0, import_jsx_runtime17.jsx)(ChartsTooltipPaper, {
    sx: props.sx,
    className: classes.paper,
    children: tooltipData.map(({
      axisId,
      mainAxis,
      axisValue,
      axisFormattedValue,
      seriesItems
    }) => {
      return (0, import_jsx_runtime17.jsxs)(ChartsTooltipTable, {
        className: classes.table,
        children: [axisValue != null && !mainAxis.hideTooltip && (0, import_jsx_runtime17.jsx)(Typography_default, {
          component: "caption",
          children: axisFormattedValue
        }), (0, import_jsx_runtime17.jsx)("tbody", {
          children: seriesItems.map(({
            seriesId,
            color: color2,
            formattedValue,
            formattedLabel,
            markType
          }) => {
            if (formattedValue == null) {
              return null;
            }
            return (0, import_jsx_runtime17.jsxs)(ChartsTooltipRow, {
              className: classes.row,
              children: [(0, import_jsx_runtime17.jsxs)(ChartsTooltipCell, {
                className: clsx_default(classes.labelCell, classes.cell),
                component: "th",
                children: [(0, import_jsx_runtime17.jsx)("div", {
                  className: classes.markContainer,
                  children: (0, import_jsx_runtime17.jsx)(ChartsLabelMark, {
                    type: markType,
                    color: color2,
                    className: classes.mark
                  })
                }), formattedLabel || null]
              }), (0, import_jsx_runtime17.jsx)(ChartsTooltipCell, {
                className: clsx_default(classes.valueCell, classes.cell),
                component: "td",
                children: formattedValue
              })]
            }, seriesId);
          })
        })]
      }, axisId);
    })
  });
}
true ? ChartsAxisTooltipContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types11.default.object,
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltipContainer.js
var React37 = __toESM(require_react(), 1);
var import_prop_types12 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/useAxisSystem.js
function useAxisSystem() {
  const store = useStore();
  const rawRotationAxis = useSelector(store, selectorChartRawRotationAxis);
  const rawXAxis = useSelector(store, selectorChartRawXAxis);
  if (rawRotationAxis !== void 0) {
    return "polar";
  }
  if (rawXAxis !== void 0) {
    return "cartesian";
  }
  return "none";
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltipContainer.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var _excluded8 = ["trigger", "classes", "children"];
var noAxis = () => false;
var ChartsTooltipRoot = styled_default(Popper_default, {
  name: "MuiChartsTooltip",
  slot: "Root"
})(({
  theme
}) => ({
  pointerEvents: "none",
  zIndex: theme.zIndex.modal
}));
function ChartsTooltipContainer(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiChartsTooltipContainer"
  });
  const {
    trigger = "axis",
    classes,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const svgRef = useSvgRef();
  const pointerType = usePointerType();
  const popperRef = React37.useRef(null);
  const positionRef = useLazyRef(() => ({
    x: 0,
    y: 0
  }));
  const axisSystem = useAxisSystem();
  const store = useStore();
  const isOpen = useSelector(store, trigger === "axis" ? axisSystem === "polar" && selectorChartsInteractionPolarAxisTooltip || axisSystem === "cartesian" && selectorChartsInteractionAxisTooltip || noAxis : selectorChartsInteractionItemIsDefined);
  const popperOpen = pointerType !== null && isOpen;
  React37.useEffect(() => {
    const element = svgRef.current;
    if (element === null) {
      return () => {
      };
    }
    const handleMove = (event) => {
      var _a;
      positionRef.current = {
        x: event.clientX,
        y: event.clientY
      };
      (_a = popperRef.current) == null ? void 0 : _a.update();
    };
    element.addEventListener("pointermove", handleMove);
    return () => {
      element.removeEventListener("pointermove", handleMove);
    };
  }, [svgRef, positionRef]);
  const anchorEl = React37.useMemo(() => ({
    getBoundingClientRect: () => ({
      x: positionRef.current.x,
      y: positionRef.current.y,
      top: positionRef.current.y,
      left: positionRef.current.x,
      right: positionRef.current.x,
      bottom: positionRef.current.y,
      width: 0,
      height: 0,
      toJSON: () => ""
    })
  }), [positionRef]);
  const modifiers = React37.useMemo(() => [{
    name: "offset",
    options: {
      offset: () => {
        if ((pointerType == null ? void 0 : pointerType.pointerType) !== "touch") {
          return [0, 8];
        }
        return [0, 64];
      }
    }
  }, ...(pointerType == null ? void 0 : pointerType.pointerType) === "mouse" ? [] : [{
    name: "flip",
    options: {
      fallbackPlacements: ["top-end", "top-start", "bottom-end", "bottom"]
    }
  }]], [pointerType]);
  if (trigger === "none") {
    return null;
  }
  return (0, import_jsx_runtime18.jsx)(NoSsr_default, {
    children: popperOpen && (0, import_jsx_runtime18.jsx)(ChartsTooltipRoot, _extends({
      className: classes == null ? void 0 : classes.root,
      open: popperOpen,
      placement: (pointerType == null ? void 0 : pointerType.pointerType) === "mouse" ? "right-start" : "top",
      popperRef,
      anchorEl,
      modifiers
    }, other, {
      children
    }))
  });
}
true ? ChartsTooltipContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: import_prop_types12.default.oneOfType([HTMLElementType, import_prop_types12.default.object, import_prop_types12.default.func]),
  /**
   * Popper render function or node.
   */
  children: import_prop_types12.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types12.default.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types12.default.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: import_prop_types12.default.shape({
    Root: import_prop_types12.default.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: import_prop_types12.default.shape({
    root: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types12.default.oneOfType([(props, propName) => {
    if (props[propName] == null) {
      return new Error(`Prop '${propName}' is required but wasn't specified`);
    }
    if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
      return new Error(`Expected prop '${propName}' to be of type Element`);
    }
    return null;
  }, import_prop_types12.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types12.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types12.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types12.default.arrayOf(import_prop_types12.default.shape({
    data: import_prop_types12.default.object,
    effect: import_prop_types12.default.func,
    enabled: import_prop_types12.default.bool,
    fn: import_prop_types12.default.func,
    name: import_prop_types12.default.any,
    options: import_prop_types12.default.object,
    phase: import_prop_types12.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types12.default.arrayOf(import_prop_types12.default.string),
    requiresIfExists: import_prop_types12.default.arrayOf(import_prop_types12.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types12.default.bool,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types12.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types12.default.shape({
    modifiers: import_prop_types12.default.array,
    onFirstUpdate: import_prop_types12.default.func,
    placement: import_prop_types12.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types12.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.shape({
    current: import_prop_types12.default.shape({
      destroy: import_prop_types12.default.func.isRequired,
      forceUpdate: import_prop_types12.default.func.isRequired,
      setOptions: import_prop_types12.default.func.isRequired,
      state: import_prop_types12.default.shape({
        attributes: import_prop_types12.default.object.isRequired,
        elements: import_prop_types12.default.object.isRequired,
        modifiersData: import_prop_types12.default.object.isRequired,
        options: import_prop_types12.default.object.isRequired,
        orderedModifiers: import_prop_types12.default.arrayOf(import_prop_types12.default.object).isRequired,
        placement: import_prop_types12.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]).isRequired,
        rects: import_prop_types12.default.object.isRequired,
        reset: import_prop_types12.default.bool.isRequired,
        scrollParents: import_prop_types12.default.object.isRequired,
        strategy: import_prop_types12.default.oneOf(["absolute", "fixed"]).isRequired,
        styles: import_prop_types12.default.object.isRequired
      }).isRequired,
      update: import_prop_types12.default.func.isRequired
    })
  })]),
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types12.default.object,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types12.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types12.default.bool,
  /**
   * Select the kind of tooltip to display
   * - 'item': Shows data about the item below the mouse.
   * - 'axis': Shows values associated with the hovered x value
   * - 'none': Does not display tooltip
   * @default 'axis'
   */
  trigger: import_prop_types12.default.oneOf(["axis", "item", "none"])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltip.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
function ChartsTooltip(props) {
  const {
    classes: propClasses,
    trigger = "axis"
  } = props;
  const classes = useUtilityClasses4(propClasses);
  return (0, import_jsx_runtime19.jsx)(ChartsTooltipContainer, _extends({}, props, {
    classes,
    children: trigger === "axis" ? (0, import_jsx_runtime19.jsx)(ChartsAxisTooltipContent, {
      classes
    }) : (0, import_jsx_runtime19.jsx)(ChartsItemTooltipContent, {
      classes
    })
  }));
}
true ? ChartsTooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: import_prop_types13.default.oneOfType([HTMLElementType, import_prop_types13.default.object, import_prop_types13.default.func]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types13.default.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types13.default.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: import_prop_types13.default.shape({
    Root: import_prop_types13.default.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: import_prop_types13.default.shape({
    root: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types13.default.oneOfType([(props, propName) => {
    if (props[propName] == null) {
      return new Error(`Prop '${propName}' is required but wasn't specified`);
    }
    if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
      return new Error(`Expected prop '${propName}' to be of type Element`);
    }
    return null;
  }, import_prop_types13.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types13.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types13.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types13.default.arrayOf(import_prop_types13.default.shape({
    data: import_prop_types13.default.object,
    effect: import_prop_types13.default.func,
    enabled: import_prop_types13.default.bool,
    fn: import_prop_types13.default.func,
    name: import_prop_types13.default.any,
    options: import_prop_types13.default.object,
    phase: import_prop_types13.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types13.default.arrayOf(import_prop_types13.default.string),
    requiresIfExists: import_prop_types13.default.arrayOf(import_prop_types13.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types13.default.bool,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types13.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types13.default.shape({
    modifiers: import_prop_types13.default.array,
    onFirstUpdate: import_prop_types13.default.func,
    placement: import_prop_types13.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types13.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.shape({
    current: import_prop_types13.default.shape({
      destroy: import_prop_types13.default.func.isRequired,
      forceUpdate: import_prop_types13.default.func.isRequired,
      setOptions: import_prop_types13.default.func.isRequired,
      state: import_prop_types13.default.shape({
        attributes: import_prop_types13.default.object.isRequired,
        elements: import_prop_types13.default.object.isRequired,
        modifiersData: import_prop_types13.default.object.isRequired,
        options: import_prop_types13.default.object.isRequired,
        orderedModifiers: import_prop_types13.default.arrayOf(import_prop_types13.default.object).isRequired,
        placement: import_prop_types13.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]).isRequired,
        rects: import_prop_types13.default.object.isRequired,
        reset: import_prop_types13.default.bool.isRequired,
        scrollParents: import_prop_types13.default.object.isRequired,
        strategy: import_prop_types13.default.oneOf(["absolute", "fixed"]).isRequired,
        styles: import_prop_types13.default.object.isRequired
      }).isRequired,
      update: import_prop_types13.default.func.isRequired
    })
  })]),
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types13.default.object,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types13.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types13.default.bool,
  /**
   * Select the kind of tooltip to display
   * - 'item': Shows data about the item below the mouse.
   * - 'axis': Shows values associated with the hovered x value
   * - 'none': Does not display tooltip
   * @default 'axis'
   */
  trigger: import_prop_types13.default.oneOf(["axis", "item", "none"])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLabel/labelClasses.js
function getLabelUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLabel", slot);
}
var labelClasses = generateUtilityClasses("MuiChartsLabel", ["root"]);
var useUtilityClasses6 = (props) => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getLabelUtilityClass, props.classes);
};

// node_modules/@mui/x-charts/esm/ChartsLabel/labelGradientClasses.js
function getLabelGradientUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLabelGradient", slot);
}
var labelGradientClasses = generateUtilityClasses("MuiChartsLabelGradient", ["root", "vertical", "horizontal", "mask", "fill"]);
var useUtilityClasses7 = (props) => {
  const {
    direction
  } = props;
  const slots = {
    root: ["root", direction],
    mask: ["mask"],
    fill: ["fill"]
  };
  return composeClasses(slots, getLabelGradientUtilityClass, props.classes);
};

// node_modules/@mui/x-charts/esm/ChartsLegend/ChartsLegend.js
var React41 = __toESM(require_react(), 1);
var import_prop_types15 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLegend/onClickContextBuilder.js
var seriesContextBuilder = (context) => ({
  type: "series",
  color: context.color,
  label: context.label,
  seriesId: context.seriesId,
  itemId: context.itemId
});

// node_modules/@mui/x-charts/esm/ChartsLegend/chartsLegendClasses.js
function getLegendUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLegend", slot);
}
var useUtilityClasses8 = (props) => {
  const {
    classes,
    direction
  } = props;
  const slots = {
    root: ["root", direction],
    mark: ["mark"],
    label: ["label"],
    series: ["series"]
  };
  return composeClasses(slots, getLegendUtilityClass, classes);
};
var legendClasses = generateUtilityClasses("MuiChartsLegend", ["root", "series", "mark", "label", "vertical", "horizontal"]);

// node_modules/@mui/x-charts/esm/internals/consumeSlots.js
var React39 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var _excluded9 = ["slots", "slotProps"];
var _excluded23 = ["ownerState"];
var consumeSlots = (name, slotPropName, options, InComponent) => {
  function ConsumeSlotsInternal(props, ref) {
    var _a;
    const themedProps = useThemeProps({
      props,
      // eslint-disable-next-line material-ui/mui-name-matches-component-name
      name
    });
    const defaultProps3 = typeof options.defaultProps === "function" ? options.defaultProps(themedProps) : options.defaultProps ?? {};
    const defaultizedProps = resolveProps(defaultProps3, themedProps);
    const _ref = defaultizedProps, {
      slots,
      slotProps
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded9);
    const theme = useTheme();
    const classes = (_a = options.classesResolver) == null ? void 0 : _a.call(options, defaultizedProps, theme);
    const Component = (slots == null ? void 0 : slots[slotPropName]) ?? InComponent;
    const propagateSlots = options.propagateSlots && !(slots == null ? void 0 : slots[slotPropName]);
    const _useSlotProps = useSlotProps_default({
      elementType: Component,
      externalSlotProps: slotProps == null ? void 0 : slotProps[slotPropName],
      additionalProps: _extends({}, other, {
        classes
      }, propagateSlots && {
        slots,
        slotProps
      }),
      ownerState: {}
    }), originalOutProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded23);
    const outProps = _extends({}, originalOutProps);
    for (const prop of options.omitProps ?? []) {
      delete outProps[prop];
    }
    if (true) {
      Component.displayName = `${name}.slots.${slotPropName}`;
    }
    return (0, import_jsx_runtime20.jsx)(Component, _extends({}, outProps, {
      ref
    }));
  }
  return React39.forwardRef(ConsumeSlotsInternal);
};

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabel.js
var React40 = __toESM(require_react(), 1);
var import_prop_types14 = __toESM(require_prop_types(), 1);
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var _excluded10 = ["children", "className", "classes"];
var ChartsLabel = consumeThemeProps("MuiChartsLabel", {
  classesResolver: useUtilityClasses6
}, function ChartsLabel2(props, ref) {
  const {
    children,
    className,
    classes
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  return (0, import_jsx_runtime21.jsx)("span", _extends({
    className: clsx_default(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    children
  }));
});
true ? ChartsLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types14.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types14.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/ChartsLegend.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var _excluded11 = ["direction", "onItemClick", "className", "classes"];
var RootElement = styled_default("ul", {
  name: "MuiChartsLegend",
  slot: "Root"
})(({
  ownerState,
  theme
}) => _extends({}, theme.typography.caption, {
  color: (theme.vars || theme).palette.text.primary,
  lineHeight: "100%",
  display: "flex",
  flexDirection: ownerState.direction === "vertical" ? "column" : "row",
  alignItems: ownerState.direction === "vertical" ? void 0 : "center",
  flexShrink: 0,
  gap: theme.spacing(2),
  listStyleType: "none",
  paddingInlineStart: 0,
  marginBlock: theme.spacing(1),
  marginInline: theme.spacing(1),
  flexWrap: "wrap",
  li: {
    display: ownerState.direction === "horizontal" ? "inline-flex" : void 0
  },
  [`button.${legendClasses.series}`]: {
    // Reset button styles
    background: "none",
    border: "none",
    padding: 0,
    fontFamily: "inherit",
    fontWeight: "inherit",
    fontSize: "inherit",
    letterSpacing: "inherit",
    color: "inherit"
  },
  [`& .${legendClasses.series}`]: {
    display: ownerState.direction === "vertical" ? "flex" : "inline-flex",
    alignItems: "center",
    gap: theme.spacing(1)
  }
}));
var ChartsLegend = consumeSlots("MuiChartsLegend", "legend", {
  defaultProps: {
    direction: "horizontal"
  },
  // @ts-expect-error position is used only in the slots, but it is passed to the SVG wrapper.
  // We omit it here to avoid passing to slots.
  omitProps: ["position"],
  classesResolver: useUtilityClasses8
}, React41.forwardRef(function ChartsLegend2(props, ref) {
  const data = useLegend();
  const {
    onItemClick,
    className,
    classes
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  if (data.items.length === 0) {
    return null;
  }
  const Element = onItemClick ? "button" : "div";
  return (0, import_jsx_runtime22.jsx)(RootElement, _extends({
    className: clsx_default(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    ownerState: props,
    children: data.items.map((item, i) => {
      return (0, import_jsx_runtime22.jsx)("li", {
        children: (0, import_jsx_runtime22.jsxs)(Element, {
          className: classes == null ? void 0 : classes.series,
          role: onItemClick ? "button" : void 0,
          type: onItemClick ? "button" : void 0,
          onClick: onItemClick ? (
            // @ts-ignore onClick is only attached to a button
            (event) => onItemClick(event, seriesContextBuilder(item), i)
          ) : void 0,
          children: [(0, import_jsx_runtime22.jsx)(ChartsLabelMark, {
            className: classes == null ? void 0 : classes.mark,
            color: item.color,
            type: item.markType
          }), (0, import_jsx_runtime22.jsx)(ChartsLabel, {
            className: classes == null ? void 0 : classes.label,
            children: item.label
          })]
        })
      }, item.id);
    })
  }));
}));
true ? ChartsLegend.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types15.default.object,
  className: import_prop_types15.default.string,
  /**
   * The direction of the legend layout.
   * The default depends on the chart.
   */
  direction: import_prop_types15.default.oneOf(["horizontal", "vertical"]),
  /**
   * Callback fired when a legend item is clicked.
   * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event The click event.
   * @param {SeriesLegendItemContext} legendItem The legend item data.
   * @param {number} index The index of the clicked legend item.
   */
  onItemClick: import_prop_types15.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types15.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types15.default.object,
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/ContinuousColorLegend.js
var React43 = __toESM(require_react(), 1);
var import_prop_types17 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLegend/useAxis.js
function useAxis({
  axisDirection,
  axisId
}) {
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  switch (axisDirection) {
    case "x": {
      const id = typeof axisId === "string" ? axisId : xAxisIds[axisId ?? 0];
      return xAxis[id];
    }
    case "y": {
      const id = typeof axisId === "string" ? axisId : yAxisIds[axisId ?? 0];
      return yAxis[id];
    }
    case "z":
    default: {
      const id = typeof axisId === "string" ? axisId : zAxisIds[axisId ?? 0];
      return zAxis[id];
    }
  }
}

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabelGradient.js
var React42 = __toESM(require_react(), 1);
var import_prop_types16 = __toESM(require_prop_types(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var _excluded12 = ["gradientId", "direction", "classes", "className", "rotate", "reverse", "thickness"];
var getRotation = (direction, reverse2, rotate, isRtl) => {
  const angle = (direction === "vertical" ? -90 : 0) + (rotate ? 90 : 0) + (reverse2 ? 180 : 0);
  if (isRtl && direction !== "vertical") {
    return angle + 180;
  }
  return angle;
};
var Root2 = styled_default("div", {
  name: "MuiChartsLabelGradient",
  slot: "Root"
})(({
  ownerState
}) => {
  const rotation = getRotation(ownerState.direction, ownerState.reverse, ownerState.rotate, ownerState.isRtl);
  return {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    [`.${labelGradientClasses.mask}`]: {
      borderRadius: 2,
      overflow: "hidden"
    },
    [`&.${labelGradientClasses.horizontal}`]: {
      width: "100%",
      [`.${labelGradientClasses.mask}`]: {
        height: ownerState.thickness,
        width: "100%"
      }
    },
    [`&.${labelGradientClasses.vertical}`]: {
      height: "100%",
      [`.${labelGradientClasses.mask}`]: {
        width: ownerState.thickness,
        height: "100%",
        "> svg": {
          height: "100%"
        }
      }
    },
    svg: {
      transform: `rotate(${rotation}deg)`,
      display: "block"
    }
  };
});
var ChartsLabelGradient = consumeThemeProps("MuiChartsLabelGradient", {
  defaultProps: {
    direction: "horizontal",
    thickness: 12
  },
  classesResolver: useUtilityClasses7
}, function ChartsLabelGradient2(props, ref) {
  const {
    gradientId,
    classes,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const isRtl = useRtl();
  return (0, import_jsx_runtime23.jsx)(Root2, _extends({
    className: clsx_default(classes == null ? void 0 : classes.root, className),
    ownerState: _extends({}, props, {
      isRtl
    }),
    "aria-hidden": "true",
    ref
  }, other, {
    children: (0, import_jsx_runtime23.jsx)("div", {
      className: classes == null ? void 0 : classes.mask,
      children: (0, import_jsx_runtime23.jsx)("svg", {
        viewBox: "0 0 24 24",
        children: (0, import_jsx_runtime23.jsx)("rect", {
          className: classes == null ? void 0 : classes.fill,
          width: "24",
          height: "24",
          fill: `url(#${gradientId})`
        })
      })
    })
  }));
});
true ? ChartsLabelGradient.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types16.default.object,
  /**
   * The direction of the gradient.
   * @default 'horizontal'
   */
  direction: import_prop_types16.default.oneOf(["vertical", "horizontal"]),
  /**
   * A unique identifier for the gradient.
   * The `gradientId` will be used as `fill="url(#gradientId)"`.
   */
  gradientId: import_prop_types16.default.string.isRequired,
  /**
   * If `true`, the gradient will be reversed.
   */
  reverse: import_prop_types16.default.bool,
  /**
   * If provided, the gradient will be rotated by 90deg.
   * Useful for linear gradients that are not in the correct orientation.
   */
  rotate: import_prop_types16.default.bool,
  /**
   * The thickness of the gradient
   * @default 12
   */
  thickness: import_prop_types16.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/continuousColorLegendClasses.js
function getLegendUtilityClass2(slot) {
  return generateUtilityClass("MuiContinuousColorLegend", slot);
}
var useUtilityClasses9 = (props) => {
  const {
    classes,
    direction,
    labelPosition
  } = props;
  const slots = {
    root: ["root", direction, labelPosition],
    minLabel: ["minLabel"],
    maxLabel: ["maxLabel"],
    gradient: ["gradient"],
    mark: ["mark"],
    label: ["label"]
  };
  return composeClasses(slots, getLegendUtilityClass2, classes);
};
var continuousColorLegendClasses = generateUtilityClasses("MuiContinuousColorLegend", ["root", "minLabel", "maxLabel", "gradient", "vertical", "horizontal", "start", "end", "extremes", "label"]);

// node_modules/@mui/x-charts/esm/ChartsLegend/ContinuousColorLegend.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var _excluded13 = ["minLabel", "maxLabel", "direction", "axisDirection", "axisId", "rotateGradient", "reverse", "classes", "className", "gradientId", "labelPosition", "thickness"];
var templateAreas = (reverse2) => {
  const startLabel = reverse2 ? "max-label" : "min-label";
  const endLabel = reverse2 ? "min-label" : "max-label";
  return {
    row: {
      start: `
    '${startLabel} . ${endLabel}'
    'gradient gradient gradient'
  `,
      end: `
      'gradient gradient gradient'
      '${startLabel} . ${endLabel}'
    `,
      extremes: `
      '${startLabel} gradient ${endLabel}'
    `
    },
    column: {
      start: `
      '${endLabel} gradient'
      '. gradient'
      '${startLabel} gradient'
    `,
      end: `
      'gradient ${endLabel}'
      'gradient .'
      'gradient ${startLabel}'
    `,
      extremes: `
      '${endLabel}'
      'gradient'
      '${startLabel}'
    `
    }
  };
};
var RootElement2 = styled_default("ul", {
  name: "MuiContinuousColorLegend",
  slot: "Root"
})(({
  theme,
  ownerState
}) => _extends({}, theme.typography.caption, {
  color: (theme.vars || theme).palette.text.primary,
  lineHeight: "100%",
  display: "grid",
  flexShrink: 0,
  gap: theme.spacing(0.5),
  listStyleType: "none",
  paddingInlineStart: 0,
  marginBlock: theme.spacing(1),
  marginInline: theme.spacing(1),
  [`&.${continuousColorLegendClasses.horizontal}`]: {
    gridTemplateRows: "min-content min-content",
    gridTemplateColumns: "min-content auto min-content",
    [`&.${continuousColorLegendClasses.start}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).row.start
    },
    [`&.${continuousColorLegendClasses.end}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).row.end
    },
    [`&.${continuousColorLegendClasses.extremes}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).row.extremes,
      gridTemplateRows: "min-content",
      alignItems: "center"
    }
  },
  [`&.${continuousColorLegendClasses.vertical}`]: {
    gridTemplateRows: "min-content auto min-content",
    gridTemplateColumns: "min-content min-content",
    [`&.${continuousColorLegendClasses.start}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).column.start,
      [`.${continuousColorLegendClasses.maxLabel}, .${continuousColorLegendClasses.minLabel}`]: {
        justifySelf: "end"
      }
    },
    [`&.${continuousColorLegendClasses.end}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).column.end,
      [`.${continuousColorLegendClasses.maxLabel}, .${continuousColorLegendClasses.minLabel}`]: {
        justifySelf: "start"
      }
    },
    [`&.${continuousColorLegendClasses.extremes}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).column.extremes,
      gridTemplateColumns: "min-content",
      [`.${continuousColorLegendClasses.maxLabel}, .${continuousColorLegendClasses.minLabel}`]: {
        justifySelf: "center"
      }
    }
  },
  [`.${continuousColorLegendClasses.gradient}`]: {
    gridArea: "gradient"
  },
  [`.${continuousColorLegendClasses.maxLabel}`]: {
    gridArea: "max-label"
  },
  [`.${continuousColorLegendClasses.minLabel}`]: {
    gridArea: "min-label"
  }
}));
var getText = (label, value, formattedValue) => {
  if (typeof label === "string") {
    return label;
  }
  return (label == null ? void 0 : label({
    value,
    formattedValue
  })) ?? formattedValue;
};
var isZAxis = (axis) => axis.scale === void 0;
var ContinuousColorLegend = consumeThemeProps("MuiContinuousColorLegend", {
  defaultProps: {
    direction: "horizontal",
    labelPosition: "end",
    axisDirection: "z"
  },
  classesResolver: useUtilityClasses9
}, function ContinuousColorLegend2(props, ref) {
  const {
    minLabel,
    maxLabel,
    direction,
    axisDirection,
    axisId,
    rotateGradient,
    reverse: reverse2,
    classes,
    className,
    gradientId,
    thickness
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const generateGradientId = useChartGradientIdObjectBoundBuilder();
  const axisItem = useAxis({
    axisDirection,
    axisId
  });
  const colorMap = axisItem == null ? void 0 : axisItem.colorMap;
  if (!colorMap || !colorMap.type || colorMap.type !== "continuous") {
    return null;
  }
  const minValue = colorMap.min ?? 0;
  const maxValue = colorMap.max ?? 100;
  const valueFormatter = isZAxis(axisItem) ? void 0 : axisItem.valueFormatter;
  const formattedMin = valueFormatter ? valueFormatter(minValue, {
    location: "legend"
  }) : minValue.toLocaleString();
  const formattedMax = valueFormatter ? valueFormatter(maxValue, {
    location: "legend"
  }) : maxValue.toLocaleString();
  const minText = getText(minLabel, minValue, formattedMin);
  const maxText = getText(maxLabel, maxValue, formattedMax);
  const minComponent = (0, import_jsx_runtime24.jsx)("li", {
    className: classes == null ? void 0 : classes.minLabel,
    children: (0, import_jsx_runtime24.jsx)(ChartsLabel, {
      className: classes == null ? void 0 : classes.label,
      children: minText
    })
  });
  const maxComponent = (0, import_jsx_runtime24.jsx)("li", {
    className: classes == null ? void 0 : classes.maxLabel,
    children: (0, import_jsx_runtime24.jsx)(ChartsLabel, {
      className: classes == null ? void 0 : classes.label,
      children: maxText
    })
  });
  return (0, import_jsx_runtime24.jsxs)(RootElement2, _extends({
    className: clsx_default(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    ownerState: props,
    children: [reverse2 ? maxComponent : minComponent, (0, import_jsx_runtime24.jsx)("li", {
      className: classes == null ? void 0 : classes.gradient,
      children: (0, import_jsx_runtime24.jsx)(ChartsLabelGradient, {
        direction,
        rotate: rotateGradient,
        reverse: reverse2,
        thickness,
        gradientId: gradientId ?? generateGradientId(axisItem.id)
      })
    }), reverse2 ? minComponent : maxComponent]
  }));
});
true ? ContinuousColorLegend.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The axis direction containing the color configuration to represent.
   * @default 'z'
   */
  axisDirection: import_prop_types17.default.oneOf(["x", "y", "z"]),
  /**
   * The id of the axis item with the color configuration to represent.
   * @default The first axis item.
   */
  axisId: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types17.default.object,
  className: import_prop_types17.default.string,
  /**
   * The direction of the legend layout.
   * @default 'horizontal'
   */
  direction: import_prop_types17.default.oneOf(["horizontal", "vertical"]),
  /**
   * The id for the gradient to use.
   * If not provided, it will use the generated gradient from the axis configuration.
   * The `gradientId` will be used as `fill="url(#gradientId)"`.
   * @default auto-generated id
   */
  gradientId: import_prop_types17.default.string,
  /**
   * Where to position the labels relative to the gradient.
   * @default 'end'
   */
  labelPosition: import_prop_types17.default.oneOf(["start", "end", "extremes"]),
  /**
   * The label to display at the maximum side of the gradient.
   * Can either be a string, or a function.
   * If not defined, the formatted maximal value is display.
   * @default formattedValue
   */
  maxLabel: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.string]),
  /**
   * The label to display at the minimum side of the gradient.
   * Can either be a string, or a function.
   * @default formattedValue
   */
  minLabel: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.string]),
  /**
   * If `true`, the gradient and labels will be reversed.
   * @default false
   */
  reverse: import_prop_types17.default.bool,
  /**
   * If provided, the gradient will be rotated by 90deg.
   * Useful for linear gradients that are not in the correct orientation.
   */
  rotateGradient: import_prop_types17.default.bool,
  /**
   * The thickness of the gradient
   * @default 12
   */
  thickness: import_prop_types17.default.number,
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/PiecewiseColorLegend.js
var React44 = __toESM(require_react(), 1);
var import_prop_types18 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLegend/piecewiseColorLegendClasses.js
function getLegendUtilityClass3(slot) {
  return generateUtilityClass("MuiPiecewiseColorLegendClasses", slot);
}
var useUtilityClasses10 = (props) => {
  const {
    classes,
    direction,
    labelPosition
  } = props;
  const slots = {
    root: ["root", direction, labelPosition],
    minLabel: ["minLabel"],
    maxLabel: ["maxLabel"],
    item: ["item"],
    mark: ["mark"],
    label: ["label"]
  };
  return composeClasses(slots, getLegendUtilityClass3, classes);
};
var piecewiseColorLegendClasses = generateUtilityClasses("MuiPiecewiseColorLegendClasses", ["root", "minLabel", "maxLabel", "item", "vertical", "horizontal", "start", "end", "extremes", "mark", "label"]);

// node_modules/@mui/x-charts/esm/ChartsLegend/piecewiseColorDefaultLabelFormatter.js
function piecewiseColorDefaultLabelFormatter(params) {
  if (params.min === null) {
    return `<${params.formattedMax}`;
  }
  if (params.max === null) {
    return `>${params.formattedMin}`;
  }
  return `${params.formattedMin}-${params.formattedMax}`;
}

// node_modules/@mui/x-charts/esm/ChartsLegend/PiecewiseColorLegend.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var _excluded14 = ["direction", "classes", "className", "markType", "labelPosition", "axisDirection", "axisId", "labelFormatter", "onItemClick"];
var RootElement3 = styled_default("ul", {
  name: "MuiPiecewiseColorLegend",
  slot: "Root"
})(({
  theme,
  ownerState
}) => {
  var _a;
  return _extends({}, theme.typography.caption, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "100%",
    display: "flex",
    flexDirection: ownerState.direction === "vertical" ? "column" : "row",
    flexShrink: 0,
    gap: theme.spacing(0.5),
    listStyleType: "none",
    paddingInlineStart: 0,
    marginBlock: theme.spacing(1),
    marginInline: theme.spacing(1),
    width: "max-content",
    [`button.${piecewiseColorLegendClasses.item}`]: {
      // Reset button styles
      background: "none",
      border: "none",
      padding: 0,
      cursor: ownerState.onItemClick ? "pointer" : "unset",
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      letterSpacing: "inherit",
      color: "inherit"
    },
    [`.${piecewiseColorLegendClasses.item}`]: {
      display: "flex",
      gap: theme.spacing(0.5)
    },
    [`li :not(.${piecewiseColorLegendClasses.minLabel}, .${piecewiseColorLegendClasses.maxLabel}) .${(_a = piecewiseColorLegendClasses) == null ? void 0 : _a.mark}`]: {
      alignSelf: "center"
    },
    [`&.${piecewiseColorLegendClasses.start}`]: {
      alignItems: "end"
    },
    [`&.${piecewiseColorLegendClasses.end}`]: {
      alignItems: "start"
    },
    [`&.${piecewiseColorLegendClasses.horizontal}`]: {
      alignItems: "center",
      [`.${piecewiseColorLegendClasses.item}`]: {
        flexDirection: "column"
      },
      [`&.${piecewiseColorLegendClasses.start}`]: {
        alignItems: "end"
      },
      [`&.${piecewiseColorLegendClasses.end}`]: {
        alignItems: "start"
      },
      [`.${piecewiseColorLegendClasses.minLabel}`]: {
        alignItems: "end"
      },
      [`&.${piecewiseColorLegendClasses.extremes}`]: {
        [`.${piecewiseColorLegendClasses.minLabel}, .${piecewiseColorLegendClasses.maxLabel}`]: {
          alignItems: "center",
          display: "flex",
          flexDirection: "row"
        }
      }
    },
    [`&.${piecewiseColorLegendClasses.vertical}`]: {
      [`.${piecewiseColorLegendClasses.item}`]: {
        flexDirection: "row",
        alignItems: "center"
      },
      [`&.${piecewiseColorLegendClasses.start}`]: {
        alignItems: "end"
      },
      [`&.${piecewiseColorLegendClasses.end}`]: {
        alignItems: "start"
      },
      [`&.${piecewiseColorLegendClasses.extremes}`]: {
        alignItems: "center",
        [`.${piecewiseColorLegendClasses.minLabel}, .${piecewiseColorLegendClasses.maxLabel}`]: {
          alignItems: "center",
          display: "flex",
          flexDirection: "column"
        }
      }
    }
  });
});
var PiecewiseColorLegend = consumeThemeProps("MuiPiecewiseColorLegend", {
  defaultProps: {
    direction: "horizontal",
    labelPosition: "extremes",
    labelFormatter: piecewiseColorDefaultLabelFormatter
  },
  classesResolver: useUtilityClasses10
}, function PiecewiseColorLegend2(props, ref) {
  const {
    direction,
    classes,
    className,
    markType,
    labelPosition,
    axisDirection,
    axisId,
    labelFormatter,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const isVertical = direction === "vertical";
  const isReverse = isVertical;
  const axisItem = useAxis({
    axisDirection,
    axisId
  });
  const colorMap = axisItem == null ? void 0 : axisItem.colorMap;
  if (!colorMap || !colorMap.type || colorMap.type !== "piecewise") {
    return null;
  }
  const valueFormatter = (v2) => {
    var _a;
    return ((_a = axisItem.valueFormatter) == null ? void 0 : _a.call(axisItem, v2, {
      location: "legend"
    })) ?? v2.toLocaleString();
  };
  const formattedLabels = colorMap.thresholds.map(valueFormatter);
  const startClass = isReverse ? classes == null ? void 0 : classes.maxLabel : classes == null ? void 0 : classes.minLabel;
  const endClass = isReverse ? classes == null ? void 0 : classes.minLabel : classes == null ? void 0 : classes.maxLabel;
  const colors = colorMap.colors.map((color2, colorIndex) => ({
    color: color2,
    colorIndex
  }));
  const orderedColors = isReverse ? colors.reverse() : colors;
  const isStart = labelPosition === "start";
  const isEnd = labelPosition === "end";
  const isExtremes = labelPosition === "extremes";
  return (0, import_jsx_runtime25.jsx)(RootElement3, _extends({
    className: clsx_default(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    ownerState: props,
    children: orderedColors.map(({
      color: color2,
      colorIndex
    }, index2) => {
      const isFirst = index2 === 0;
      const isLast = index2 === colorMap.colors.length - 1;
      const isFirstColor = colorIndex === 0;
      const isLastColor = colorIndex === colorMap.colors.length - 1;
      const data = _extends({
        index: colorIndex,
        length: formattedLabels.length
      }, isFirstColor ? {
        min: null,
        formattedMin: null
      } : {
        min: colorMap.thresholds[colorIndex - 1],
        formattedMin: formattedLabels[colorIndex - 1]
      }, isLastColor ? {
        max: null,
        formattedMax: null
      } : {
        max: colorMap.thresholds[colorIndex],
        formattedMax: formattedLabels[colorIndex]
      });
      const label = labelFormatter == null ? void 0 : labelFormatter(data);
      if (label === null || label === void 0) {
        return null;
      }
      const isTextBefore = isStart || isExtremes && isFirst;
      const isTextAfter = isEnd || isExtremes && isLast;
      const clickObject = {
        type: "piecewiseColor",
        color: color2,
        label,
        minValue: data.min,
        maxValue: data.max
      };
      const Element = onItemClick ? "button" : "div";
      return (0, import_jsx_runtime25.jsx)("li", {
        children: (0, import_jsx_runtime25.jsxs)(Element, {
          role: onItemClick ? "button" : void 0,
          type: onItemClick ? "button" : void 0,
          onClick: (
            // @ts-ignore onClick is only attached to a button
            onItemClick ? (event) => onItemClick(event, clickObject, index2) : void 0
          ),
          className: clsx_default(classes == null ? void 0 : classes.item, index2 === 0 && `${startClass}`, index2 === orderedColors.length - 1 && `${endClass}`),
          children: [isTextBefore && (0, import_jsx_runtime25.jsx)(ChartsLabel, {
            className: classes == null ? void 0 : classes.label,
            children: label
          }), (0, import_jsx_runtime25.jsx)(ChartsLabelMark, {
            className: classes == null ? void 0 : classes.mark,
            type: markType,
            color: color2
          }), isTextAfter && (0, import_jsx_runtime25.jsx)(ChartsLabel, {
            className: classes == null ? void 0 : classes.label,
            children: label
          })]
        })
      }, colorIndex);
    })
  }));
});
true ? PiecewiseColorLegend.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The axis direction containing the color configuration to represent.
   * @default 'z'
   */
  axisDirection: import_prop_types18.default.oneOf(["x", "y", "z"]),
  /**
   * The id of the axis item with the color configuration to represent.
   * @default The first axis item.
   */
  axisId: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types18.default.object,
  className: import_prop_types18.default.string,
  /**
   * The direction of the legend layout.
   * @default 'horizontal'
   */
  direction: import_prop_types18.default.oneOf(["horizontal", "vertical"]),
  /**
   * Format the legend labels.
   * @param {PiecewiseLabelFormatterParams} params The bound of the piece to format.
   * @returns {string|null} The displayed label, `''` to skip the label but show the color mark, or `null` to skip it entirely.
   */
  labelFormatter: import_prop_types18.default.func,
  /**
   * Where to position the labels relative to the gradient.
   * @default 'extremes'
   */
  labelPosition: import_prop_types18.default.oneOf(["start", "end", "extremes"]),
  /**
   * The type of the mark.
   * @default 'square'
   */
  markType: import_prop_types18.default.oneOf(["square", "circle", "line"]),
  /**
   * Callback fired when a legend item is clicked.
   * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event The click event.
   * @param {PiecewiseColorLegendItemContext} legendItem The legend item data.
   * @param {number} index The index of the clicked legend item.
   */
  onItemClick: import_prop_types18.default.func,
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsAxisHighlight.js
var React47 = __toESM(require_react(), 1);
var import_prop_types19 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/chartsAxisHighlightClasses.js
function getAxisHighlightUtilityClass(slot) {
  return generateUtilityClass("MuiChartsAxisHighlight", slot);
}
var chartsAxisHighlightClasses = generateUtilityClasses("MuiChartsAxisHighlight", ["root"]);

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsYAxisHighlight.js
var React45 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsAxisHighlightPath.js
var ChartsAxisHighlightPath = styled_default("path", {
  name: "MuiChartsAxisHighlight",
  slot: "Root"
})(({
  theme
}) => ({
  pointerEvents: "none",
  variants: [{
    props: {
      axisHighlight: "band"
    },
    style: _extends({
      fill: "white",
      fillOpacity: 0.1
    }, theme.applyStyles("light", {
      fill: "gray"
    }))
  }, {
    props: {
      axisHighlight: "line"
    },
    style: _extends({
      strokeDasharray: "5 2",
      stroke: "#ffffff"
    }, theme.applyStyles("light", {
      stroke: "#000000"
    }))
  }]
}));

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsYAxisHighlight.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
function ChartsYHighlight(props) {
  const {
    type,
    classes
  } = props;
  const {
    left,
    width
  } = useDrawingArea();
  const yScale = useYScale();
  const store = useStore();
  const axisYValue = useSelector(store, selectorChartsInteractionYAxisValue);
  const getYPosition = getValueToPositionMapper(yScale);
  const isBandScaleY = type === "band" && axisYValue !== null && isBandScale(yScale);
  if (true) {
    const isError = isBandScaleY && yScale(axisYValue) === void 0;
    if (isError) {
      console.error([`MUI X: The position value provided for the axis is not valid for the current scale.`, `This probably means something is wrong with the data passed to the chart.`, `The ChartsAxisHighlight component will not be displayed.`].join("\n"));
    }
  }
  return (0, import_jsx_runtime26.jsxs)(React45.Fragment, {
    children: [isBandScaleY && yScale(axisYValue) !== void 0 && (0, import_jsx_runtime26.jsx)(ChartsAxisHighlightPath, {
      d: `M ${left} ${// @ts-expect-error, yScale value is checked in the statement above
      yScale(axisYValue) - (yScale.step() - yScale.bandwidth()) / 2} l 0 ${yScale.step()} l ${width} 0 l 0 ${-yScale.step()} Z`,
      className: classes.root,
      ownerState: {
        axisHighlight: "band"
      }
    }), type === "line" && axisYValue !== null && (0, import_jsx_runtime26.jsx)(ChartsAxisHighlightPath, {
      d: `M ${left} ${getYPosition(axisYValue)} L ${left + width} ${getYPosition(axisYValue)}`,
      className: classes.root,
      ownerState: {
        axisHighlight: "line"
      }
    })]
  });
}

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsXAxisHighlight.js
var React46 = __toESM(require_react(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
function ChartsXHighlight(props) {
  const {
    type,
    classes
  } = props;
  const {
    top,
    height
  } = useDrawingArea();
  const xScale = useXScale();
  const store = useStore();
  const axisXValue = useSelector(store, selectorChartsInteractionXAxisValue);
  const getXPosition = getValueToPositionMapper(xScale);
  const isBandScaleX = type === "band" && axisXValue !== null && isBandScale(xScale);
  if (true) {
    const isError = isBandScaleX && xScale(axisXValue) === void 0;
    if (isError) {
      console.error([`MUI X: The position value provided for the axis is not valid for the current scale.`, `This probably means something is wrong with the data passed to the chart.`, `The ChartsAxisHighlight component will not be displayed.`].join("\n"));
    }
  }
  return (0, import_jsx_runtime27.jsxs)(React46.Fragment, {
    children: [isBandScaleX && xScale(axisXValue) !== void 0 && (0, import_jsx_runtime27.jsx)(
      ChartsAxisHighlightPath,
      {
        d: `M ${xScale(axisXValue) - (xScale.step() - xScale.bandwidth()) / 2} ${top} l ${xScale.step()} 0 l 0 ${height} l ${-xScale.step()} 0 Z`,
        className: classes.root,
        ownerState: {
          axisHighlight: "band"
        }
      }
    ), type === "line" && axisXValue !== null && (0, import_jsx_runtime27.jsx)(ChartsAxisHighlightPath, {
      d: `M ${getXPosition(axisXValue)} ${top} L ${getXPosition(axisXValue)} ${top + height}`,
      className: classes.root,
      ownerState: {
        axisHighlight: "line"
      }
    })]
  });
}

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsAxisHighlight.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses11 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getAxisHighlightUtilityClass);
};
function ChartsAxisHighlight(props) {
  const {
    x: xAxisHighlight,
    y: yAxisHighlight
  } = props;
  const classes = useUtilityClasses11();
  return (0, import_jsx_runtime28.jsxs)(React47.Fragment, {
    children: [xAxisHighlight && (0, import_jsx_runtime28.jsx)(ChartsXHighlight, {
      type: xAxisHighlight,
      classes
    }), yAxisHighlight && (0, import_jsx_runtime28.jsx)(ChartsYHighlight, {
      type: yAxisHighlight,
      classes
    })]
  });
}
true ? ChartsAxisHighlight.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  x: import_prop_types19.default.oneOf(["band", "line", "none"]),
  y: import_prop_types19.default.oneOf(["band", "line", "none"])
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarChart.js
var React68 = __toESM(require_react(), 1);
var import_prop_types26 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarPlot.js
var React55 = __toESM(require_react(), 1);
var import_prop_types23 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/BarChart/barElementClasses.js
function getBarElementUtilityClass(slot) {
  return generateUtilityClass("MuiBarElement", slot);
}
var barElementClasses = generateUtilityClasses("MuiBarElement", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses12 = (ownerState) => {
  const {
    classes,
    id,
    isHighlighted,
    isFaded
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getBarElementUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/BarChart/BarElement.js
var React50 = __toESM(require_react(), 1);
var import_prop_types20 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/useInteractionItemProps.js
var React48 = __toESM(require_react(), 1);
var onPointerDown = (event) => {
  if ("hasPointerCapture" in event.currentTarget && event.currentTarget.hasPointerCapture(event.pointerId)) {
    event.currentTarget.releasePointerCapture(event.pointerId);
  }
};
var useInteractionItemProps = (data, skip) => {
  const {
    instance
  } = useChartContext();
  const interactionActive = React48.useRef(false);
  const onPointerEnter = React48.useCallback(() => {
    interactionActive.current = true;
    instance.setItemInteraction({
      type: data.type,
      seriesId: data.seriesId,
      dataIndex: data.dataIndex
    });
    instance.setHighlight({
      seriesId: data.seriesId,
      dataIndex: data.dataIndex
    });
  }, [instance, data.type, data.seriesId, data.dataIndex]);
  const onPointerLeave = React48.useCallback(() => {
    interactionActive.current = false;
    instance.removeItemInteraction({
      type: data.type,
      seriesId: data.seriesId,
      dataIndex: data.dataIndex
    });
    instance.clearHighlight();
  }, [instance, data.type, data.seriesId, data.dataIndex]);
  React48.useEffect(() => {
    return () => {
      if (interactionActive.current) {
        onPointerLeave();
      }
    };
  }, [onPointerLeave]);
  if (skip) {
    return {};
  }
  return {
    onPointerEnter,
    onPointerLeave,
    onPointerDown
  };
};
var useInteractionAllItemProps = (data, skip) => {
  const {
    instance
  } = useChartContext();
  const results = React48.useMemo(() => {
    return data.map((item) => {
      if (skip) {
        return {};
      }
      const onPointerEnter = () => {
        if (!item) {
          return;
        }
        instance.setItemInteraction(item);
        instance.setHighlight({
          seriesId: item.seriesId,
          dataIndex: item.dataIndex
        });
      };
      const onPointerLeave = () => {
        if (!item) {
          return;
        }
        instance.removeItemInteraction(item);
        instance.clearHighlight();
      };
      return {
        onPointerEnter,
        onPointerLeave,
        onPointerDown
      };
    });
  }, [data, instance, skip]);
  return results;
};

// node_modules/@mui/x-charts/esm/BarChart/AnimatedBarElement.js
var React49 = __toESM(require_react(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var _excluded15 = ["ownerState", "skipAnimation", "id", "dataIndex", "xOrigin", "yOrigin"];
function AnimatedBarElement(props) {
  const {
    ownerState
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const animatedProps = useAnimateBar(props);
  return (0, import_jsx_runtime29.jsx)("rect", _extends({}, other, {
    filter: ownerState.isHighlighted ? "brightness(120%)" : void 0,
    opacity: ownerState.isFaded ? 0.3 : 1
  }, animatedProps));
}

// node_modules/@mui/x-charts/esm/BarChart/BarElement.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var _excluded16 = ["id", "dataIndex", "classes", "color", "slots", "slotProps", "style", "onClick", "skipAnimation", "layout", "x", "xOrigin", "y", "yOrigin", "width", "height"];
function BarElement(props) {
  const {
    id,
    dataIndex,
    classes: innerClasses,
    color: color2,
    slots,
    slotProps,
    style,
    onClick,
    skipAnimation,
    layout,
    x: x2,
    xOrigin,
    y: y2,
    yOrigin,
    width,
    height
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const interactionProps = useInteractionItemProps({
    type: "bar",
    seriesId: id,
    dataIndex
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id,
    dataIndex
  });
  const ownerState = {
    id,
    dataIndex,
    classes: innerClasses,
    color: color2,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses12(ownerState);
  const Bar = (slots == null ? void 0 : slots.bar) ?? AnimatedBarElement;
  const barProps = useSlotProps_default({
    elementType: Bar,
    externalSlotProps: slotProps == null ? void 0 : slotProps.bar,
    externalForwardedProps: other,
    additionalProps: _extends({}, interactionProps, {
      id,
      dataIndex,
      color: color2,
      x: x2,
      xOrigin,
      y: y2,
      yOrigin,
      width,
      height,
      style,
      onClick,
      cursor: onClick ? "pointer" : "unset",
      stroke: "none",
      fill: color2,
      skipAnimation,
      layout
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime30.jsx)(Bar, _extends({}, barProps));
}
true ? BarElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types20.default.object,
  dataIndex: import_prop_types20.default.number.isRequired,
  id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
  layout: import_prop_types20.default.oneOf(["horizontal", "vertical"]).isRequired,
  skipAnimation: import_prop_types20.default.bool.isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types20.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types20.default.object,
  xOrigin: import_prop_types20.default.number.isRequired,
  yOrigin: import_prop_types20.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarClipPath.js
var React51 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/BarChart/getRadius.js
var getRadius = (corner, {
  hasNegative,
  hasPositive,
  borderRadius,
  layout
}) => {
  if (!borderRadius) {
    return 0;
  }
  const isVertical = layout === "vertical";
  if (corner === "top-left" && (isVertical && hasPositive || !isVertical && hasNegative)) {
    return borderRadius;
  }
  if (corner === "top-right" && (isVertical && hasPositive || !isVertical && hasPositive)) {
    return borderRadius;
  }
  if (corner === "bottom-right" && (isVertical && hasNegative || !isVertical && hasPositive)) {
    return borderRadius;
  }
  if (corner === "bottom-left" && (isVertical && hasNegative || !isVertical && hasNegative)) {
    return borderRadius;
  }
  return 0;
};

// node_modules/@mui/x-charts/esm/BarChart/BarClipPath.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var _excluded17 = ["maskId", "x", "y", "width", "height", "skipAnimation"];
function buildClipPath(size, borderRadius, ownerState) {
  const radiusData = _extends({}, ownerState, {
    borderRadius
  });
  const topLeft = Math.min(size, getRadius("top-left", radiusData));
  const topRight = Math.min(size, getRadius("top-right", radiusData));
  const bottomRight = Math.min(size, getRadius("bottom-right", radiusData));
  const bottomLeft = Math.min(size, getRadius("bottom-left", radiusData));
  return `inset(0px round ${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px)`;
}
function barClipRectPropsInterpolator(from, to) {
  const interpolateX = number_default(from.x, to.x);
  const interpolateY = number_default(from.y, to.y);
  const interpolateWidth = number_default(from.width, to.width);
  const interpolateHeight = number_default(from.height, to.height);
  const interpolateBorderRadius = number_default(from.borderRadius, to.borderRadius);
  return (t) => {
    return {
      x: interpolateX(t),
      y: interpolateY(t),
      width: interpolateWidth(t),
      height: interpolateHeight(t),
      borderRadius: interpolateBorderRadius(t)
    };
  };
}
function useAnimateBarClipRect(props) {
  const initialProps = {
    x: props.x,
    y: props.y + (props.ownerState.layout === "vertical" ? props.height : 0),
    width: props.ownerState.layout === "vertical" ? props.width : 0,
    height: props.ownerState.layout === "vertical" ? 0 : props.height,
    borderRadius: props.borderRadius
  };
  return useAnimate({
    x: props.x,
    y: props.y,
    width: props.width,
    height: props.height,
    borderRadius: props.borderRadius
  }, {
    createInterpolator: barClipRectPropsInterpolator,
    transformProps: (p) => ({
      x: p.x,
      y: p.y,
      width: p.width,
      height: p.height,
      style: {
        clipPath: buildClipPath(props.ownerState.layout === "vertical" ? p.height : p.width, p.borderRadius, props.ownerState)
      }
    }),
    applyProps(element, animatedProps) {
      element.setAttribute("x", animatedProps.x.toString());
      element.setAttribute("y", animatedProps.y.toString());
      element.setAttribute("width", animatedProps.width.toString());
      element.setAttribute("height", animatedProps.height.toString());
      element.style.clipPath = animatedProps.style.clipPath;
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}
function BarClipRect(props) {
  const animatedProps = useAnimateBarClipRect(_extends({}, props, {
    borderRadius: props.ownerState.borderRadius ?? 0
  }));
  return (0, import_jsx_runtime31.jsx)("rect", _extends({}, animatedProps));
}
function BarClipPath(props) {
  const {
    maskId,
    x: x2,
    y: y2,
    width,
    height,
    skipAnimation
  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded17);
  if (!props.borderRadius || props.borderRadius <= 0) {
    return null;
  }
  return (0, import_jsx_runtime31.jsx)("clipPath", {
    id: maskId,
    children: (0, import_jsx_runtime31.jsx)(BarClipRect, {
      ownerState: rest,
      x: x2,
      y: y2,
      width,
      height,
      skipAnimation
    })
  });
}

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelPlot.js
var React54 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelItem.js
var React53 = __toESM(require_react(), 1);
var import_prop_types22 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/barLabelClasses.js
function getBarLabelUtilityClass(slot) {
  return generateUtilityClass("MuiBarLabel", slot);
}
var barLabelClasses = generateUtilityClasses("MuiBarLabel", ["root", "highlighted", "faded", "animate"]);
var useUtilityClasses13 = (ownerState) => {
  const {
    classes,
    seriesId,
    isFaded,
    isHighlighted,
    skipAnimation
  } = ownerState;
  const slots = {
    root: ["root", `series-${seriesId}`, isHighlighted && "highlighted", isFaded && "faded", !skipAnimation && "animate"]
  };
  return composeClasses(slots, getBarLabelUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/getBarLabel.js
var getBarLabel = (options) => {
  const {
    barLabel,
    value,
    dataIndex,
    seriesId,
    height,
    width
  } = options;
  if (barLabel === "value") {
    return value ? value == null ? void 0 : value.toString() : null;
  }
  return barLabel({
    seriesId,
    dataIndex,
    value
  }, {
    bar: {
      height,
      width
    }
  });
};

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabel.js
var React52 = __toESM(require_react(), 1);
var import_prop_types21 = __toESM(require_prop_types(), 1);
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var _excluded18 = ["seriesId", "dataIndex", "color", "isFaded", "isHighlighted", "classes", "skipAnimation", "layout", "xOrigin", "yOrigin"];
var BarLabelComponent = styled_default("text", {
  name: "MuiBarLabel",
  slot: "Root",
  overridesResolver: (_, styles) => [{
    [`&.${barLabelClasses.faded}`]: styles.faded
  }, {
    [`&.${barLabelClasses.highlighted}`]: styles.highlighted
  }, styles.root]
})(({
  theme
}) => {
  var _a, _b, _c, _d;
  return _extends({}, (_a = theme == null ? void 0 : theme.typography) == null ? void 0 : _a.body2, {
    stroke: "none",
    fill: (_d = (_c = (_b = theme.vars || theme) == null ? void 0 : _b.palette) == null ? void 0 : _c.text) == null ? void 0 : _d.primary,
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in",
    textAnchor: "middle",
    dominantBaseline: "central",
    pointerEvents: "none",
    opacity: 1,
    [`&.${barLabelClasses.faded}`]: {
      opacity: 0.3
    }
  });
});
function BarLabel(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiBarLabel"
  });
  const otherProps = _objectWithoutPropertiesLoose(props, _excluded18);
  const animatedProps = useAnimateBarLabel(props);
  return (0, import_jsx_runtime32.jsx)(BarLabelComponent, _extends({}, otherProps, animatedProps));
}
true ? BarLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types21.default.object,
  dataIndex: import_prop_types21.default.number.isRequired,
  /**
   * Height of the bar this label belongs to.
   */
  height: import_prop_types21.default.number.isRequired,
  isFaded: import_prop_types21.default.bool.isRequired,
  isHighlighted: import_prop_types21.default.bool.isRequired,
  layout: import_prop_types21.default.oneOf(["horizontal", "vertical"]).isRequired,
  seriesId: import_prop_types21.default.oneOfType([import_prop_types21.default.number, import_prop_types21.default.string]).isRequired,
  skipAnimation: import_prop_types21.default.bool.isRequired,
  /**
   * Width of the bar this label belongs to.
   */
  width: import_prop_types21.default.number.isRequired,
  /**
   * Position in the x-axis of the bar this label belongs to.
   */
  x: import_prop_types21.default.number.isRequired,
  /**
   * The x-coordinate of the stack this bar label belongs to.
   */
  xOrigin: import_prop_types21.default.number.isRequired,
  /**
   * Position in the y-axis of the bar this label belongs to.
   */
  y: import_prop_types21.default.number.isRequired,
  /**
   * The y-coordinate of the stack this bar label belongs to.
   */
  yOrigin: import_prop_types21.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelItem.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var _excluded19 = ["seriesId", "classes", "color", "dataIndex", "barLabel", "slots", "slotProps", "xOrigin", "yOrigin", "x", "y", "width", "height", "value", "skipAnimation", "layout"];
var _excluded24 = ["ownerState"];
function BarLabelItem(props) {
  const {
    seriesId,
    classes: innerClasses,
    color: color2,
    dataIndex,
    barLabel,
    slots,
    slotProps,
    xOrigin,
    yOrigin,
    x: x2,
    y: y2,
    width,
    height,
    value,
    skipAnimation,
    layout
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId,
    dataIndex
  });
  const ownerState = {
    seriesId,
    classes: innerClasses,
    color: color2,
    isFaded,
    isHighlighted,
    dataIndex,
    skipAnimation,
    layout
  };
  const classes = useUtilityClasses13(ownerState);
  const Component = (slots == null ? void 0 : slots.barLabel) ?? BarLabel;
  const _useSlotProps = useSlotProps_default({
    elementType: Component,
    externalSlotProps: slotProps == null ? void 0 : slotProps.barLabel,
    additionalProps: _extends({}, other, {
      xOrigin,
      yOrigin,
      x: x2,
      y: y2,
      width,
      height,
      className: classes.root
    }),
    ownerState
  }), {
    ownerState: barLabelOwnerState
  } = _useSlotProps, barLabelProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded24);
  if (!barLabel) {
    return null;
  }
  const formattedLabelText = getBarLabel({
    barLabel,
    value,
    dataIndex,
    seriesId,
    height,
    width
  });
  if (!formattedLabelText) {
    return null;
  }
  return (0, import_jsx_runtime33.jsx)(Component, _extends({}, barLabelProps, barLabelOwnerState, {
    children: formattedLabelText
  }));
}
true ? BarLabelItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If provided, the function will be used to format the label of the bar.
   * It can be set to 'value' to display the current value.
   * @param {BarItem} item The item to format.
   * @param {BarLabelContext} context data about the bar.
   * @returns {string} The formatted label.
   */
  barLabel: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["value"]), import_prop_types22.default.func]),
  classes: import_prop_types22.default.object,
  color: import_prop_types22.default.string.isRequired,
  dataIndex: import_prop_types22.default.number.isRequired,
  /**
   * The height of the bar.
   */
  height: import_prop_types22.default.number.isRequired,
  seriesId: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types22.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types22.default.object,
  /**
   * The value of the data point.
   */
  value: import_prop_types22.default.number,
  /**
   * The width of the bar.
   */
  width: import_prop_types22.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelPlot.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var _excluded20 = ["bars", "skipAnimation"];
function BarLabelPlot(props) {
  const {
    bars,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  return (0, import_jsx_runtime34.jsx)(React54.Fragment, {
    children: bars.map(({
      xOrigin,
      yOrigin,
      x: x2,
      y: y2,
      seriesId,
      dataIndex,
      color: color2,
      value,
      width,
      height,
      layout
    }) => (0, import_jsx_runtime34.jsx)(BarLabelItem, _extends({
      seriesId,
      dataIndex,
      value,
      color: color2,
      xOrigin,
      yOrigin,
      x: x2,
      y: y2,
      width,
      height,
      skipAnimation: skipAnimation ?? false,
      layout: layout ?? "vertical"
    }, other), `${seriesId}-${dataIndex}`))
  });
}

// node_modules/@mui/x-charts/esm/BarChart/checkScaleErrors.js
var getAxisMessage = (axisDirection, axisId) => {
  const axisName = `${axisDirection}-axis`;
  const axisIdName = `${axisDirection}Axis`;
  const axisDefaultKey = axisDirection === "x" ? DEFAULT_X_AXIS_KEY : DEFAULT_Y_AXIS_KEY;
  return axisId === axisDefaultKey ? `The first \`${axisIdName}\`` : `The ${axisName} with id "${axisId}"`;
};
function checkScaleErrors(verticalLayout, seriesId, series, xAxisId, xAxis, yAxisId, yAxis) {
  const xAxisConfig = xAxis[xAxisId];
  const yAxisConfig = yAxis[yAxisId];
  const discreteAxisConfig = verticalLayout ? xAxisConfig : yAxisConfig;
  const continuousAxisConfig = verticalLayout ? yAxisConfig : xAxisConfig;
  const discreteAxisId = verticalLayout ? xAxisId : yAxisId;
  const continuousAxisId = verticalLayout ? yAxisId : xAxisId;
  const discreteAxisDirection = verticalLayout ? "x" : "y";
  const continuousAxisDirection = verticalLayout ? "y" : "x";
  if (!isBandScaleConfig(discreteAxisConfig)) {
    throw new Error(`MUI X: ${getAxisMessage(discreteAxisDirection, discreteAxisId)} should be of type "band" to display the bar series of id "${seriesId}".`);
  }
  if (discreteAxisConfig.data === void 0) {
    throw new Error(`MUI X: ${getAxisMessage(discreteAxisDirection, discreteAxisId)} should have data property.`);
  }
  if (isBandScaleConfig(continuousAxisConfig) || isPointScaleConfig(continuousAxisConfig)) {
    throw new Error(`MUI X: ${getAxisMessage(continuousAxisDirection, continuousAxisId)} should be a continuous type to display the bar series of id "${seriesId}".`);
  }
  if (true) {
    if (discreteAxisConfig.data.length < series.stackedData.length) {
      warnOnce([`MUI X: ${getAxisMessage(discreteAxisDirection, discreteAxisId)} has less data (${discreteAxisConfig.data.length} values) than the bar series of id "${seriesId}" (${series.stackedData.length} values).`, "The axis data should have at least the same length than the series using it."], "error");
    }
  }
}

// node_modules/@mui/x-charts/esm/hooks/useSkipAnimation.js
function useSkipAnimation(skipAnimation) {
  const store = useStore();
  const storeSkipAnimation = useSelector(store, selectorChartSkipAnimation);
  return skipAnimation || storeSkipAnimation;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useInternalIsZoomInteracting.js
function useInternalIsZoomInteracting() {
  const store = useStore();
  const isInteracting = useSelector(store, selectorChartZoomIsInteracting);
  return isInteracting;
}

// node_modules/@mui/x-charts/esm/BarChart/BarPlot.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var _excluded21 = ["skipAnimation", "onItemClick", "borderRadius", "barLabel"];
function getBandSize({
  bandWidth: W,
  numberOfGroups: N,
  gapRatio: r
}) {
  if (r === 0) {
    return {
      barWidth: W / N,
      offset: 0
    };
  }
  const barWidth = W / (N + (N - 1) * r);
  const offset = r * barWidth;
  return {
    barWidth,
    offset
  };
}
var useAggregatedData = () => {
  const seriesData = useBarSeriesContext() ?? {
    series: {},
    stackingGroups: [],
    seriesOrder: []
  };
  const drawingArea = useDrawingArea();
  const chartId = useChartId2();
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const masks = {};
  const data = stackingGroups.flatMap(({
    ids: groupIds
  }, groupIndex) => {
    const xMin = drawingArea.left;
    const xMax = drawingArea.left + drawingArea.width;
    const yMin = drawingArea.top;
    const yMax = drawingArea.top + drawingArea.height;
    return groupIds.flatMap((seriesId) => {
      const xAxisId = series[seriesId].xAxisId ?? defaultXAxisId;
      const yAxisId = series[seriesId].yAxisId ?? defaultYAxisId;
      const xAxisConfig = xAxis[xAxisId];
      const yAxisConfig = yAxis[yAxisId];
      const verticalLayout = series[seriesId].layout === "vertical";
      checkScaleErrors(verticalLayout, seriesId, series[seriesId], xAxisId, xAxis, yAxisId, yAxis);
      const baseScaleConfig = verticalLayout ? xAxisConfig : yAxisConfig;
      const xScale = xAxisConfig.scale;
      const yScale = yAxisConfig.scale;
      const colorGetter = getColor_default(series[seriesId], xAxis[xAxisId], yAxis[yAxisId]);
      const bandWidth = baseScaleConfig.scale.bandwidth();
      const {
        barWidth,
        offset
      } = getBandSize({
        bandWidth,
        numberOfGroups: stackingGroups.length,
        gapRatio: baseScaleConfig.barGapRatio
      });
      const barOffset = groupIndex * (barWidth + offset);
      const {
        stackedData,
        data: currentSeriesData,
        layout
      } = series[seriesId];
      return baseScaleConfig.data.map((baseValue, dataIndex) => {
        if (currentSeriesData[dataIndex] == null) {
          return null;
        }
        const values = stackedData[dataIndex];
        const valueCoordinates = values.map((v2) => verticalLayout ? yScale(v2) : xScale(v2));
        const minValueCoord = Math.round(Math.min(...valueCoordinates));
        const maxValueCoord = Math.round(Math.max(...valueCoordinates));
        const stackId = series[seriesId].stack;
        const result = {
          seriesId,
          dataIndex,
          layout,
          x: verticalLayout ? xScale(baseValue) + barOffset : minValueCoord,
          y: verticalLayout ? minValueCoord : yScale(baseValue) + barOffset,
          xOrigin: xScale(0) ?? 0,
          yOrigin: yScale(0) ?? 0,
          height: verticalLayout ? maxValueCoord - minValueCoord : barWidth,
          width: verticalLayout ? barWidth : maxValueCoord - minValueCoord,
          color: colorGetter(dataIndex),
          value: currentSeriesData[dataIndex],
          maskId: `${chartId}_${stackId || seriesId}_${groupIndex}_${dataIndex}`
        };
        if (result.x > xMax || result.x + result.width < xMin || result.y > yMax || result.y + result.height < yMin) {
          return null;
        }
        if (!masks[result.maskId]) {
          masks[result.maskId] = {
            id: result.maskId,
            width: 0,
            height: 0,
            hasNegative: false,
            hasPositive: false,
            layout: result.layout,
            xOrigin: xScale(0),
            yOrigin: yScale(0),
            x: 0,
            y: 0
          };
        }
        const mask = masks[result.maskId];
        mask.width = result.layout === "vertical" ? result.width : mask.width + result.width;
        mask.height = result.layout === "vertical" ? mask.height + result.height : result.height;
        mask.x = Math.min(mask.x === 0 ? Infinity : mask.x, result.x);
        mask.y = Math.min(mask.y === 0 ? Infinity : mask.y, result.y);
        mask.hasNegative = mask.hasNegative || (result.value ?? 0) < 0;
        mask.hasPositive = mask.hasPositive || (result.value ?? 0) > 0;
        return result;
      }).filter((rectangle) => rectangle !== null);
    });
  });
  return {
    completedData: data,
    masksData: Object.values(masks)
  };
};
var BarPlotRoot = styled_default("g", {
  name: "MuiBarPlot",
  slot: "Root"
})({
  [`& .${barElementClasses.root}`]: {
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in"
  }
});
function BarPlot(props) {
  const {
    completedData,
    masksData
  } = useAggregatedData();
  const {
    skipAnimation: inSkipAnimation,
    onItemClick,
    borderRadius,
    barLabel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const withoutBorderRadius = !borderRadius || borderRadius <= 0;
  return (0, import_jsx_runtime35.jsxs)(BarPlotRoot, {
    children: [!withoutBorderRadius && masksData.map(({
      id,
      x: x2,
      y: y2,
      width,
      height,
      hasPositive,
      hasNegative,
      layout
    }) => {
      return (0, import_jsx_runtime35.jsx)(BarClipPath, {
        maskId: id,
        borderRadius,
        hasNegative,
        hasPositive,
        layout,
        x: x2,
        y: y2,
        width,
        height,
        skipAnimation: skipAnimation ?? false
      }, id);
    }), completedData.map(({
      seriesId,
      dataIndex,
      color: color2,
      maskId,
      layout,
      x: x2,
      xOrigin,
      y: y2,
      yOrigin,
      width,
      height
    }) => {
      const barElement = (0, import_jsx_runtime35.jsx)(BarElement, _extends({
        id: seriesId,
        dataIndex,
        color: color2,
        skipAnimation: skipAnimation ?? false,
        layout: layout ?? "vertical",
        x: x2,
        xOrigin,
        y: y2,
        yOrigin,
        width,
        height
      }, other, {
        onClick: onItemClick && ((event) => {
          onItemClick(event, {
            type: "bar",
            seriesId,
            dataIndex
          });
        })
      }), `${seriesId}-${dataIndex}`);
      if (withoutBorderRadius) {
        return barElement;
      }
      return (0, import_jsx_runtime35.jsx)("g", {
        clipPath: `url(#${maskId})`,
        children: barElement
      }, `${seriesId}-${dataIndex}`);
    }), barLabel && (0, import_jsx_runtime35.jsx)(BarLabelPlot, _extends({
      bars: completedData,
      skipAnimation,
      barLabel
    }, other))]
  });
}
true ? BarPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If provided, the function will be used to format the label of the bar.
   * It can be set to 'value' to display the current value.
   * @param {BarItem} item The item to format.
   * @param {BarLabelContext} context data about the bar.
   * @returns {string} The formatted label.
   */
  barLabel: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["value"]), import_prop_types23.default.func]),
  /**
   * Defines the border radius of the bar element.
   */
  borderRadius: import_prop_types23.default.number,
  /**
   * Callback fired when a bar item is clicked.
   * @param {React.MouseEvent<SVGElement, MouseEvent>} event The event source of the callback.
   * @param {BarItemIdentifier} barItemIdentifier The bar item identifier.
   */
  onItemClick: import_prop_types23.default.func,
  /**
   * If `true`, animations are skipped.
   * @default undefined
   */
  skipAnimation: import_prop_types23.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types23.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types23.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsOverlay.js
var React58 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsLoadingOverlay.js
var React56 = __toESM(require_react(), 1);
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var _excluded25 = ["message"];
var StyledText = styled_default("text")(({
  theme
}) => _extends({}, theme.typography.body2, {
  stroke: "none",
  fill: (theme.vars || theme).palette.text.primary,
  shapeRendering: "crispEdges",
  textAnchor: "middle",
  dominantBaseline: "middle"
}));
function ChartsLoadingOverlay(props) {
  const {
    message
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const {
    top,
    left,
    height,
    width
  } = useDrawingArea();
  const {
    localeText
  } = useChartsLocalization();
  return (0, import_jsx_runtime36.jsx)(StyledText, _extends({
    x: left + width / 2,
    y: top + height / 2
  }, other, {
    children: message ?? localeText.loading
  }));
}

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsNoDataOverlay.js
var React57 = __toESM(require_react(), 1);
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var _excluded26 = ["message"];
var StyledText2 = styled_default("text")(({
  theme
}) => _extends({}, theme.typography.body2, {
  stroke: "none",
  fill: (theme.vars || theme).palette.text.primary,
  shapeRendering: "crispEdges",
  textAnchor: "middle",
  dominantBaseline: "middle"
}));
function ChartsNoDataOverlay(props) {
  const {
    message
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const {
    top,
    left,
    height,
    width
  } = useDrawingArea();
  const {
    localeText
  } = useChartsLocalization();
  return (0, import_jsx_runtime37.jsx)(StyledText2, _extends({
    x: left + width / 2,
    y: top + height / 2
  }, other, {
    children: message ?? localeText.noData
  }));
}

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsOverlay.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
function useNoData() {
  const seriesPerType = useSeries();
  return Object.values(seriesPerType).every((seriesOfGivenType) => {
    if (!seriesOfGivenType) {
      return true;
    }
    const {
      series,
      seriesOrder
    } = seriesOfGivenType;
    return seriesOrder.every((seriesId) => series[seriesId].data.length === 0);
  });
}
function ChartsOverlay(props) {
  var _a, _b, _c, _d;
  const noData = useNoData();
  if (props.loading) {
    const LoadingOverlay = ((_a = props.slots) == null ? void 0 : _a.loadingOverlay) ?? ChartsLoadingOverlay;
    return (0, import_jsx_runtime38.jsx)(LoadingOverlay, _extends({}, (_b = props.slotProps) == null ? void 0 : _b.loadingOverlay));
  }
  if (noData) {
    const NoDataOverlay = ((_c = props.slots) == null ? void 0 : _c.noDataOverlay) ?? ChartsNoDataOverlay;
    return (0, import_jsx_runtime38.jsx)(NoDataOverlay, _extends({}, (_d = props.slotProps) == null ? void 0 : _d.noDataOverlay));
  }
  return null;
}

// node_modules/@mui/x-charts/esm/BarChart/useBarChartProps.js
var React59 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarChart.plugins.js
var BAR_CHART_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/BarChart/useBarChartProps.js
var _excluded27 = ["xAxis", "yAxis", "series", "width", "height", "margin", "colors", "dataset", "sx", "axisHighlight", "grid", "children", "slots", "slotProps", "skipAnimation", "loading", "layout", "onItemClick", "highlightedItem", "onHighlightChange", "borderRadius", "barLabel", "className", "hideLegend"];
var useBarChartProps = (props) => {
  var _a, _b, _c, _d, _e;
  const {
    xAxis,
    yAxis,
    series,
    width,
    height,
    margin,
    colors,
    dataset,
    sx,
    axisHighlight,
    grid,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    layout,
    onItemClick,
    highlightedItem,
    onHighlightChange,
    borderRadius,
    barLabel,
    className
  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded27);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const hasHorizontalSeries = layout === "horizontal" || layout === void 0 && series.some((item) => item.layout === "horizontal");
  const defaultBandXAxis = React59.useMemo(() => [{
    id: DEFAULT_X_AXIS_KEY,
    scaleType: "band",
    data: Array.from({
      length: Math.max(...series.map((s2) => (s2.data ?? dataset ?? []).length))
    }, (_, index2) => index2)
  }], [dataset, series]);
  const defaultBandYAxis = React59.useMemo(() => [{
    id: DEFAULT_Y_AXIS_KEY,
    scaleType: "band",
    data: Array.from({
      length: Math.max(...series.map((s2) => (s2.data ?? dataset ?? []).length))
    }, (_, index2) => index2)
  }], [dataset, series]);
  const seriesWithDefault = React59.useMemo(() => series.map((s2) => _extends({
    type: "bar"
  }, s2, {
    layout: hasHorizontalSeries ? "horizontal" : "vertical"
  })), [hasHorizontalSeries, series]);
  const chartContainerProps = _extends({}, rest, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    dataset,
    xAxis: xAxis ?? (hasHorizontalSeries ? void 0 : defaultBandXAxis),
    yAxis: yAxis ?? (hasHorizontalSeries ? defaultBandYAxis : void 0),
    highlightedItem,
    onHighlightChange,
    disableAxisListener: ((_a = slotProps == null ? void 0 : slotProps.tooltip) == null ? void 0 : _a.trigger) !== "axis" && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    className,
    skipAnimation,
    plugins: BAR_CHART_PLUGINS
  });
  const barPlotProps = {
    onItemClick,
    slots,
    slotProps,
    borderRadius,
    barLabel
  };
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const clipPathGroupProps = {
    clipPath: `url(#${clipPathId})`
  };
  const clipPathProps = {
    id: clipPathId
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({}, hasHorizontalSeries ? {
    y: "band"
  } : {
    x: "band"
  }, axisHighlight);
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx,
    legendPosition: (_c = (_b = props.slotProps) == null ? void 0 : _b.legend) == null ? void 0 : _c.position,
    legendDirection: (_e = (_d = props.slotProps) == null ? void 0 : _d.legend) == null ? void 0 : _e.direction
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    barPlotProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/ChartDataProvider/ChartDataProvider.js
var React61 = __toESM(require_react(), 1);
var import_prop_types24 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartVoronoi/useChartVoronoi.js
var React60 = __toESM(require_react(), 1);

// node_modules/robust-predicates/esm/util.js
var epsilon4 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon4) * epsilon4;
function sum3(elen, e, flen, f, h) {
  let Q, Qnew, hh, bvirt;
  let enow = e[0];
  let fnow = f[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q = enow;
    enow = e[++eindex];
  } else {
    Q = fnow;
    fnow = f[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q;
      hh = Q - (Qnew - enow);
      enow = e[++eindex];
    } else {
      Qnew = fnow + Q;
      hh = Q - (Qnew - fnow);
      fnow = f[++findex];
    }
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
      } else {
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q + enow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (enow - bvirt);
    enow = e[++eindex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q + fnow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f[++findex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  if (Q !== 0 || hindex === 0) {
    h[hindex++] = Q;
  }
  return hindex;
}
function estimate(elen, e) {
  let Q = e[0];
  for (let i = 1; i < elen; i++) Q += e[i];
  return Q;
}
function vec(n) {
  return new Float64Array(n);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon4) * epsilon4;
var ccwerrboundB = (2 + 12 * epsilon4) * epsilon4;
var ccwerrboundC = (9 + 64 * epsilon4) * epsilon4 * epsilon4;
var B2 = vec(4);
var C1 = vec(8);
var C2 = vec(12);
var D2 = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c2, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t13, t03, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c2 = splitter * acx;
  ahi = c2 - (c2 - acx);
  alo = acx - ahi;
  c2 = splitter * bcy;
  bhi = c2 - (c2 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcx;
  c2 = splitter * acy;
  ahi = c2 - (c2 - acy);
  alo = acy - ahi;
  c2 = splitter * bcx;
  bhi = c2 - (c2 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  B2[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  B2[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B2[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B2[3] = u32;
  let det = estimate(4, B2);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound) return det;
  s1 = acxtail * bcy;
  c2 = splitter * acxtail;
  ahi = c2 - (c2 - acxtail);
  alo = acxtail - ahi;
  c2 = splitter * bcy;
  bhi = c2 - (c2 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcx;
  c2 = splitter * acytail;
  ahi = c2 - (c2 - acytail);
  alo = acytail - ahi;
  c2 = splitter * bcx;
  bhi = c2 - (c2 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum3(4, B2, 4, u, C1);
  s1 = acx * bcytail;
  c2 = splitter * acx;
  ahi = c2 - (c2 - acx);
  alo = acx - ahi;
  c2 = splitter * bcytail;
  bhi = c2 - (c2 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcxtail;
  c2 = splitter * acy;
  ahi = c2 - (c2 - acy);
  alo = acy - ahi;
  c2 = splitter * bcxtail;
  bhi = c2 - (c2 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum3(C1len, C1, 4, u, C2);
  s1 = acxtail * bcytail;
  c2 = splitter * acxtail;
  ahi = c2 - (c2 - acxtail);
  alo = acxtail - ahi;
  c2 = splitter * bcytail;
  bhi = c2 - (c2 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcxtail;
  c2 = splitter * acytail;
  ahi = c2 - (c2 - acytail);
  alo = acytail - ahi;
  c2 = splitter * bcxtail;
  bhi = c2 - (c2 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum3(C2len, C2, 4, u, D2);
  return D2[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum) return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon4) * epsilon4;
var o3derrboundB = (3 + 28 * epsilon4) * epsilon4;
var o3derrboundC = (26 + 288 * epsilon4) * epsilon4 * epsilon4;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon4) * epsilon4;
var iccerrboundB = (4 + 48 * epsilon4) * epsilon4;
var iccerrboundC = (44 + 576 * epsilon4) * epsilon4 * epsilon4;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon4) * epsilon4;
var isperrboundB = (5 + 72 * epsilon4) * epsilon4;
var isperrboundC = (71 + 1408 * epsilon4) * epsilon4 * epsilon4;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n = points.length;
    const coords = new Float64Array(n * 2);
    for (let i = 0; i < n; i++) {
      const p = points[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < n; i++) {
      const x2 = coords[2 * i];
      const y2 = coords[2 * i + 1];
      if (x2 < minX) minX = x2;
      if (y2 < minY) minY = y2;
      if (x2 > maxX) maxX = x2;
      if (y2 > maxY) maxY = y2;
      this._ids[i] = i;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let i0, i1, i2;
    for (let i = 0, minDist = Infinity; i < n; i++) {
      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    for (let i = 0, minDist = Infinity; i < n; i++) {
      if (i === i0) continue;
      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1) continue;
      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
      if (r < minRadius) {
        i2 = i;
        minRadius = r;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;
      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id = this._ids[i];
        const d = this._dists[id];
        if (d > d0) {
          hull[j++] = id;
          d0 = d;
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i = i1;
      const x2 = i1x;
      const y2 = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x2;
      i2y = y2;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i = 0; i < n; i++) {
      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k2 = 0, xp, yp; k2 < this._ids.length; k2++) {
      const i = this._ids[k2];
      const x2 = coords[2 * i];
      const y2 = coords[2 * i + 1];
      if (k2 > 0 && Math.abs(x2 - xp) <= EPSILON && Math.abs(y2 - yp) <= EPSILON) continue;
      xp = x2;
      yp = y2;
      if (i === i0 || i === i1 || i === i2) continue;
      let start = 0;
      for (let j = 0, key = this._hashKey(x2, y2); j < this._hashSize; j++) {
        start = hullHash[(key + j) % this._hashSize];
        if (start !== -1 && start !== hullNext[start]) break;
      }
      start = hullPrev[start];
      let e = start, q;
      while (q = hullNext[e], orient2d(x2, y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
        e = q;
        if (e === start) {
          e = -1;
          break;
        }
      }
      if (e === -1) continue;
      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
      hullTri[i] = this._legalize(t + 2);
      hullTri[e] = t;
      hullSize++;
      let n2 = hullNext[e];
      while (q = hullNext[n2], orient2d(x2, y2, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
        t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
        hullTri[i] = this._legalize(t + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q;
      }
      if (e === start) {
        while (q = hullPrev[e], orient2d(x2, y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
          this._legalize(t + 2);
          hullTri[q] = t;
          hullNext[e] = e;
          hullSize--;
          e = q;
        }
      }
      this._hullStart = hullPrev[i] = e;
      hullNext[e] = hullPrev[n2] = i;
      hullNext[i] = n2;
      hullHash[this._hashKey(x2, y2)] = i;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i = 0, e = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e;
      e = hullNext[e];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x2, y2) {
    return Math.floor(pseudoAngle(x2 - this._cx, y2 - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a2) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i = 0;
    let ar = 0;
    while (true) {
      const b = halfedges[a2];
      const a0 = a2 - a2 % 3;
      ar = a0 + (a2 + 2) % 3;
      if (b === -1) {
        if (i === 0) break;
        a2 = EDGE_STACK[--i];
        continue;
      }
      const b0 = b - b % 3;
      const al = a0 + (a2 + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p0 = triangles[ar];
      const pr = triangles[a2];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a2] = p1;
        triangles[b] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e = this._hullStart;
          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a2;
              break;
            }
            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }
        this._link(a2, hbl);
        this._link(b, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b + 1) % 3;
        if (i < EDGE_STACK.length) {
          EDGE_STACK[i++] = br;
        }
      } else {
        if (i === 0) break;
        a2 = EDGE_STACK[--i];
      }
    }
    return ar;
  }
  _link(a2, b) {
    this._halfedges[a2] = b;
    if (b !== -1) this._halfedges[b] = a2;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i2, a2, b, c2) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;
    this._link(t, a2);
    this._link(t + 1, b);
    this._link(t + 2, c2);
    this.trianglesLen += 3;
    return t;
  }
};
function pseudoAngle(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x2 = (ey * bl - dy * cl) * d;
  const y2 = (dx * cl - ex * bl) * d;
  return x2 * x2 + y2 * y2;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x2 = ax + (ey * bl - dy * cl) * d;
  const y2 = ay + (dx * cl - ex * bl) * d;
  return { x: x2, y: y2 };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i = left + 1; i <= right; i++) {
      const temp = ids[i];
      const tempDist = dists[temp];
      let j = i - 1;
      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
      ids[j + 1] = temp;
    }
  } else {
    const median2 = left + right >> 1;
    let i = left + 1;
    let j = right;
    swap(ids, median2, i);
    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
    const temp = ids[i];
    const tempDist = dists[temp];
    while (true) {
      do
        i++;
      while (dists[ids[i]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i) break;
      swap(ids, i, j);
    }
    ids[left + 1] = ids[j];
    ids[j] = temp;
    if (right - i + 1 >= j - left) {
      quicksort(ids, dists, i, right);
      quicksort(ids, dists, left, j - 1);
    } else {
      quicksort(ids, dists, left, j - 1);
      quicksort(ids, dists, i, right);
    }
  }
}
function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}
function defaultGetX(p) {
  return p[0];
}
function defaultGetY(p) {
  return p[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon5 = 1e-6;
var Path2 = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x2, y2) {
    this._ += `M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x2, y2) {
    this._ += `L${this._x1 = +x2},${this._y1 = +y2}`;
  }
  arc(x2, y2, r) {
    x2 = +x2, y2 = +y2, r = +r;
    const x0 = x2 + r;
    const y0 = y2;
    if (r < 0) throw new Error("negative radius");
    if (this._x1 === null) this._ += `M${x0},${y0}`;
    else if (Math.abs(this._x1 - x0) > epsilon5 || Math.abs(this._y1 - y0) > epsilon5) this._ += "L" + x0 + "," + y0;
    if (!r) return;
    this._ += `A${r},${r},0,1,1,${x2 - r},${y2}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }
  rect(x2, y2, w, h) {
    this._ += `M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${+w}v${+h}h${-w}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x2, y2) {
    this._.push([x2, y2]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x2, y2) {
    this._.push([x2, y2]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i = 0, j = 0, n = triangles.length, x2, y2; i < n; i += 3, j += 2) {
      const t13 = triangles[i] * 2;
      const t22 = triangles[i + 1] * 2;
      const t32 = triangles[i + 2] * 2;
      const x12 = points[t13];
      const y12 = points[t13 + 1];
      const x22 = points[t22];
      const y22 = points[t22 + 1];
      const x3 = points[t32];
      const y3 = points[t32 + 1];
      const dx = x22 - x12;
      const dy = y22 - y12;
      const ex = x3 - x12;
      const ey = y3 - y12;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i2 of hull) bx += points[i2 * 2], by += points[i2 * 2 + 1];
          bx /= hull.length, by /= hull.length;
        }
        const a2 = 1e9 * Math.sign((bx - x12) * ey - (by - y12) * ex);
        x2 = (x12 + x3) / 2 - a2 * ey;
        y2 = (y12 + y3) / 2 + a2 * ex;
      } else {
        const d = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x2 = x12 + (ey * bl - dy * cl) * d;
        y2 = y12 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j] = x2;
      circumcenters[j + 1] = y2;
    }
    let h = hull[hull.length - 1];
    let p0, p1 = h * 4;
    let x0, x1 = points[2 * h];
    let y0, y1 = points[2 * h + 1];
    vectors.fill(0);
    for (let i = 0; i < hull.length; ++i) {
      h = hull[i];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1) return null;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = Math.floor(i / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i = 0; i < hull.length; ++i) {
      h0 = h1, h1 = hull[i];
      const t = Math.floor(inedges[h1] / 3) * 2;
      const x2 = circumcenters[t];
      const y2 = circumcenters[t + 1];
      const v2 = h0 * 4;
      const p = this._project(x2, y2, vectors[v2 + 2], vectors[v2 + 3]);
      if (p) this._renderSegment(x2, y2, p[0], p[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i, context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const points = this._clip(i);
    if (points === null || !points.length) return;
    context.moveTo(points[0], points[1]);
    let n = points.length;
    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;
    for (let i2 = 2; i2 < n; i2 += 2) {
      if (points[i2] !== points[i2 - 2] || points[i2 + 1] !== points[i2 - 1])
        context.lineTo(points[i2], points[i2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i = 0, n = points.length / 2; i < n; ++i) {
      const cell = this.cellPolygon(i);
      if (cell) cell.index = i, yield cell;
    }
  }
  cellPolygon(i) {
    const polygon = new Polygon();
    this.renderCell(i, polygon);
    return polygon.value();
  }
  _renderSegment(x0, y0, x1, y1, context) {
    let S;
    const c0 = this._regioncode(x0, y0);
    const c1 = this._regioncode(x1, y1);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
      context.moveTo(S[0], S[1]);
      context.lineTo(S[2], S[3]);
    }
  }
  contains(i, x2, y2) {
    if ((x2 = +x2, x2 !== x2) || (y2 = +y2, y2 !== y2)) return false;
    return this.delaunay._step(i, x2, y2) === i;
  }
  *neighbors(i) {
    const ci = this._clip(i);
    if (ci) for (const j of this.delaunay.neighbors(i)) {
      const cj = this._clip(j);
      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
          if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
            yield j;
            break loop;
          }
        }
      }
    }
  }
  _cell(i) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i];
    if (e0 === -1) return null;
    const points = [];
    let e = e0;
    do {
      const t = Math.floor(e / 3);
      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break;
      e = halfedges[e];
    } while (e !== e0 && e !== -1);
    return points;
  }
  _clip(i) {
    if (i === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i);
    if (points === null) return null;
    const { vectors: V } = this;
    const v2 = i * 4;
    return this._simplify(V[v2] || V[v2 + 1] ? this._clipInfinite(i, points, V[v2], V[v2 + 1], V[v2 + 2], V[v2 + 3]) : this._clipFinite(i, points));
  }
  _clipFinite(i, points) {
    const n = points.length;
    let P = null;
    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
    let c0, c1 = this._regioncode(x1, y1);
    let e0, e1 = 0;
    for (let j = 0; j < n; j += 2) {
      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
      c0 = c1, c1 = this._regioncode(x1, y1);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P) P.push(x1, y1);
        else P = [x1, y1];
      } else {
        let S, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
          [sx0, sy0, sx1, sy1] = S;
        } else {
          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
          [sx1, sy1, sx0, sy0] = S;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
          if (P) P.push(sx0, sy0);
          else P = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        if (P) P.push(sx1, sy1);
        else P = [sx1, sy1];
      }
    }
    if (P) {
      e0 = e1, e1 = this._edgecode(P[0], P[1]);
      if (e0 && e1) this._edge(i, e0, e1, P, P.length);
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P;
  }
  _clipSegment(x0, y0, x1, y1, c0, c1) {
    const flip = c0 < c1;
    if (flip) [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];
    while (true) {
      if (c0 === 0 && c1 === 0) return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];
      if (c0 & c1) return null;
      let x2, y2, c2 = c0 || c1;
      if (c2 & 8) x2 = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y2 = this.ymax;
      else if (c2 & 4) x2 = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y2 = this.ymin;
      else if (c2 & 2) y2 = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x2 = this.xmax;
      else y2 = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x2 = this.xmin;
      if (c0) x0 = x2, y0 = y2, c0 = this._regioncode(x0, y0);
      else x1 = x2, y1 = y2, c1 = this._regioncode(x1, y1);
    }
  }
  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
    let P = Array.from(points), p;
    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
    if (P = this._clipFinite(i, P)) {
      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
      }
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P;
  }
  _edge(i, e0, e1, P, j) {
    while (e0 !== e1) {
      let x2, y2;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        // top-left
        case 4:
          e0 = 6, x2 = this.xmax, y2 = this.ymin;
          break;
        // top
        case 6:
          e0 = 2;
          continue;
        // top-right
        case 2:
          e0 = 10, x2 = this.xmax, y2 = this.ymax;
          break;
        // right
        case 10:
          e0 = 8;
          continue;
        // bottom-right
        case 8:
          e0 = 9, x2 = this.xmin, y2 = this.ymax;
          break;
        // bottom
        case 9:
          e0 = 1;
          continue;
        // bottom-left
        case 1:
          e0 = 5, x2 = this.xmin, y2 = this.ymin;
          break;
      }
      if ((P[j] !== x2 || P[j + 1] !== y2) && this.contains(i, x2, y2)) {
        P.splice(j, 0, x2, y2), j += 2;
      }
    }
    return j;
  }
  _project(x0, y0, vx, vy) {
    let t = Infinity, c2, x2, y2;
    if (vy < 0) {
      if (y0 <= this.ymin) return null;
      if ((c2 = (this.ymin - y0) / vy) < t) y2 = this.ymin, x2 = x0 + (t = c2) * vx;
    } else if (vy > 0) {
      if (y0 >= this.ymax) return null;
      if ((c2 = (this.ymax - y0) / vy) < t) y2 = this.ymax, x2 = x0 + (t = c2) * vx;
    }
    if (vx > 0) {
      if (x0 >= this.xmax) return null;
      if ((c2 = (this.xmax - x0) / vx) < t) x2 = this.xmax, y2 = y0 + (t = c2) * vy;
    } else if (vx < 0) {
      if (x0 <= this.xmin) return null;
      if ((c2 = (this.xmin - x0) / vx) < t) x2 = this.xmin, y2 = y0 + (t = c2) * vy;
    }
    return [x2, y2];
  }
  _edgecode(x2, y2) {
    return (x2 === this.xmin ? 1 : x2 === this.xmax ? 2 : 0) | (y2 === this.ymin ? 4 : y2 === this.ymax ? 8 : 0);
  }
  _regioncode(x2, y2) {
    return (x2 < this.xmin ? 1 : x2 > this.xmax ? 2 : 0) | (y2 < this.ymin ? 4 : y2 > this.ymax ? 8 : 0);
  }
  _simplify(P) {
    if (P && P.length > 4) {
      for (let i = 0; i < P.length; i += 2) {
        const j = (i + 2) % P.length, k2 = (i + 4) % P.length;
        if (P[i] === P[j] && P[j] === P[k2] || P[i + 1] === P[j + 1] && P[j + 1] === P[k2 + 1]) {
          P.splice(j, 2), i -= 2;
        }
      }
      if (!P.length) P = null;
    }
    return P;
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau3 = 2 * Math.PI;
var pow2 = Math.pow;
function pointX(p) {
  return p[0];
}
function pointY(p) {
  return p[1];
}
function collinear(d) {
  const { triangles, coords } = d;
  for (let i = 0; i < triangles.length; i += 3) {
    const a2 = 2 * triangles[i], b = 2 * triangles[i + 1], c2 = 2 * triangles[i + 2], cross2 = (coords[c2] - coords[a2]) * (coords[b + 1] - coords[a2 + 1]) - (coords[b] - coords[a2]) * (coords[c2 + 1] - coords[a2 + 1]);
    if (cross2 > 1e-10) return false;
  }
  return true;
}
function jitter(x2, y2, r) {
  return [x2 + Math.sin(x2 + y2) * r, y2 + Math.cos(x2 - y2) * r];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points = this.points;
    if (d.hull && d.hull.length > 2 && collinear(d)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]);
      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const p = jitter(points[2 * i], points[2 * i + 1], r);
        points[2 * i] = p[0];
        points[2 * i + 1] = p[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e = 0, n = halfedges.length; e < n; ++e) {
      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
    }
    for (let i = 0, n = hull.length; i < n; ++i) {
      hullIndex[hull[i]] = i;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l = collinear2.indexOf(i);
      if (l > 0) yield collinear2[l - 1];
      if (l < collinear2.length - 1) yield collinear2[l + 1];
      return;
    }
    const e0 = inedges[i];
    if (e0 === -1) return;
    let e = e0, p0 = -1;
    do {
      yield p0 = triangles[e];
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) return;
      e = halfedges[e];
      if (e === -1) {
        const p = hull[(_hullIndex[i] + 1) % hull.length];
        if (p !== p0) yield p;
        return;
      }
    } while (e !== e0);
  }
  find(x2, y2, i = 0) {
    if ((x2 = +x2, x2 !== x2) || (y2 = +y2, y2 !== y2)) return -1;
    const i0 = i;
    let c2;
    while ((c2 = this._step(i, x2, y2)) >= 0 && c2 !== i && c2 !== i0) i = c2;
    return c2;
  }
  _step(i, x2, y2) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
    let c2 = i;
    let dc = pow2(x2 - points[i * 2], 2) + pow2(y2 - points[i * 2 + 1], 2);
    const e0 = inedges[i];
    let e = e0;
    do {
      let t = triangles[e];
      const dt = pow2(x2 - points[t * 2], 2) + pow2(y2 - points[t * 2 + 1], 2);
      if (dt < dc) dc = dt, c2 = t;
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break;
      e = halfedges[e];
      if (e === -1) {
        e = hull[(_hullIndex[i] + 1) % hull.length];
        if (e !== t) {
          if (pow2(x2 - points[e * 2], 2) + pow2(y2 - points[e * 2 + 1], 2) < dc) return e;
        }
        break;
      }
    } while (e !== e0);
    return c2;
  }
  render(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = triangles[i] * 2;
      const tj = triangles[j] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r) {
    if (r === void 0 && (!context || typeof context.moveTo !== "function")) r = context, context = null;
    r = r == void 0 ? 2 : +r;
    const buffer = context == null ? context = new Path2() : void 0;
    const { points } = this;
    for (let i = 0, n = points.length; i < n; i += 2) {
      const x2 = points[i], y2 = points[i + 1];
      context.moveTo(x2 + r, y2);
      context.arc(x2, y2, r, 0, tau3);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { hull, points } = this;
    const h = hull[0] * 2, n = hull.length;
    context.moveTo(points[h], points[h + 1]);
    for (let i = 1; i < n; ++i) {
      const h2 = 2 * hull[i];
      context.lineTo(points[h2], points[h2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i, context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { points, triangles } = this;
    const t03 = triangles[i *= 3] * 2;
    const t13 = triangles[i + 1] * 2;
    const t22 = triangles[i + 2] * 2;
    context.moveTo(points[t03], points[t03 + 1]);
    context.lineTo(points[t13], points[t13 + 1]);
    context.lineTo(points[t22], points[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
      yield this.trianglePolygon(i);
    }
  }
  trianglePolygon(i) {
    const polygon = new Polygon();
    this.renderTriangle(i, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n = points.length;
  const array2 = new Float64Array(n * 2);
  for (let i = 0; i < n; ++i) {
    const p = points[i];
    array2[i * 2] = fx.call(that, p, i, points);
    array2[i * 2 + 1] = fy.call(that, p, i, points);
  }
  return array2;
}
function* flatIterable(points, fx, fy, that) {
  let i = 0;
  for (const p of points) {
    yield fx.call(that, p, i, points);
    yield fy.call(that, p, i, points);
    ++i;
  }
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartVoronoi/useChartVoronoi.js
var useChartVoronoi = ({
  svgRef,
  params,
  store,
  instance
}) => {
  var _a;
  const {
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick
  } = params;
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  const zoomIsInteracting = useSelector(store, selectorChartZoomIsInteracting);
  const {
    series,
    seriesOrder
  } = ((_a = useSelector(store, selectorChartSeriesProcessed)) == null ? void 0 : _a.scatter) ?? {};
  const voronoiRef = React60.useRef({});
  const delauneyRef = React60.useRef(void 0);
  const lastFind = React60.useRef(void 0);
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  useEnhancedEffect_default(() => {
    store.update((prev) => prev.voronoi.isVoronoiEnabled === !disableVoronoi ? prev : _extends({}, prev, {
      voronoi: {
        isVoronoiEnabled: !disableVoronoi
      }
    }));
  }, [store, disableVoronoi]);
  useEnhancedEffect_default(() => {
    if (zoomIsInteracting || seriesOrder === void 0 || series === void 0 || disableVoronoi) {
      return;
    }
    voronoiRef.current = {};
    let points = [];
    seriesOrder.forEach((seriesId) => {
      const {
        data,
        xAxisId,
        yAxisId
      } = series[seriesId];
      const xScale = xAxis[xAxisId ?? defaultXAxisId].scale;
      const yScale = yAxis[yAxisId ?? defaultYAxisId].scale;
      const getXPosition = getValueToPositionMapper(xScale);
      const getYPosition = getValueToPositionMapper(yScale);
      const seriesPoints = data.flatMap(({
        x: x2,
        y: y2
      }) => {
        const pointX2 = getXPosition(x2);
        const pointY2 = getYPosition(y2);
        if (!instance.isPointInside({
          x: pointX2,
          y: pointY2
        })) {
          return [-drawingArea.width, -drawingArea.height];
        }
        return [pointX2, pointY2];
      });
      voronoiRef.current[seriesId] = {
        seriesId,
        startIndex: points.length,
        endIndex: points.length + seriesPoints.length
      };
      points = points.concat(seriesPoints);
    });
    delauneyRef.current = new Delaunay(points);
    lastFind.current = void 0;
  }, [zoomIsInteracting, defaultXAxisId, defaultYAxisId, series, seriesOrder, xAxis, yAxis, drawingArea, instance, disableVoronoi]);
  React60.useEffect(() => {
    if (svgRef.current === null || disableVoronoi) {
      return void 0;
    }
    const element = svgRef.current;
    function getClosestPoint(event) {
      const svgPoint = getSVGPoint(element, event);
      if (!instance.isPointInside(svgPoint)) {
        lastFind.current = void 0;
        return "outside-chart";
      }
      if (!delauneyRef.current) {
        return "no-point-found";
      }
      const closestPointIndex = delauneyRef.current.find(svgPoint.x, svgPoint.y, lastFind.current);
      if (closestPointIndex === void 0) {
        return "no-point-found";
      }
      lastFind.current = closestPointIndex;
      const closestSeries = Object.values(voronoiRef.current).find((value) => {
        return 2 * closestPointIndex >= value.startIndex && 2 * closestPointIndex < value.endIndex;
      });
      if (closestSeries === void 0) {
        return "no-point-found";
      }
      const dataIndex = (2 * closestPointIndex - voronoiRef.current[closestSeries.seriesId].startIndex) / 2;
      if (voronoiMaxRadius !== void 0) {
        const pointX2 = delauneyRef.current.points[2 * closestPointIndex];
        const pointY2 = delauneyRef.current.points[2 * closestPointIndex + 1];
        const dist2 = (pointX2 - svgPoint.x) ** 2 + (pointY2 - svgPoint.y) ** 2;
        if (dist2 > voronoiMaxRadius ** 2) {
          return "outside-voronoi-max-radius";
        }
      }
      return {
        seriesId: closestSeries.seriesId,
        dataIndex
      };
    }
    const handleMouseLeave = () => {
      var _a2, _b;
      (_a2 = instance.cleanInteraction) == null ? void 0 : _a2.call(instance);
      (_b = instance.clearHighlight) == null ? void 0 : _b.call(instance);
    };
    const handleMouseMove = (event) => {
      var _a2, _b, _c, _d, _e, _f;
      const closestPoint = getClosestPoint(event);
      if (closestPoint === "outside-chart") {
        (_a2 = instance.cleanInteraction) == null ? void 0 : _a2.call(instance);
        (_b = instance.clearHighlight) == null ? void 0 : _b.call(instance);
        return;
      }
      if (closestPoint === "outside-voronoi-max-radius" || closestPoint === "no-point-found") {
        (_c = instance.removeItemInteraction) == null ? void 0 : _c.call(instance);
        (_d = instance.clearHighlight) == null ? void 0 : _d.call(instance);
        return;
      }
      const {
        seriesId,
        dataIndex
      } = closestPoint;
      (_e = instance.setItemInteraction) == null ? void 0 : _e.call(instance, {
        type: "scatter",
        seriesId,
        dataIndex
      });
      (_f = instance.setHighlight) == null ? void 0 : _f.call(instance, {
        seriesId,
        dataIndex
      });
    };
    const handleMouseClick = (event) => {
      if (!onItemClick) {
        return;
      }
      const closestPoint = getClosestPoint(event);
      if (typeof closestPoint === "string") {
        return;
      }
      const {
        seriesId,
        dataIndex
      } = closestPoint;
      onItemClick(event, {
        type: "scatter",
        seriesId,
        dataIndex
      });
    };
    element.addEventListener("pointerleave", handleMouseLeave);
    element.addEventListener("pointermove", handleMouseMove);
    element.addEventListener("click", handleMouseClick);
    return () => {
      element.removeEventListener("pointerleave", handleMouseLeave);
      element.removeEventListener("pointermove", handleMouseMove);
      element.removeEventListener("click", handleMouseClick);
    };
  }, [svgRef, yAxis, xAxis, voronoiMaxRadius, onItemClick, disableVoronoi, drawingArea, instance]);
  const enableVoronoiCallback = useEventCallback_default(() => {
    store.update((prev) => _extends({}, prev, {
      voronoi: _extends({}, prev.voronoi, {
        isVoronoiEnabled: true
      })
    }));
  });
  const disableVoronoiCallback = useEventCallback_default(() => {
    store.update((prev) => _extends({}, prev, {
      voronoi: _extends({}, prev.voronoi, {
        isVoronoiEnabled: false
      })
    }));
  });
  return {
    instance: {
      enableVoronoi: enableVoronoiCallback,
      disableVoronoi: disableVoronoiCallback
    }
  };
};
useChartVoronoi.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  disableVoronoi: params.disableVoronoi ?? !params.series.some((item) => item.type === "scatter")
});
useChartVoronoi.getInitialState = (params) => ({
  voronoi: {
    isVoronoiEnabled: !params.disableVoronoi
  }
});
useChartVoronoi.params = {
  disableVoronoi: true,
  voronoiMaxRadius: true,
  onItemClick: true
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartVoronoi/useChartVoronoi.selectors.js
var selectVoronoi = (state) => state.voronoi;
var selectorChartsVoronoiIsVoronoiEnabled = createSelector(selectVoronoi, (voronoi) => voronoi == null ? void 0 : voronoi.isVoronoiEnabled);

// node_modules/@mui/x-charts/esm/internals/plugins/allPlugins.js
var DEFAULT_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight, useChartVoronoi];

// node_modules/@mui/x-charts/esm/ChartDataProvider/useChartDataProviderProps.js
var _excluded28 = ["children", "localeText", "plugins", "seriesConfig"];
var useChartDataProviderProps = (props) => {
  const {
    children,
    localeText,
    plugins = DEFAULT_PLUGINS,
    seriesConfig: seriesConfig5
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const theme = useTheme();
  const chartProviderProps = {
    plugins,
    seriesConfig: seriesConfig5,
    pluginParams: _extends({
      theme: theme.palette.mode
    }, other)
  };
  return {
    children,
    localeText,
    chartProviderProps
  };
};

// node_modules/@mui/x-charts/esm/ChartDataProvider/ChartDataProvider.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
function ChartDataProvider(props) {
  const {
    children,
    localeText,
    chartProviderProps
  } = useChartDataProviderProps(props);
  return (0, import_jsx_runtime39.jsx)(ChartProvider, _extends({}, chartProviderProps, {
    children: (0, import_jsx_runtime39.jsx)(ChartsLocalizationProvider, {
      localeText,
      children
    })
  }));
}
true ? ChartDataProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types24.default.shape({
    current: import_prop_types24.default.any
  }),
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.string), import_prop_types24.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types24.default.arrayOf(import_prop_types24.default.object),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types24.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types24.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types24.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.shape({
    bottom: import_prop_types24.default.number,
    left: import_prop_types24.default.number,
    right: import_prop_types24.default.number,
    top: import_prop_types24.default.number
  })]),
  /**
   * The array of series to display.
   * Each type of series has its own specificity.
   * Please refer to the appropriate docs page to learn more about it.
   */
  series: import_prop_types24.default.arrayOf(import_prop_types24.default.object),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types24.default.bool,
  theme: import_prop_types24.default.oneOf(["dark", "light"]),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types24.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsSurface/ChartsSurface.js
var import_prop_types25 = __toESM(require_prop_types(), 1);
var React66 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsAxesGradients.js
var React65 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsPiecewiseGradient.js
var React62 = __toESM(require_react(), 1);
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
function ChartsPiecewiseGradient(props) {
  const {
    isReversed,
    gradientId,
    size,
    direction,
    scale: scale2,
    colorMap
  } = props;
  if (size <= 0) {
    return null;
  }
  return (0, import_jsx_runtime40.jsx)("linearGradient", {
    id: gradientId,
    x1: "0",
    x2: "0",
    y1: "0",
    y2: "0",
    [`${direction}${isReversed ? 1 : 2}`]: `${size}px`,
    gradientUnits: "userSpaceOnUse",
    children: colorMap.thresholds.map((threshold2, index2) => {
      const x2 = scale2(threshold2);
      if (x2 === void 0) {
        return null;
      }
      const offset = isReversed ? 1 - x2 / size : x2 / size;
      if (Number.isNaN(offset)) {
        return null;
      }
      return (0, import_jsx_runtime40.jsxs)(React62.Fragment, {
        children: [(0, import_jsx_runtime40.jsx)("stop", {
          offset,
          stopColor: colorMap.colors[index2],
          stopOpacity: 1
        }), (0, import_jsx_runtime40.jsx)("stop", {
          offset,
          stopColor: colorMap.colors[index2 + 1],
          stopOpacity: 1
        })]
      }, threshold2.toString() + index2);
    })
  });
}

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsContinuousGradient.js
var React63 = __toESM(require_react(), 1);
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var PX_PRECISION = 10;
function ChartsContinuousGradient(props) {
  const {
    gradientUnits,
    isReversed,
    gradientId,
    size,
    direction,
    scale: scale2,
    colorScale,
    colorMap
  } = props;
  const extremumValues = [colorMap.min ?? 0, colorMap.max ?? 100];
  const extremumPositions = extremumValues.map(scale2).filter((p) => p !== void 0);
  if (extremumPositions.length !== 2) {
    return null;
  }
  const interpolator = typeof extremumValues[0] === "number" ? number_default(extremumValues[0], extremumValues[1]) : date_default(extremumValues[0], extremumValues[1]);
  const numberOfPoints = Math.round((Math.max(...extremumPositions) - Math.min(...extremumPositions)) / PX_PRECISION);
  const keyPrefix = `${extremumValues[0]}-${extremumValues[1]}-`;
  return (0, import_jsx_runtime41.jsx)("linearGradient", {
    id: gradientId,
    x1: "0",
    x2: "0",
    y1: "0",
    y2: "0",
    [`${direction}${isReversed ? 1 : 2}`]: gradientUnits === "objectBoundingBox" ? 1 : `${size}px`,
    gradientUnits: gradientUnits ?? "userSpaceOnUse",
    children: Array.from({
      length: numberOfPoints + 1
    }, (_, index2) => {
      const value = interpolator(index2 / numberOfPoints);
      if (value === void 0) {
        return null;
      }
      const x2 = scale2(value);
      if (x2 === void 0) {
        return null;
      }
      const offset = isReversed ? 1 - x2 / size : x2 / size;
      const color2 = colorScale(value);
      if (color2 === null) {
        return null;
      }
      return (0, import_jsx_runtime41.jsx)("stop", {
        offset,
        stopColor: color2,
        stopOpacity: 1
      }, keyPrefix + index2);
    })
  });
}

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsContinuousGradientObjectBound.js
var React64 = __toESM(require_react(), 1);
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var PX_PRECISION2 = 10;
var getDirection = (isReversed) => {
  if (isReversed) {
    return {
      x1: "1",
      x2: "0",
      y1: "0",
      y2: "0"
    };
  }
  return {
    x1: "0",
    x2: "1",
    y1: "0",
    y2: "0"
  };
};
function ChartsContinuousGradientObjectBound(props) {
  const {
    isReversed,
    gradientId,
    colorScale,
    colorMap
  } = props;
  const extremumValues = [colorMap.min ?? 0, colorMap.max ?? 100];
  const interpolator = typeof extremumValues[0] === "number" ? number_default(extremumValues[0], extremumValues[1]) : date_default(extremumValues[0], extremumValues[1]);
  const numberOfPoints = PX_PRECISION2;
  const keyPrefix = `${extremumValues[0]}-${extremumValues[1]}-`;
  return (0, import_jsx_runtime42.jsx)("linearGradient", _extends({
    id: gradientId
  }, getDirection(isReversed), {
    gradientUnits: "objectBoundingBox",
    children: Array.from({
      length: numberOfPoints + 1
    }, (_, index2) => {
      const offset = index2 / numberOfPoints;
      const value = interpolator(offset);
      if (value === void 0) {
        return null;
      }
      const color2 = colorScale(value);
      if (color2 === null) {
        return null;
      }
      return (0, import_jsx_runtime42.jsx)("stop", {
        offset,
        stopColor: color2,
        stopOpacity: 1
      }, keyPrefix + index2);
    })
  }));
}

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsAxesGradients.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
function ChartsAxesGradients() {
  const {
    top,
    height,
    bottom,
    left,
    width,
    right
  } = useDrawingArea();
  const svgHeight = top + height + bottom;
  const svgWidth = left + width + right;
  const getGradientId = useChartGradientIdBuilder();
  const getObjectBoundGradientId = useChartGradientIdObjectBoundBuilder();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const filteredYAxisIds = yAxisIds.filter((axisId) => yAxis[axisId].colorMap !== void 0);
  const filteredXAxisIds = xAxisIds.filter((axisId) => xAxis[axisId].colorMap !== void 0);
  const filteredZAxisIds = zAxisIds.filter((axisId) => zAxis[axisId].colorMap !== void 0);
  if (filteredYAxisIds.length === 0 && filteredXAxisIds.length === 0 && filteredZAxisIds.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime43.jsxs)("defs", {
    children: [filteredYAxisIds.map((axisId) => {
      const gradientId = getGradientId(axisId);
      const objectBoundGradientId = getObjectBoundGradientId(axisId);
      const {
        colorMap,
        scale: scale2,
        colorScale,
        reverse: reverse2
      } = yAxis[axisId];
      if ((colorMap == null ? void 0 : colorMap.type) === "piecewise") {
        return (0, import_jsx_runtime43.jsx)(ChartsPiecewiseGradient, {
          isReversed: !reverse2,
          scale: scale2,
          colorMap,
          size: svgHeight,
          gradientId,
          direction: "y"
        }, gradientId);
      }
      if ((colorMap == null ? void 0 : colorMap.type) === "continuous") {
        return (0, import_jsx_runtime43.jsxs)(React65.Fragment, {
          children: [(0, import_jsx_runtime43.jsx)(ChartsContinuousGradient, {
            isReversed: !reverse2,
            scale: scale2,
            colorScale,
            colorMap,
            size: svgHeight,
            gradientId,
            direction: "y"
          }), (0, import_jsx_runtime43.jsx)(ChartsContinuousGradientObjectBound, {
            isReversed: reverse2,
            colorScale,
            colorMap,
            gradientId: objectBoundGradientId
          })]
        }, gradientId);
      }
      return null;
    }), filteredXAxisIds.map((axisId) => {
      const gradientId = getGradientId(axisId);
      const objectBoundGradientId = getObjectBoundGradientId(axisId);
      const {
        colorMap,
        scale: scale2,
        reverse: reverse2,
        colorScale
      } = xAxis[axisId];
      if ((colorMap == null ? void 0 : colorMap.type) === "piecewise") {
        return (0, import_jsx_runtime43.jsx)(ChartsPiecewiseGradient, {
          isReversed: reverse2,
          scale: scale2,
          colorMap,
          size: svgWidth,
          gradientId,
          direction: "x"
        }, gradientId);
      }
      if ((colorMap == null ? void 0 : colorMap.type) === "continuous") {
        return (0, import_jsx_runtime43.jsxs)(React65.Fragment, {
          children: [(0, import_jsx_runtime43.jsx)(ChartsContinuousGradient, {
            isReversed: reverse2,
            scale: scale2,
            colorScale,
            colorMap,
            size: svgWidth,
            gradientId,
            direction: "x"
          }), (0, import_jsx_runtime43.jsx)(ChartsContinuousGradientObjectBound, {
            isReversed: reverse2,
            colorScale,
            colorMap,
            gradientId: objectBoundGradientId
          })]
        }, gradientId);
      }
      return null;
    }), filteredZAxisIds.map((axisId) => {
      const objectBoundGradientId = getObjectBoundGradientId(axisId);
      const {
        colorMap,
        colorScale
      } = zAxis[axisId];
      if ((colorMap == null ? void 0 : colorMap.type) === "continuous") {
        return (0, import_jsx_runtime43.jsx)(ChartsContinuousGradientObjectBound, {
          colorScale,
          colorMap,
          gradientId: objectBoundGradientId
        }, objectBoundGradientId);
      }
      return null;
    })]
  });
}

// node_modules/@mui/x-charts/esm/ChartsSurface/ChartsSurface.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var _excluded29 = ["children", "className", "title", "desc"];
var ChartsSurfaceStyles = styled_default("svg", {
  name: "MuiChartsSurface",
  slot: "Root"
})(({
  ownerState
}) => ({
  width: ownerState.width ?? "100%",
  height: ownerState.height ?? "100%",
  display: "flex",
  position: "relative",
  flexDirection: "column",
  alignItems: "center",
  justifyContent: "center",
  overflow: "hidden",
  // This prevents default touch actions when using the svg on mobile devices.
  // For example, prevent page scroll & zoom.
  touchAction: "none"
}));
var ChartsSurface = React66.forwardRef(function ChartsSurface2(inProps, ref) {
  const store = useStore();
  const {
    width: svgWidth,
    height: svgHeight
  } = useSelector(store, selectorChartContainerSize);
  const {
    width: propsWidth,
    height: propsHeight
  } = useSelector(store, selectorChartPropsSize);
  const svgRef = useSvgRef();
  const handleRef = useForkRef(svgRef, ref);
  const themeProps = useThemeProps({
    props: inProps,
    name: "MuiChartsSurface"
  });
  const {
    children,
    className,
    title,
    desc
  } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded29);
  const hasIntrinsicSize = svgHeight > 0 && svgWidth > 0;
  return (0, import_jsx_runtime44.jsxs)(ChartsSurfaceStyles, _extends({
    ownerState: {
      width: propsWidth,
      height: propsHeight
    },
    viewBox: `${0} ${0} ${svgWidth} ${svgHeight}`,
    className
  }, other, {
    ref: handleRef,
    children: [title && (0, import_jsx_runtime44.jsx)("title", {
      children: title
    }), desc && (0, import_jsx_runtime44.jsx)("desc", {
      children: desc
    }), (0, import_jsx_runtime44.jsx)(ChartsAxesGradients, {}), hasIntrinsicSize && children]
  }));
});
true ? ChartsSurface.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types25.default.node,
  className: import_prop_types25.default.string,
  desc: import_prop_types25.default.string,
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object]),
  title: import_prop_types25.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/ChartContainer/useChartContainerProps.js
var _excluded30 = ["width", "height", "margin", "children", "series", "colors", "dataset", "desc", "onAxisClick", "disableVoronoi", "voronoiMaxRadius", "onItemClick", "disableAxisListener", "highlightedItem", "onHighlightChange", "sx", "title", "xAxis", "yAxis", "zAxis", "rotationAxis", "radiusAxis", "skipAnimation", "seriesConfig", "plugins", "localeText"];
var useChartContainerProps = (props, ref) => {
  const _ref = props, {
    width,
    height,
    margin,
    children,
    series,
    colors,
    dataset,
    desc,
    onAxisClick,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick,
    disableAxisListener,
    highlightedItem,
    onHighlightChange,
    sx,
    title,
    xAxis,
    yAxis,
    zAxis,
    rotationAxis,
    radiusAxis,
    skipAnimation,
    seriesConfig: seriesConfig5,
    plugins,
    localeText
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded30);
  const chartsSurfaceProps = _extends({
    title,
    desc,
    sx,
    ref
  }, other);
  const chartDataProviderProps = {
    margin,
    series,
    colors,
    dataset,
    disableAxisListener,
    highlightedItem,
    onHighlightChange,
    onAxisClick,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick,
    xAxis,
    yAxis,
    zAxis,
    rotationAxis,
    radiusAxis,
    skipAnimation,
    width,
    height,
    localeText,
    seriesConfig: seriesConfig5,
    plugins: plugins ?? DEFAULT_PLUGINS
  };
  return {
    chartDataProviderProps,
    chartsSurfaceProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/internals/components/ChartsWrapper/ChartsWrapper.js
var React67 = __toESM(require_react(), 1);
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var getDirection2 = (direction, position) => {
  if (direction === "vertical") {
    if ((position == null ? void 0 : position.horizontal) === "start") {
      return "row";
    }
    return "row-reverse";
  }
  if ((position == null ? void 0 : position.vertical) === "bottom") {
    return "column-reverse";
  }
  return "column";
};
var getAlign = (direction, position) => {
  if (direction === "vertical") {
    if ((position == null ? void 0 : position.vertical) === "top") {
      return "flex-start";
    }
    if ((position == null ? void 0 : position.vertical) === "bottom") {
      return "flex-end";
    }
  }
  if (direction === "horizontal") {
    if ((position == null ? void 0 : position.horizontal) === "start") {
      return "flex-start";
    }
    if ((position == null ? void 0 : position.horizontal) === "end") {
      return "flex-end";
    }
  }
  return "center";
};
var Root3 = styled_default("div", {
  name: "MuiChartsWrapper",
  slot: "Root"
})(({
  ownerState
}) => ({
  display: "flex",
  flexDirection: getDirection2(ownerState.legendDirection, ownerState.legendPosition),
  flex: 1,
  justifyContent: "center",
  alignItems: getAlign(ownerState.legendDirection, ownerState.legendPosition)
}));
function ChartsWrapper(props) {
  const {
    children,
    sx
  } = props;
  const chartRootRef = useChartRootRef();
  return (0, import_jsx_runtime45.jsx)(Root3, {
    ref: chartRootRef,
    ownerState: props,
    sx,
    children
  });
}

// node_modules/@mui/x-charts/esm/BarChart/BarChart.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var BarChart = React68.forwardRef(function BarChart2(inProps, ref) {
  var _a, _b;
  const props = useThemeProps({
    props: inProps,
    name: "MuiBarChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    barPlotProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    legendProps,
    children
  } = useBarChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  return (0, import_jsx_runtime46.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime46.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [!props.hideLegend && (0, import_jsx_runtime46.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime46.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime46.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime46.jsxs)("g", _extends({}, clipPathGroupProps, {
          children: [(0, import_jsx_runtime46.jsx)(BarPlot, _extends({}, barPlotProps)), (0, import_jsx_runtime46.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime46.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps))]
        })), (0, import_jsx_runtime46.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), !props.loading && (0, import_jsx_runtime46.jsx)(Tooltip, _extends({}, (_b = props.slotProps) == null ? void 0 : _b.tooltip)), (0, import_jsx_runtime46.jsx)(ChartsClipPath, _extends({}, clipPathProps)), children]
      }))]
    }))
  }));
});
true ? BarChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types26.default.shape({
    current: import_prop_types26.default.object
  }),
  /**
   * The configuration of axes highlight.
   * Default is set to 'band' in the bar direction.
   * Depends on `layout` prop.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   */
  axisHighlight: import_prop_types26.default.shape({
    x: import_prop_types26.default.oneOf(["band", "line", "none"]),
    y: import_prop_types26.default.oneOf(["band", "line", "none"])
  }),
  /**
   * If provided, the function will be used to format the label of the bar.
   * It can be set to 'value' to display the current value.
   * @param {BarItem} item The item to format.
   * @param {BarLabelContext} context data about the bar.
   * @returns {string} The formatted label.
   */
  barLabel: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["value"]), import_prop_types26.default.func]),
  /**
   * Defines the border radius of the bar element.
   */
  borderRadius: import_prop_types26.default.number,
  children: import_prop_types26.default.node,
  className: import_prop_types26.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string), import_prop_types26.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types26.default.arrayOf(import_prop_types26.default.object),
  desc: import_prop_types26.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types26.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types26.default.shape({
    horizontal: import_prop_types26.default.bool,
    vertical: import_prop_types26.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types26.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types26.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types26.default.shape({
    dataIndex: import_prop_types26.default.number,
    seriesId: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types26.default.string,
  /**
   * The direction of the bar elements.
   * @default 'vertical'
   */
  layout: import_prop_types26.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types26.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types26.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.shape({
    bottom: import_prop_types26.default.number,
    left: import_prop_types26.default.number,
    right: import_prop_types26.default.number,
    top: import_prop_types26.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | AxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types26.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types26.default.func,
  /**
   * Callback fired when a bar item is clicked.
   * @param {React.MouseEvent<SVGElement, MouseEvent>} event The event source of the callback.
   * @param {BarItemIdentifier} barItemIdentifier The bar item identifier.
   */
  onItemClick: import_prop_types26.default.func,
  /**
   * The series to display in the bar chart.
   * An array of [[BarSeriesType]] objects.
   */
  series: import_prop_types26.default.arrayOf(import_prop_types26.default.object).isRequired,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types26.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types26.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types26.default.object,
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
  theme: import_prop_types26.default.oneOf(["dark", "light"]),
  title: import_prop_types26.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types26.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    barGapRatio: import_prop_types26.default.number,
    categoryGapRatio: import_prop_types26.default.number,
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      type: import_prop_types26.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types26.default.string,
      values: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number, import_prop_types26.default.string]).isRequired)
    }), import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["band"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      type: import_prop_types26.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types26.default.string,
      values: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number, import_prop_types26.default.string]).isRequired)
    }), import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["point"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["log"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["pow"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["sqrt"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["time"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["utc"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["x"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    height: import_prop_types26.default.number,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["linear"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelMinGap: import_prop_types26.default.number,
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    barGapRatio: import_prop_types26.default.number,
    categoryGapRatio: import_prop_types26.default.number,
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      type: import_prop_types26.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types26.default.string,
      values: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number, import_prop_types26.default.string]).isRequired)
    }), import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["band"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      type: import_prop_types26.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types26.default.string,
      values: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number, import_prop_types26.default.string]).isRequired)
    }), import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["point"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["log"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["pow"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["sqrt"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["time"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["utc"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  }), import_prop_types26.default.shape({
    axis: import_prop_types26.default.oneOf(["y"]),
    classes: import_prop_types26.default.object,
    colorMap: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      color: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string.isRequired), import_prop_types26.default.func]).isRequired,
      max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
      type: import_prop_types26.default.oneOf(["continuous"]).isRequired
    }), import_prop_types26.default.shape({
      colors: import_prop_types26.default.arrayOf(import_prop_types26.default.string).isRequired,
      thresholds: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]).isRequired).isRequired,
      type: import_prop_types26.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types26.default.array,
    dataKey: import_prop_types26.default.string,
    disableLine: import_prop_types26.default.bool,
    disableTicks: import_prop_types26.default.bool,
    domainLimit: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["nice", "strict"]), import_prop_types26.default.func]),
    fill: import_prop_types26.default.string,
    hideTooltip: import_prop_types26.default.bool,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    ignoreTooltip: import_prop_types26.default.bool,
    label: import_prop_types26.default.string,
    labelStyle: import_prop_types26.default.object,
    max: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    min: import_prop_types26.default.oneOfType([import_prop_types26.default.instanceOf(Date), import_prop_types26.default.number]),
    offset: import_prop_types26.default.number,
    position: import_prop_types26.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types26.default.bool,
    scaleType: import_prop_types26.default.oneOf(["linear"]),
    slotProps: import_prop_types26.default.object,
    slots: import_prop_types26.default.object,
    stroke: import_prop_types26.default.string,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    tickInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.array, import_prop_types26.default.func]),
    tickLabelInterval: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.func]),
    tickLabelPlacement: import_prop_types26.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types26.default.object,
    tickMaxStep: import_prop_types26.default.number,
    tickMinStep: import_prop_types26.default.number,
    tickNumber: import_prop_types26.default.number,
    tickPlacement: import_prop_types26.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types26.default.number,
    valueFormatter: import_prop_types26.default.func,
    width: import_prop_types26.default.number
  })]).isRequired)
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineChart.js
var React82 = __toESM(require_react(), 1);
var import_prop_types38 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AreaPlot.js
var React72 = __toESM(require_react(), 1);
var import_prop_types29 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AreaElement.js
var React71 = __toESM(require_react(), 1);
var import_prop_types28 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AnimatedArea.js
var React70 = __toESM(require_react(), 1);
var import_prop_types27 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AppearingMask.js
var React69 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/cleanId.js
function cleanId(id) {
  return id.replace(" ", "_");
}

// node_modules/@mui/x-charts/esm/LineChart/AppearingMask.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var appearingMaskClasses = generateUtilityClasses("MuiAppearingMask", ["animate"]);
var AnimatedRect = styled_default("rect")({
  animationName: "animate-width",
  animationTimingFunction: ANIMATION_TIMING_FUNCTION,
  animationDuration: "0s",
  [`&.${appearingMaskClasses.animate}`]: {
    animationDuration: `${ANIMATION_DURATION_MS}ms`
  },
  "@keyframes animate-width": {
    from: {
      width: 0
    }
  }
});
function AppearingMask(props) {
  const drawingArea = useDrawingArea();
  const chartId = useChartId2();
  const clipId = cleanId(`${chartId}-${props.id}`);
  return (0, import_jsx_runtime47.jsxs)(React69.Fragment, {
    children: [(0, import_jsx_runtime47.jsx)("clipPath", {
      id: clipId,
      children: (0, import_jsx_runtime47.jsx)(AnimatedRect, {
        className: clsx_default(!props.skipAnimation && appearingMaskClasses.animate),
        x: 0,
        y: 0,
        width: drawingArea.left + drawingArea.width + drawingArea.right,
        height: drawingArea.top + drawingArea.height + drawingArea.bottom
      })
    }), (0, import_jsx_runtime47.jsx)("g", {
      clipPath: `url(#${clipId})`,
      children: props.children
    })]
  });
}

// node_modules/@mui/x-charts/esm/LineChart/AnimatedArea.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var _excluded31 = ["skipAnimation", "ownerState"];
function AnimatedArea(props) {
  const {
    skipAnimation,
    ownerState
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const animatedProps = useAnimateArea(props);
  return (0, import_jsx_runtime48.jsx)(AppearingMask, {
    skipAnimation,
    id: `${ownerState.id}-area-clip`,
    children: (0, import_jsx_runtime48.jsx)("path", _extends({
      fill: ownerState.gradientId ? `url(#${ownerState.gradientId})` : ownerState.color,
      filter: (
        // eslint-disable-next-line no-nested-ternary
        ownerState.isHighlighted ? "brightness(140%)" : ownerState.gradientId ? void 0 : "brightness(120%)"
      ),
      opacity: ownerState.isFaded ? 0.3 : 1,
      stroke: "none"
    }, other, animatedProps))
  });
}
true ? AnimatedArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  d: import_prop_types27.default.string.isRequired,
  ownerState: import_prop_types27.default.shape({
    classes: import_prop_types27.default.object,
    color: import_prop_types27.default.string.isRequired,
    gradientId: import_prop_types27.default.string,
    id: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]).isRequired,
    isFaded: import_prop_types27.default.bool.isRequired,
    isHighlighted: import_prop_types27.default.bool.isRequired
  }).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types27.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/AreaElement.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var _excluded32 = ["id", "classes", "color", "gradientId", "slots", "slotProps", "onClick"];
function getAreaElementUtilityClass(slot) {
  return generateUtilityClass("MuiAreaElement", slot);
}
var areaElementClasses = generateUtilityClasses("MuiAreaElement", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses14 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getAreaElementUtilityClass, classes);
};
function AreaElement(props) {
  const {
    id,
    classes: innerClasses,
    color: color2,
    gradientId,
    slots,
    slotProps,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded32);
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id
  });
  const ownerState = {
    id,
    classes: innerClasses,
    color: color2,
    gradientId,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses14(ownerState);
  const Area = (slots == null ? void 0 : slots.area) ?? AnimatedArea;
  const areaProps = useSlotProps_default({
    elementType: Area,
    externalSlotProps: slotProps == null ? void 0 : slotProps.area,
    additionalProps: _extends({}, interactionProps, {
      onClick,
      cursor: onClick ? "pointer" : "unset"
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime49.jsx)(Area, _extends({}, other, areaProps));
}
true ? AreaElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types28.default.object,
  color: import_prop_types28.default.string.isRequired,
  d: import_prop_types28.default.string.isRequired,
  gradientId: import_prop_types28.default.string,
  id: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string]).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types28.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types28.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types28.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/internals/getCurve.js
function getCurveFactory(curveType) {
  switch (curveType) {
    case "catmullRom":
      return catmullRom_default.alpha(0.5);
    case "linear":
      return linear_default;
    case "monotoneX":
      return monotoneX;
    case "monotoneY":
      return monotoneY;
    case "natural":
      return natural_default;
    case "step":
      return step_default;
    case "stepBefore":
      return stepBefore;
    case "stepAfter":
      return stepAfter;
    case "bumpY":
      return bumpY;
    case "bumpX":
      return bumpX;
    default:
      return monotoneX;
  }
}

// node_modules/@mui/x-charts/esm/LineChart/AreaPlot.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var _excluded33 = ["slots", "slotProps", "onItemClick", "skipAnimation"];
var AreaPlotRoot = styled_default("g", {
  name: "MuiAreaPlot",
  slot: "Root"
})({
  [`& .${areaElementClasses.root}`]: {
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in"
  }
});
var useAggregatedData2 = () => {
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const getGradientId = useChartGradientIdBuilder();
  const allData = React72.useMemo(() => {
    if (seriesData === void 0) {
      return [];
    }
    const {
      series,
      stackingGroups
    } = seriesData;
    const defaultXAxisId = xAxisIds[0];
    const defaultYAxisId = yAxisIds[0];
    return stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return [...groupIds].reverse().map((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          connectNulls,
          baseline,
          curve,
          strictStepCurve
        } = series[seriesId];
        const xScale = xAxis[xAxisId].scale;
        const xPosition = getValueToPositionMapper(xScale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        const gradientId = yAxis[yAxisId].colorScale && getGradientId(yAxisId) || xAxis[xAxisId].colorScale && getGradientId(xAxisId) || void 0;
        if (true) {
          if (xData === void 0) {
            throw new Error(`MUI X: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
          }
          if (xData.length < stackedData.length) {
            throw new Error(`MUI X: The data length of the x axis (${xData.length} items) is lower than the length of series (${stackedData.length} items).`);
          }
        }
        const shouldExpand = (curve == null ? void 0 : curve.includes("step")) && !strictStepCurve && isBandScale(xScale);
        const formattedData = (xData == null ? void 0 : xData.flatMap((x2, index2) => {
          const nullData = data[index2] == null;
          if (shouldExpand) {
            const rep = [{
              x: x2,
              y: stackedData[index2],
              nullData,
              isExtension: false
            }];
            if (!nullData && (index2 === 0 || data[index2 - 1] == null)) {
              rep.unshift({
                x: (xScale(x2) ?? 0) - (xScale.step() - xScale.bandwidth()) / 2,
                y: stackedData[index2],
                nullData,
                isExtension: true
              });
            }
            if (!nullData && (index2 === data.length - 1 || data[index2 + 1] == null)) {
              rep.push({
                x: (xScale(x2) ?? 0) + (xScale.step() + xScale.bandwidth()) / 2,
                y: stackedData[index2],
                nullData,
                isExtension: true
              });
            }
            return rep;
          }
          return {
            x: x2,
            y: stackedData[index2],
            nullData
          };
        })) ?? [];
        const d3Data = connectNulls ? formattedData.filter((d2) => !d2.nullData) : formattedData;
        const areaPath = area_default().x((d2) => d2.isExtension ? d2.x : xPosition(d2.x)).defined((d2) => connectNulls || !d2.nullData || !!d2.isExtension).y0((d2) => {
          if (typeof baseline === "number") {
            return yScale(baseline);
          }
          if (baseline === "max") {
            return yScale.range()[1];
          }
          if (baseline === "min") {
            return yScale.range()[0];
          }
          const value = d2.y && yScale(d2.y[0]);
          if (Number.isNaN(value)) {
            return yScale.range()[0];
          }
          return value;
        }).y1((d2) => d2.y && yScale(d2.y[1]));
        const d = areaPath.curve(getCurveFactory(curve))(d3Data) || "";
        return _extends({}, series[seriesId], {
          gradientId,
          d,
          seriesId
        });
      });
    });
  }, [seriesData, xAxisIds, yAxisIds, xAxis, yAxis, getGradientId]);
  return allData;
};
function AreaPlot(props) {
  const {
    slots,
    slotProps,
    onItemClick,
    skipAnimation: inSkipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const completedData = useAggregatedData2();
  return (0, import_jsx_runtime50.jsx)(AreaPlotRoot, _extends({}, other, {
    children: completedData.map(({
      d,
      seriesId,
      color: color2,
      area,
      gradientId
    }) => !!area && (0, import_jsx_runtime50.jsx)(AreaElement, {
      id: seriesId,
      d,
      color: color2,
      gradientId,
      slots,
      slotProps,
      onClick: onItemClick && ((event) => onItemClick(event, {
        type: "line",
        seriesId
      })),
      skipAnimation
    }, seriesId))
  }));
}
true ? AreaPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a line area item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {LineItemIdentifier} lineItemIdentifier The line item identifier.
   */
  onItemClick: import_prop_types29.default.func,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types29.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types29.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types29.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LinePlot.js
var React75 = __toESM(require_react(), 1);
var import_prop_types32 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/LineElement.js
var React74 = __toESM(require_react(), 1);
var import_prop_types31 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AnimatedLine.js
var React73 = __toESM(require_react(), 1);
var import_prop_types30 = __toESM(require_prop_types(), 1);
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var _excluded34 = ["skipAnimation", "ownerState"];
var AnimatedLine = React73.forwardRef(function AnimatedLine2(props, ref) {
  const {
    skipAnimation,
    ownerState
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const animateProps = useAnimateLine(_extends({}, props, {
    ref
  }));
  return (0, import_jsx_runtime51.jsx)(AppearingMask, {
    skipAnimation,
    id: `${ownerState.id}-line-clip`,
    children: (0, import_jsx_runtime51.jsx)("path", _extends({
      stroke: ownerState.gradientId ? `url(#${ownerState.gradientId})` : ownerState.color,
      strokeWidth: 2,
      strokeLinejoin: "round",
      fill: "none",
      filter: ownerState.isHighlighted ? "brightness(120%)" : void 0,
      opacity: ownerState.isFaded ? 0.3 : 1
    }, other, animateProps))
  });
});
true ? AnimatedLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  d: import_prop_types30.default.string.isRequired,
  ownerState: import_prop_types30.default.shape({
    classes: import_prop_types30.default.object,
    color: import_prop_types30.default.string.isRequired,
    gradientId: import_prop_types30.default.string,
    id: import_prop_types30.default.oneOfType([import_prop_types30.default.number, import_prop_types30.default.string]).isRequired,
    isFaded: import_prop_types30.default.bool.isRequired,
    isHighlighted: import_prop_types30.default.bool.isRequired
  }).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types30.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineElement.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var _excluded35 = ["id", "classes", "color", "gradientId", "slots", "slotProps", "onClick"];
function getLineElementUtilityClass(slot) {
  return generateUtilityClass("MuiLineElement", slot);
}
var lineElementClasses = generateUtilityClasses("MuiLineElement", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses15 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getLineElementUtilityClass, classes);
};
function LineElement(props) {
  const {
    id,
    classes: innerClasses,
    color: color2,
    gradientId,
    slots,
    slotProps,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id
  });
  const ownerState = {
    id,
    classes: innerClasses,
    color: color2,
    gradientId,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses15(ownerState);
  const Line = (slots == null ? void 0 : slots.line) ?? AnimatedLine;
  const lineProps = useSlotProps_default({
    elementType: Line,
    externalSlotProps: slotProps == null ? void 0 : slotProps.line,
    additionalProps: _extends({}, interactionProps, {
      onClick,
      cursor: onClick ? "pointer" : "unset"
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime52.jsx)(Line, _extends({}, other, lineProps));
}
true ? LineElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types31.default.object,
  color: import_prop_types31.default.string.isRequired,
  d: import_prop_types31.default.string.isRequired,
  gradientId: import_prop_types31.default.string,
  id: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types31.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types31.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types31.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LinePlot.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var _excluded36 = ["slots", "slotProps", "skipAnimation", "onItemClick"];
var LinePlotRoot = styled_default("g", {
  name: "MuiAreaPlot",
  slot: "Root"
})({
  [`& .${lineElementClasses.root}`]: {
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in"
  }
});
var useAggregatedData3 = () => {
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const getGradientId = useChartGradientIdBuilder();
  const allData = React75.useMemo(() => {
    if (seriesData === void 0) {
      return [];
    }
    const {
      series,
      stackingGroups
    } = seriesData;
    const defaultXAxisId = xAxisIds[0];
    const defaultYAxisId = yAxisIds[0];
    return stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          connectNulls,
          curve,
          strictStepCurve
        } = series[seriesId];
        const xScale = xAxis[xAxisId].scale;
        const xPosition = getValueToPositionMapper(xScale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        const gradientId = yAxis[yAxisId].colorScale && getGradientId(yAxisId) || xAxis[xAxisId].colorScale && getGradientId(xAxisId) || void 0;
        if (true) {
          if (xData === void 0) {
            throw new Error(`MUI X: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
          }
          if (xData.length < stackedData.length) {
            warnOnce(`MUI X: The data length of the x axis (${xData.length} items) is lower than the length of series (${stackedData.length} items).`, "error");
          }
        }
        const shouldExpand = (curve == null ? void 0 : curve.includes("step")) && !strictStepCurve && isBandScale(xScale);
        const formattedData = (xData == null ? void 0 : xData.flatMap((x2, index2) => {
          const nullData = data[index2] == null;
          if (shouldExpand) {
            const rep = [{
              x: x2,
              y: stackedData[index2],
              nullData,
              isExtension: false
            }];
            if (!nullData && (index2 === 0 || data[index2 - 1] == null)) {
              rep.unshift({
                x: (xScale(x2) ?? 0) - (xScale.step() - xScale.bandwidth()) / 2,
                y: stackedData[index2],
                nullData,
                isExtension: true
              });
            }
            if (!nullData && (index2 === data.length - 1 || data[index2 + 1] == null)) {
              rep.push({
                x: (xScale(x2) ?? 0) + (xScale.step() + xScale.bandwidth()) / 2,
                y: stackedData[index2],
                nullData,
                isExtension: true
              });
            }
            return rep;
          }
          return {
            x: x2,
            y: stackedData[index2],
            nullData
          };
        })) ?? [];
        const d3Data = connectNulls ? formattedData.filter((d2) => !d2.nullData) : formattedData;
        const linePath = line_default().x((d2) => d2.isExtension ? d2.x : xPosition(d2.x)).defined((d2) => connectNulls || !d2.nullData || !!d2.isExtension).y((d2) => yScale(d2.y[1]));
        const d = linePath.curve(getCurveFactory(curve))(d3Data) || "";
        return _extends({}, series[seriesId], {
          gradientId,
          d,
          seriesId
        });
      });
    });
  }, [seriesData, xAxisIds, yAxisIds, xAxis, yAxis, getGradientId]);
  return allData;
};
function LinePlot(props) {
  const {
    slots,
    slotProps,
    skipAnimation: inSkipAnimation,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const completedData = useAggregatedData3();
  return (0, import_jsx_runtime53.jsx)(LinePlotRoot, _extends({}, other, {
    children: completedData.map(({
      d,
      seriesId,
      color: color2,
      gradientId
    }) => {
      return (0, import_jsx_runtime53.jsx)(LineElement, {
        id: seriesId,
        d,
        color: color2,
        gradientId,
        skipAnimation,
        slots,
        slotProps,
        onClick: onItemClick && ((event) => onItemClick(event, {
          type: "line",
          seriesId
        }))
      }, seriesId);
    })
  }));
}
true ? LinePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a line item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {LineItemIdentifier} lineItemIdentifier The line item identifier.
   */
  onItemClick: import_prop_types32.default.func,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types32.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types32.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types32.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkPlot.js
var import_prop_types35 = __toESM(require_prop_types(), 1);
var React78 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/LineChart/CircleMarkElement.js
var React76 = __toESM(require_react(), 1);
var import_prop_types33 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/markElementClasses.js
function getMarkElementUtilityClass(slot) {
  return generateUtilityClass("MuiMarkElement", slot);
}
var markElementClasses = generateUtilityClasses("MuiMarkElement", ["root", "highlighted", "faded", "animate", "series"]);
var useUtilityClasses16 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted,
    skipAnimation
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded", skipAnimation ? void 0 : "animate"]
  };
  return composeClasses(slots, getMarkElementUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/LineChart/CircleMarkElement.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var _excluded37 = ["x", "y", "id", "classes", "color", "dataIndex", "onClick", "skipAnimation"];
var Circle = styled_default("circle")({
  [`&.${markElementClasses.animate}`]: {
    transitionDuration: `${ANIMATION_DURATION_MS}ms`,
    transitionProperty: "cx, cy",
    transitionTimingFunction: ANIMATION_TIMING_FUNCTION
  }
});
function CircleMarkElement(props) {
  const {
    x: x2,
    y: y2,
    id,
    classes: innerClasses,
    color: color2,
    dataIndex,
    onClick,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const theme = useTheme();
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id,
    dataIndex
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id
  });
  const store = useStore();
  const xAxisInteractionIndex = useSelector(store, selectorChartsInteractionXAxisIndex);
  const ownerState = {
    id,
    classes: innerClasses,
    isHighlighted: xAxisInteractionIndex === dataIndex || isHighlighted,
    isFaded,
    color: color2,
    skipAnimation
  };
  const classes = useUtilityClasses16(ownerState);
  return (0, import_jsx_runtime54.jsx)(Circle, _extends({}, other, {
    cx: x2,
    cy: y2,
    r: 5,
    fill: (theme.vars || theme).palette.background.paper,
    stroke: color2,
    strokeWidth: 2,
    className: classes.root,
    onClick,
    cursor: onClick ? "pointer" : "unset"
  }, interactionProps));
}
true ? CircleMarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types33.default.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: import_prop_types33.default.number.isRequired,
  id: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]).isRequired,
  /**
   * The shape of the marker.
   */
  shape: import_prop_types33.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types33.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkElement.js
var React77 = __toESM(require_react(), 1);
var import_prop_types34 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/getSymbol.js
function getSymbol(shape) {
  switch (shape) {
    case "circle":
      return 0;
    case "cross":
      return 1;
    case "diamond":
      return 2;
    case "square":
      return 3;
    case "star":
      return 4;
    case "triangle":
      return 5;
    case "wye":
      return 6;
    default:
      return 0;
  }
}

// node_modules/@mui/x-charts/esm/LineChart/MarkElement.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var _excluded38 = ["x", "y", "id", "classes", "color", "shape", "dataIndex", "onClick", "skipAnimation"];
var MarkElementPath = styled_default("path", {
  name: "MuiMarkElement",
  slot: "Root"
})(({
  ownerState,
  theme
}) => ({
  fill: (theme.vars || theme).palette.background.paper,
  stroke: ownerState.color,
  strokeWidth: 2,
  [`&.${markElementClasses.animate}`]: {
    transitionDuration: `${ANIMATION_DURATION_MS}ms`,
    transitionProperty: "transform, transform-origin",
    transitionTimingFunction: ANIMATION_TIMING_FUNCTION
  }
}));
function MarkElement(props) {
  const {
    x: x2,
    y: y2,
    id,
    classes: innerClasses,
    color: color2,
    shape,
    dataIndex,
    onClick,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id,
    dataIndex
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id
  });
  const store = useStore();
  const xAxisInteractionIndex = useSelector(store, selectorChartsInteractionXAxisIndex);
  const ownerState = {
    id,
    classes: innerClasses,
    isHighlighted: xAxisInteractionIndex === dataIndex || isHighlighted,
    isFaded,
    color: color2,
    skipAnimation
  };
  const classes = useUtilityClasses16(ownerState);
  return (0, import_jsx_runtime55.jsx)(MarkElementPath, _extends({}, other, {
    style: {
      transform: `translate(${x2}px, ${y2}px)`,
      transformOrigin: `${x2}px ${y2}px`
    },
    ownerState,
    className: classes.root,
    d: Symbol2(symbolsFill[getSymbol(shape)])(),
    onClick,
    cursor: onClick ? "pointer" : "unset"
  }, interactionProps));
}
true ? MarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types34.default.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: import_prop_types34.default.number.isRequired,
  id: import_prop_types34.default.oneOfType([import_prop_types34.default.number, import_prop_types34.default.string]).isRequired,
  /**
   * The shape of the marker.
   */
  shape: import_prop_types34.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired,
  /**
   * If `true`, animations are skipped.
   */
  skipAnimation: import_prop_types34.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkPlot.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var _excluded39 = ["slots", "slotProps", "skipAnimation", "onItemClick"];
function MarkPlot(props) {
  const {
    slots,
    slotProps,
    skipAnimation: inSkipAnimation,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const chartId = useChartId2();
  const {
    instance
  } = useChartContext();
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return (0, import_jsx_runtime56.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.map((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          showMark = true,
          shape = "circle"
        } = series[seriesId];
        if (showMark === false) {
          return null;
        }
        const xScale = getValueToPositionMapper(xAxis[xAxisId].scale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        if (xData === void 0) {
          throw new Error(`MUI X: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
        }
        const clipId = cleanId(`${chartId}-${seriesId}-line-clip`);
        const colorGetter = getColor_default3(series[seriesId], xAxis[xAxisId], yAxis[yAxisId]);
        const Mark = (slots == null ? void 0 : slots.mark) ?? (shape === "circle" ? CircleMarkElement : MarkElement);
        return (0, import_jsx_runtime56.jsx)("g", {
          clipPath: `url(#${clipId})`,
          children: xData == null ? void 0 : xData.map((x2, index2) => {
            const value = data[index2] == null ? null : stackedData[index2][1];
            return {
              x: xScale(x2),
              y: value === null ? null : yScale(value),
              position: x2,
              value,
              index: index2
            };
          }).filter(({
            x: x2,
            y: y2,
            index: index2,
            position,
            value
          }) => {
            if (value === null || y2 === null) {
              return false;
            }
            if (!instance.isPointInside({
              x: x2,
              y: y2
            })) {
              return false;
            }
            if (showMark === true) {
              return true;
            }
            return showMark({
              x: x2,
              y: y2,
              index: index2,
              position,
              value
            });
          }).map(({
            x: x2,
            y: y2,
            index: index2
          }) => {
            return (0, import_jsx_runtime56.jsx)(Mark, _extends({
              id: seriesId,
              dataIndex: index2,
              shape,
              color: colorGetter(index2),
              x: x2,
              y: y2,
              skipAnimation,
              onClick: onItemClick && ((event) => onItemClick(event, {
                type: "line",
                seriesId,
                dataIndex: index2
              }))
            }, slotProps == null ? void 0 : slotProps.mark), `${seriesId}-${index2}`);
          })
        }, seriesId);
      });
    })
  }));
}
true ? MarkPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a line mark item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {LineItemIdentifier} lineItemIdentifier The line mark item identifier.
   */
  onItemClick: import_prop_types35.default.func,
  /**
   * If `true`, animations are skipped.
   */
  skipAnimation: import_prop_types35.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types35.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types35.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightPlot.js
var React80 = __toESM(require_react(), 1);
var import_prop_types37 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightElement.js
var React79 = __toESM(require_react(), 1);
var import_prop_types36 = __toESM(require_prop_types(), 1);
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var _excluded40 = ["x", "y", "id", "classes", "color", "shape"];
function getHighlightElementUtilityClass(slot) {
  return generateUtilityClass("MuiHighlightElement", slot);
}
var lineHighlightElementClasses = generateUtilityClasses("MuiHighlightElement", ["root"]);
var useUtilityClasses17 = (ownerState) => {
  const {
    classes,
    id
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`]
  };
  return composeClasses(slots, getHighlightElementUtilityClass, classes);
};
function LineHighlightElement(props) {
  const {
    x: x2,
    y: y2,
    color: color2,
    shape
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const classes = useUtilityClasses17(props);
  const Element = shape === "circle" ? "circle" : "path";
  const additionalProps = shape === "circle" ? {
    cx: 0,
    cy: 0,
    r: other.r === void 0 ? 5 : other.r
  } : {
    d: Symbol2(symbolsFill[getSymbol(shape)])()
  };
  const transformOrigin = reactMajor_default > 18 ? {
    transformOrigin: `${x2} ${y2}`
  } : {
    "transform-origin": `${x2} ${y2}`
  };
  return (0, import_jsx_runtime57.jsx)(Element, _extends({
    pointerEvents: "none",
    className: classes.root,
    transform: `translate(${x2} ${y2})`,
    fill: color2
  }, transformOrigin, additionalProps, other));
}
true ? LineHighlightElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types36.default.object,
  id: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.string]).isRequired,
  shape: import_prop_types36.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightPlot.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var _excluded41 = ["slots", "slotProps"];
function LineHighlightPlot(props) {
  const {
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const highlightedIndex = useSelector(store, selectorChartsInteractionXAxisIndex);
  if (highlightedIndex === null) {
    return null;
  }
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const Element = (slots == null ? void 0 : slots.lineHighlight) ?? LineHighlightElement;
  return (0, import_jsx_runtime58.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          disableHighlight,
          shape = "circle"
        } = series[seriesId];
        if (disableHighlight || data[highlightedIndex] == null) {
          return null;
        }
        const xScale = getValueToPositionMapper(xAxis[xAxisId].scale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        if (xData === void 0) {
          throw new Error(`MUI X: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
        }
        const x2 = xScale(xData[highlightedIndex]);
        const y2 = yScale(stackedData[highlightedIndex][1]);
        if (!instance.isPointInside({
          x: x2,
          y: y2
        })) {
          return null;
        }
        const colorGetter = getColor_default3(series[seriesId], xAxis[xAxisId], yAxis[yAxisId]);
        return (0, import_jsx_runtime58.jsx)(Element, _extends({
          id: seriesId,
          color: colorGetter(highlightedIndex),
          x: x2,
          y: y2,
          shape
        }, slotProps == null ? void 0 : slotProps.lineHighlight), `${seriesId}`);
      });
    })
  }));
}
true ? LineHighlightPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types37.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types37.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/useLineChartProps.js
var React81 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/LineChart/LineChart.plugins.js
var LINE_CHART_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/LineChart/useLineChartProps.js
var _excluded42 = ["xAxis", "yAxis", "series", "width", "height", "margin", "colors", "dataset", "sx", "onAreaClick", "onLineClick", "onMarkClick", "axisHighlight", "disableLineItemHighlight", "hideLegend", "grid", "children", "slots", "slotProps", "skipAnimation", "loading", "highlightedItem", "onHighlightChange", "className"];
var useLineChartProps = (props) => {
  var _a, _b, _c, _d, _e;
  const {
    xAxis,
    yAxis,
    series,
    width,
    height,
    margin,
    colors,
    dataset,
    sx,
    onAreaClick,
    onLineClick,
    onMarkClick,
    axisHighlight,
    disableLineItemHighlight,
    grid,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    highlightedItem,
    onHighlightChange,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const seriesWithDefault = React81.useMemo(() => series.map((s2) => _extends({
    disableHighlight: !!disableLineItemHighlight,
    type: "line"
  }, s2)), [disableLineItemHighlight, series]);
  const chartContainerProps = _extends({}, other, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    dataset,
    xAxis: xAxis ?? [{
      id: DEFAULT_X_AXIS_KEY,
      scaleType: "point",
      data: Array.from({
        length: Math.max(...series.map((s2) => (s2.data ?? dataset ?? []).length))
      }, (_, index2) => index2)
    }],
    yAxis,
    highlightedItem,
    onHighlightChange,
    disableAxisListener: ((_a = slotProps == null ? void 0 : slotProps.tooltip) == null ? void 0 : _a.trigger) !== "axis" && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    className,
    skipAnimation,
    plugins: LINE_CHART_PLUGINS
  });
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const clipPathGroupProps = {
    clipPath: `url(#${clipPathId})`
  };
  const clipPathProps = {
    id: clipPathId
  };
  const areaPlotProps = {
    slots,
    slotProps,
    onItemClick: onAreaClick
  };
  const linePlotProps = {
    slots,
    slotProps,
    onItemClick: onLineClick
  };
  const markPlotProps = {
    slots,
    slotProps,
    onItemClick: onMarkClick,
    skipAnimation
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({
    x: "line"
  }, axisHighlight);
  const lineHighlightPlotProps = {
    slots,
    slotProps
  };
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx,
    legendPosition: (_c = (_b = props.slotProps) == null ? void 0 : _b.legend) == null ? void 0 : _c.position,
    legendDirection: (_e = (_d = props.slotProps) == null ? void 0 : _d.legend) == null ? void 0 : _e.direction
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    areaPlotProps,
    linePlotProps,
    markPlotProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    lineHighlightPlotProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/LineChart/LineChart.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var LineChart = React82.forwardRef(function LineChart2(inProps, ref) {
  var _a, _b;
  const props = useThemeProps({
    props: inProps,
    name: "MuiLineChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    areaPlotProps,
    linePlotProps,
    markPlotProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    lineHighlightPlotProps,
    legendProps,
    children
  } = useLineChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  return (0, import_jsx_runtime59.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime59.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [!props.hideLegend && (0, import_jsx_runtime59.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime59.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime59.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime59.jsxs)("g", _extends({}, clipPathGroupProps, {
          children: [(0, import_jsx_runtime59.jsx)(AreaPlot, _extends({}, areaPlotProps)), (0, import_jsx_runtime59.jsx)(LinePlot, _extends({}, linePlotProps)), (0, import_jsx_runtime59.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime59.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps))]
        })), (0, import_jsx_runtime59.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), (0, import_jsx_runtime59.jsx)("g", {
          "data-drawing-container": true,
          children: (0, import_jsx_runtime59.jsx)(MarkPlot, _extends({}, markPlotProps))
        }), (0, import_jsx_runtime59.jsx)(LineHighlightPlot, _extends({}, lineHighlightPlotProps)), !props.loading && (0, import_jsx_runtime59.jsx)(Tooltip, _extends({}, (_b = props.slotProps) == null ? void 0 : _b.tooltip)), (0, import_jsx_runtime59.jsx)(ChartsClipPath, _extends({}, clipPathProps)), children]
      }))]
    }))
  }));
});
true ? LineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types38.default.shape({
    current: import_prop_types38.default.object
  }),
  /**
   * The configuration of axes highlight.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   * @default { x: 'line' }
   */
  axisHighlight: import_prop_types38.default.shape({
    x: import_prop_types38.default.oneOf(["band", "line", "none"]),
    y: import_prop_types38.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types38.default.node,
  className: import_prop_types38.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string), import_prop_types38.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types38.default.arrayOf(import_prop_types38.default.object),
  desc: import_prop_types38.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types38.default.bool,
  /**
   * If `true`, render the line highlight item.
   */
  disableLineItemHighlight: import_prop_types38.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types38.default.shape({
    horizontal: import_prop_types38.default.bool,
    vertical: import_prop_types38.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types38.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types38.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types38.default.shape({
    dataIndex: import_prop_types38.default.number,
    seriesId: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types38.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types38.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types38.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.shape({
    bottom: import_prop_types38.default.number,
    left: import_prop_types38.default.number,
    right: import_prop_types38.default.number,
    top: import_prop_types38.default.number
  })]),
  /**
   * Callback fired when an area element is clicked.
   */
  onAreaClick: import_prop_types38.default.func,
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | AxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types38.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types38.default.func,
  /**
   * Callback fired when a line element is clicked.
   */
  onLineClick: import_prop_types38.default.func,
  /**
   * Callback fired when a mark element is clicked.
   */
  onMarkClick: import_prop_types38.default.func,
  /**
   * The series to display in the line chart.
   * An array of [[LineSeriesType]] objects.
   */
  series: import_prop_types38.default.arrayOf(import_prop_types38.default.object).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types38.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types38.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types38.default.object,
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
  theme: import_prop_types38.default.oneOf(["dark", "light"]),
  title: import_prop_types38.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types38.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    barGapRatio: import_prop_types38.default.number,
    categoryGapRatio: import_prop_types38.default.number,
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      type: import_prop_types38.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types38.default.string,
      values: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number, import_prop_types38.default.string]).isRequired)
    }), import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["band"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      type: import_prop_types38.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types38.default.string,
      values: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number, import_prop_types38.default.string]).isRequired)
    }), import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["point"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["log"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["pow"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["sqrt"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["time"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["utc"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["x"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    height: import_prop_types38.default.number,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["linear"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelMinGap: import_prop_types38.default.number,
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    barGapRatio: import_prop_types38.default.number,
    categoryGapRatio: import_prop_types38.default.number,
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      type: import_prop_types38.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types38.default.string,
      values: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number, import_prop_types38.default.string]).isRequired)
    }), import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["band"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      type: import_prop_types38.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types38.default.string,
      values: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number, import_prop_types38.default.string]).isRequired)
    }), import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["point"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["log"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["pow"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["sqrt"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["time"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["utc"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  }), import_prop_types38.default.shape({
    axis: import_prop_types38.default.oneOf(["y"]),
    classes: import_prop_types38.default.object,
    colorMap: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
      color: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.string.isRequired), import_prop_types38.default.func]).isRequired,
      max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
      type: import_prop_types38.default.oneOf(["continuous"]).isRequired
    }), import_prop_types38.default.shape({
      colors: import_prop_types38.default.arrayOf(import_prop_types38.default.string).isRequired,
      thresholds: import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]).isRequired).isRequired,
      type: import_prop_types38.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types38.default.array,
    dataKey: import_prop_types38.default.string,
    disableLine: import_prop_types38.default.bool,
    disableTicks: import_prop_types38.default.bool,
    domainLimit: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["nice", "strict"]), import_prop_types38.default.func]),
    fill: import_prop_types38.default.string,
    hideTooltip: import_prop_types38.default.bool,
    id: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    ignoreTooltip: import_prop_types38.default.bool,
    label: import_prop_types38.default.string,
    labelStyle: import_prop_types38.default.object,
    max: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    min: import_prop_types38.default.oneOfType([import_prop_types38.default.instanceOf(Date), import_prop_types38.default.number]),
    offset: import_prop_types38.default.number,
    position: import_prop_types38.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types38.default.bool,
    scaleType: import_prop_types38.default.oneOf(["linear"]),
    slotProps: import_prop_types38.default.object,
    slots: import_prop_types38.default.object,
    stroke: import_prop_types38.default.string,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    tickInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.array, import_prop_types38.default.func]),
    tickLabelInterval: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["auto"]), import_prop_types38.default.func]),
    tickLabelPlacement: import_prop_types38.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types38.default.object,
    tickMaxStep: import_prop_types38.default.number,
    tickMinStep: import_prop_types38.default.number,
    tickNumber: import_prop_types38.default.number,
    tickPlacement: import_prop_types38.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types38.default.number,
    valueFormatter: import_prop_types38.default.func,
    width: import_prop_types38.default.number
  })]).isRequired)
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieChart.js
var React89 = __toESM(require_react(), 1);
var import_prop_types44 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PiePlot.js
var React88 = __toESM(require_react(), 1);
var import_prop_types43 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PieArcPlot.js
var React85 = __toESM(require_react(), 1);
var import_prop_types40 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PieArc.js
var React83 = __toESM(require_react(), 1);
var import_prop_types39 = __toESM(require_prop_types(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var _excluded43 = ["classes", "color", "dataIndex", "id", "isFaded", "isHighlighted", "onClick", "cornerRadius", "startAngle", "endAngle", "innerRadius", "outerRadius", "paddingAngle", "skipAnimation"];
function getPieArcUtilityClass(slot) {
  return generateUtilityClass("MuiPieArc", slot);
}
var pieArcClasses = generateUtilityClasses("MuiPieArc", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses18 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted,
    dataIndex
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, `data-index-${dataIndex}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getPieArcUtilityClass, classes);
};
var PieArcRoot = styled_default("path", {
  name: "MuiPieArc",
  slot: "Root",
  overridesResolver: (_, styles) => styles.arc
  // FIXME: Inconsistent naming with slot
})(({
  theme
}) => ({
  // Got to move stroke to an element prop instead of style.
  stroke: (theme.vars || theme).palette.background.paper,
  transitionProperty: "opacity, fill, filter",
  transitionDuration: `${ANIMATION_DURATION_MS}ms`,
  transitionTimingFunction: ANIMATION_TIMING_FUNCTION
}));
var PieArc = React83.forwardRef(function PieArc2(props, ref) {
  const {
    classes: innerClasses,
    color: color2,
    dataIndex,
    id,
    isFaded,
    isHighlighted,
    onClick,
    cornerRadius,
    startAngle,
    endAngle,
    innerRadius,
    outerRadius,
    paddingAngle,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const ownerState = {
    id,
    dataIndex,
    classes: innerClasses,
    color: color2,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses18(ownerState);
  const interactionProps = useInteractionItemProps({
    type: "pie",
    seriesId: id,
    dataIndex
  });
  const animatedProps = useAnimatePieArc({
    cornerRadius,
    startAngle,
    endAngle,
    innerRadius,
    outerRadius,
    paddingAngle,
    skipAnimation,
    ref
  });
  return (0, import_jsx_runtime60.jsx)(PieArcRoot, _extends({
    onClick,
    cursor: onClick ? "pointer" : "unset",
    ownerState,
    className: classes.root,
    fill: ownerState.color,
    opacity: ownerState.isFaded ? 0.3 : 1,
    filter: ownerState.isHighlighted ? "brightness(120%)" : "none",
    strokeWidth: 1,
    strokeLinejoin: "round"
  }, other, interactionProps, animatedProps));
});
true ? PieArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types39.default.object,
  cornerRadius: import_prop_types39.default.number.isRequired,
  dataIndex: import_prop_types39.default.number.isRequired,
  endAngle: import_prop_types39.default.number.isRequired,
  id: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]).isRequired,
  innerRadius: import_prop_types39.default.number.isRequired,
  isFaded: import_prop_types39.default.bool.isRequired,
  isHighlighted: import_prop_types39.default.bool.isRequired,
  outerRadius: import_prop_types39.default.number.isRequired,
  paddingAngle: import_prop_types39.default.number.isRequired,
  /**
   * @default false
   */
  skipAnimation: import_prop_types39.default.bool.isRequired,
  startAngle: import_prop_types39.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/dataTransform/useTransformData.js
var React84 = __toESM(require_react(), 1);
function useTransformData(series) {
  const {
    id: seriesId,
    data,
    faded,
    highlighted,
    paddingAngle: basePaddingAngle = 0,
    innerRadius: baseInnerRadius = 0,
    arcLabelRadius: baseArcLabelRadius,
    outerRadius: baseOuterRadius,
    cornerRadius: baseCornerRadius = 0
  } = series;
  const {
    isFaded: isItemFaded,
    isHighlighted: isItemHighlighted
  } = useItemHighlightedGetter();
  const dataWithHighlight = React84.useMemo(() => data.map((item, itemIndex) => {
    const currentItem = {
      seriesId,
      dataIndex: itemIndex
    };
    const isHighlighted = isItemHighlighted(currentItem);
    const isFaded = !isHighlighted && isItemFaded(currentItem);
    const attributesOverride = _extends({
      additionalRadius: 0
    }, isFaded && faded || isHighlighted && highlighted || {});
    const paddingAngle = Math.max(0, deg2rad(attributesOverride.paddingAngle ?? basePaddingAngle));
    const innerRadius = Math.max(0, attributesOverride.innerRadius ?? baseInnerRadius);
    const outerRadius = Math.max(0, attributesOverride.outerRadius ?? baseOuterRadius + attributesOverride.additionalRadius);
    const cornerRadius = attributesOverride.cornerRadius ?? baseCornerRadius;
    const arcLabelRadius = attributesOverride.arcLabelRadius ?? baseArcLabelRadius ?? (innerRadius + outerRadius) / 2;
    return _extends({}, item, attributesOverride, {
      dataIndex: itemIndex,
      isFaded,
      isHighlighted,
      paddingAngle,
      innerRadius,
      outerRadius,
      cornerRadius,
      arcLabelRadius
    });
  }), [baseCornerRadius, baseInnerRadius, baseOuterRadius, basePaddingAngle, baseArcLabelRadius, data, faded, highlighted, isItemFaded, isItemHighlighted, seriesId]);
  return dataWithHighlight;
}

// node_modules/@mui/x-charts/esm/PieChart/PieArcPlot.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var _excluded44 = ["slots", "slotProps", "innerRadius", "outerRadius", "cornerRadius", "paddingAngle", "id", "highlighted", "faded", "data", "onItemClick", "skipAnimation"];
function PieArcPlot(props) {
  const {
    slots,
    slotProps,
    innerRadius = 0,
    outerRadius,
    cornerRadius = 0,
    paddingAngle = 0,
    id,
    highlighted,
    faded = {
      additionalRadius: -5
    },
    data,
    onItemClick,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const transformedData = useTransformData({
    innerRadius,
    outerRadius,
    cornerRadius,
    paddingAngle,
    id,
    highlighted,
    faded,
    data
  });
  if (data.length === 0) {
    return null;
  }
  const Arc = (slots == null ? void 0 : slots.pieArc) ?? PieArc;
  return (0, import_jsx_runtime61.jsx)("g", _extends({}, other, {
    children: transformedData.map((item, index2) => (0, import_jsx_runtime61.jsx)(Arc, _extends({
      startAngle: item.startAngle,
      endAngle: item.endAngle,
      paddingAngle: item.paddingAngle,
      innerRadius: item.innerRadius,
      outerRadius: item.outerRadius,
      cornerRadius: item.cornerRadius,
      skipAnimation: skipAnimation ?? false,
      id,
      color: item.color,
      dataIndex: index2,
      isFaded: item.isFaded,
      isHighlighted: item.isHighlighted,
      onClick: onItemClick && ((event) => {
        onItemClick(event, {
          type: "pie",
          seriesId: id,
          dataIndex: index2
        }, item);
      })
    }, slotProps == null ? void 0 : slotProps.pieArc), item.dataIndex))
  }));
}
true ? PieArcPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The radius between circle center and the arc label in px.
   * @default (innerRadius - outerRadius) / 2
   */
  arcLabelRadius: import_prop_types40.default.number,
  /**
   * The radius applied to arc corners (similar to border radius).
   * @default 0
   */
  cornerRadius: import_prop_types40.default.number,
  data: import_prop_types40.default.arrayOf(import_prop_types40.default.shape({
    color: import_prop_types40.default.string.isRequired,
    endAngle: import_prop_types40.default.number.isRequired,
    formattedValue: import_prop_types40.default.string.isRequired,
    id: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    index: import_prop_types40.default.number.isRequired,
    label: import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.string]),
    labelMarkType: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["circle", "line", "square"]), import_prop_types40.default.func]),
    padAngle: import_prop_types40.default.number.isRequired,
    startAngle: import_prop_types40.default.number.isRequired,
    value: import_prop_types40.default.number.isRequired
  })).isRequired,
  /**
   * Override the arc attributes when it is faded.
   * @default { additionalRadius: -5 }
   */
  faded: import_prop_types40.default.shape({
    additionalRadius: import_prop_types40.default.number,
    arcLabelRadius: import_prop_types40.default.number,
    color: import_prop_types40.default.string,
    cornerRadius: import_prop_types40.default.number,
    innerRadius: import_prop_types40.default.number,
    outerRadius: import_prop_types40.default.number,
    paddingAngle: import_prop_types40.default.number
  }),
  /**
   * Override the arc attributes when it is highlighted.
   */
  highlighted: import_prop_types40.default.shape({
    additionalRadius: import_prop_types40.default.number,
    arcLabelRadius: import_prop_types40.default.number,
    color: import_prop_types40.default.string,
    cornerRadius: import_prop_types40.default.number,
    innerRadius: import_prop_types40.default.number,
    outerRadius: import_prop_types40.default.number,
    paddingAngle: import_prop_types40.default.number
  }),
  id: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]).isRequired,
  /**
   * The radius between circle center and the beginning of the arc.
   * @default 0
   */
  innerRadius: import_prop_types40.default.number,
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onItemClick: import_prop_types40.default.func,
  /**
   * The radius between circle center and the end of the arc.
   */
  outerRadius: import_prop_types40.default.number.isRequired,
  /**
   * The padding angle (deg) between two arcs.
   * @default 0
   */
  paddingAngle: import_prop_types40.default.number,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types40.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types40.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types40.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieArcLabelPlot.js
var React87 = __toESM(require_react(), 1);
var import_prop_types42 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PieArcLabel.js
var React86 = __toESM(require_react(), 1);
var import_prop_types41 = __toESM(require_prop_types(), 1);
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var _excluded45 = ["id", "classes", "color", "startAngle", "endAngle", "paddingAngle", "arcLabelRadius", "innerRadius", "outerRadius", "cornerRadius", "formattedArcLabel", "isHighlighted", "isFaded", "style", "skipAnimation"];
function getPieArcLabelUtilityClass(slot) {
  return generateUtilityClass("MuiPieArcLabel", slot);
}
var pieArcLabelClasses = generateUtilityClasses("MuiPieArcLabel", ["root", "highlighted", "faded", "animate", "series"]);
var useUtilityClasses19 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted,
    skipAnimation
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded", !skipAnimation && "animate"]
  };
  return composeClasses(slots, getPieArcLabelUtilityClass, classes);
};
var PieArcLabelRoot = styled_default("text", {
  name: "MuiPieArcLabel",
  slot: "Root"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.text.primary,
  textAnchor: "middle",
  dominantBaseline: "middle",
  pointerEvents: "none",
  animationName: "animate-opacity",
  animationDuration: "0s",
  animationTimingFunction: ANIMATION_TIMING_FUNCTION,
  [`&.${pieArcLabelClasses.animate}`]: {
    animationDuration: `${ANIMATION_DURATION_MS}ms`
  },
  "@keyframes animate-opacity": {
    from: {
      opacity: 0
    }
  }
}));
var PieArcLabel = React86.forwardRef(function PieArcLabel2(props, ref) {
  const {
    id,
    classes: innerClasses,
    color: color2,
    startAngle,
    endAngle,
    paddingAngle,
    innerRadius,
    outerRadius,
    cornerRadius,
    formattedArcLabel,
    isHighlighted,
    isFaded,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const ownerState = {
    id,
    classes: innerClasses,
    color: color2,
    isFaded,
    isHighlighted,
    skipAnimation
  };
  const classes = useUtilityClasses19(ownerState);
  const animatedProps = useAnimatePieArcLabel({
    cornerRadius,
    startAngle,
    endAngle,
    innerRadius,
    outerRadius,
    paddingAngle,
    skipAnimation,
    ref
  });
  return (0, import_jsx_runtime62.jsx)(PieArcLabelRoot, _extends({
    className: classes.root
  }, other, animatedProps, {
    children: formattedArcLabel
  }));
});
true ? PieArcLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  arcLabelRadius: import_prop_types41.default.number.isRequired,
  classes: import_prop_types41.default.object,
  color: import_prop_types41.default.string.isRequired,
  cornerRadius: import_prop_types41.default.number.isRequired,
  endAngle: import_prop_types41.default.number.isRequired,
  formattedArcLabel: import_prop_types41.default.string,
  id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]).isRequired,
  innerRadius: import_prop_types41.default.number.isRequired,
  isFaded: import_prop_types41.default.bool.isRequired,
  isHighlighted: import_prop_types41.default.bool.isRequired,
  outerRadius: import_prop_types41.default.number.isRequired,
  paddingAngle: import_prop_types41.default.number.isRequired,
  skipAnimation: import_prop_types41.default.bool.isRequired,
  startAngle: import_prop_types41.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieArcLabelPlot.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var _excluded46 = ["arcLabel", "arcLabelMinAngle", "arcLabelRadius", "cornerRadius", "data", "faded", "highlighted", "id", "innerRadius", "outerRadius", "paddingAngle", "skipAnimation", "slotProps", "slots"];
var RATIO = 180 / Math.PI;
function getItemLabel(arcLabel, arcLabelMinAngle, item) {
  var _a;
  if (!arcLabel) {
    return null;
  }
  const angle = (item.endAngle - item.startAngle) * RATIO;
  if (angle < arcLabelMinAngle) {
    return null;
  }
  switch (arcLabel) {
    case "label":
      return getLabel(item.label, "arc");
    case "value":
      return (_a = item.value) == null ? void 0 : _a.toString();
    case "formattedValue":
      return item.formattedValue;
    default:
      return arcLabel(_extends({}, item, {
        label: getLabel(item.label, "arc")
      }));
  }
}
function PieArcLabelPlot(props) {
  const {
    arcLabel,
    arcLabelMinAngle = 0,
    arcLabelRadius,
    cornerRadius = 0,
    data,
    faded = {
      additionalRadius: -5
    },
    highlighted,
    id,
    innerRadius,
    outerRadius,
    paddingAngle = 0,
    skipAnimation,
    slotProps,
    slots
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
  const transformedData = useTransformData({
    innerRadius,
    outerRadius,
    arcLabelRadius,
    cornerRadius,
    paddingAngle,
    id,
    highlighted,
    faded,
    data
  });
  if (data.length === 0) {
    return null;
  }
  const ArcLabel = (slots == null ? void 0 : slots.pieArcLabel) ?? PieArcLabel;
  return (0, import_jsx_runtime63.jsx)("g", _extends({}, other, {
    children: transformedData.map((item) => (0, import_jsx_runtime63.jsx)(ArcLabel, _extends({
      startAngle: item.startAngle,
      endAngle: item.endAngle,
      paddingAngle: item.paddingAngle,
      innerRadius: item.innerRadius,
      outerRadius: item.outerRadius,
      arcLabelRadius: item.arcLabelRadius,
      cornerRadius: item.cornerRadius,
      id,
      color: item.color,
      isFaded: item.isFaded,
      isHighlighted: item.isHighlighted,
      formattedArcLabel: getItemLabel(arcLabel, arcLabelMinAngle, item),
      skipAnimation: skipAnimation ?? false
    }, slotProps == null ? void 0 : slotProps.pieArcLabel), item.id ?? item.dataIndex))
  }));
}
true ? PieArcLabelPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The label displayed into the arc.
   */
  arcLabel: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["formattedValue", "label", "value"]), import_prop_types42.default.func]),
  /**
   * The minimal angle required to display the arc label.
   * @default 0
   */
  arcLabelMinAngle: import_prop_types42.default.number,
  /**
   * The radius between circle center and the arc label in px.
   * @default (innerRadius - outerRadius) / 2
   */
  arcLabelRadius: import_prop_types42.default.number,
  /**
   * The radius applied to arc corners (similar to border radius).
   * @default 0
   */
  cornerRadius: import_prop_types42.default.number,
  data: import_prop_types42.default.arrayOf(import_prop_types42.default.shape({
    color: import_prop_types42.default.string.isRequired,
    endAngle: import_prop_types42.default.number.isRequired,
    formattedValue: import_prop_types42.default.string.isRequired,
    id: import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.string]),
    index: import_prop_types42.default.number.isRequired,
    label: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.string]),
    labelMarkType: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["circle", "line", "square"]), import_prop_types42.default.func]),
    padAngle: import_prop_types42.default.number.isRequired,
    startAngle: import_prop_types42.default.number.isRequired,
    value: import_prop_types42.default.number.isRequired
  })).isRequired,
  /**
   * Override the arc attributes when it is faded.
   * @default { additionalRadius: -5 }
   */
  faded: import_prop_types42.default.shape({
    additionalRadius: import_prop_types42.default.number,
    arcLabelRadius: import_prop_types42.default.number,
    color: import_prop_types42.default.string,
    cornerRadius: import_prop_types42.default.number,
    innerRadius: import_prop_types42.default.number,
    outerRadius: import_prop_types42.default.number,
    paddingAngle: import_prop_types42.default.number
  }),
  /**
   * Override the arc attributes when it is highlighted.
   */
  highlighted: import_prop_types42.default.shape({
    additionalRadius: import_prop_types42.default.number,
    arcLabelRadius: import_prop_types42.default.number,
    color: import_prop_types42.default.string,
    cornerRadius: import_prop_types42.default.number,
    innerRadius: import_prop_types42.default.number,
    outerRadius: import_prop_types42.default.number,
    paddingAngle: import_prop_types42.default.number
  }),
  id: import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.string]).isRequired,
  /**
   * The radius between circle center and the beginning of the arc.
   * @default 0
   */
  innerRadius: import_prop_types42.default.number,
  /**
   * The radius between circle center and the end of the arc.
   */
  outerRadius: import_prop_types42.default.number.isRequired,
  /**
   * The padding angle (deg) between two arcs.
   * @default 0
   */
  paddingAngle: import_prop_types42.default.number,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types42.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types42.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types42.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/internals/getPercentageValue.js
function getPercentageValue(value, refValue) {
  if (typeof value === "number") {
    return value;
  }
  if (value === "100%") {
    return refValue;
  }
  if (value.endsWith("%")) {
    const percentage = Number.parseFloat(value.slice(0, value.length - 1));
    if (!Number.isNaN(percentage)) {
      return percentage * refValue / 100;
    }
  }
  if (value.endsWith("px")) {
    const val = Number.parseFloat(value.slice(0, value.length - 2));
    if (!Number.isNaN(val)) {
      return val;
    }
  }
  throw new Error(`MUI X: Received an unknown value "${value}". It should be a number, or a string with a percentage value.`);
}

// node_modules/@mui/x-charts/esm/PieChart/getPieCoordinates.js
function getPieCoordinates(series, drawing) {
  const {
    height,
    width
  } = drawing;
  const {
    cx: cxParam,
    cy: cyParam
  } = series;
  const availableRadius = Math.min(width, height) / 2;
  const cx = getPercentageValue(cxParam ?? "50%", width);
  const cy = getPercentageValue(cyParam ?? "50%", height);
  return {
    cx,
    cy,
    availableRadius
  };
}

// node_modules/@mui/x-charts/esm/PieChart/PiePlot.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
function PiePlot(props) {
  const {
    skipAnimation: inSkipAnimation,
    slots,
    slotProps,
    onItemClick
  } = props;
  const seriesData = usePieSeriesContext();
  const {
    left,
    top,
    width,
    height
  } = useDrawingArea();
  const skipAnimation = useSkipAnimation(inSkipAnimation);
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    seriesOrder
  } = seriesData;
  return (0, import_jsx_runtime64.jsxs)("g", {
    children: [seriesOrder.map((seriesId) => {
      const {
        innerRadius: innerRadiusParam,
        outerRadius: outerRadiusParam,
        cornerRadius,
        paddingAngle,
        data,
        cx: cxParam,
        cy: cyParam,
        highlighted,
        faded
      } = series[seriesId];
      const {
        cx,
        cy,
        availableRadius
      } = getPieCoordinates({
        cx: cxParam,
        cy: cyParam
      }, {
        width,
        height
      });
      const outerRadius = getPercentageValue(outerRadiusParam ?? availableRadius, availableRadius);
      const innerRadius = getPercentageValue(innerRadiusParam ?? 0, availableRadius);
      return (0, import_jsx_runtime64.jsx)("g", {
        transform: `translate(${left + cx}, ${top + cy})`,
        children: (0, import_jsx_runtime64.jsx)(PieArcPlot, {
          innerRadius,
          outerRadius,
          cornerRadius,
          paddingAngle,
          id: seriesId,
          data,
          skipAnimation,
          highlighted,
          faded,
          onItemClick,
          slots,
          slotProps
        })
      }, seriesId);
    }), seriesOrder.map((seriesId) => {
      const {
        innerRadius: innerRadiusParam,
        outerRadius: outerRadiusParam,
        arcLabelRadius: arcLabelRadiusParam,
        cornerRadius,
        paddingAngle,
        arcLabel,
        arcLabelMinAngle,
        data,
        cx: cxParam,
        cy: cyParam
      } = series[seriesId];
      const {
        cx,
        cy,
        availableRadius
      } = getPieCoordinates({
        cx: cxParam,
        cy: cyParam
      }, {
        width,
        height
      });
      const outerRadius = getPercentageValue(outerRadiusParam ?? availableRadius, availableRadius);
      const innerRadius = getPercentageValue(innerRadiusParam ?? 0, availableRadius);
      const arcLabelRadius = arcLabelRadiusParam === void 0 ? (outerRadius + innerRadius) / 2 : getPercentageValue(arcLabelRadiusParam, availableRadius);
      return (0, import_jsx_runtime64.jsx)("g", {
        transform: `translate(${left + cx}, ${top + cy})`,
        children: (0, import_jsx_runtime64.jsx)(PieArcLabelPlot, {
          innerRadius,
          outerRadius: outerRadius ?? availableRadius,
          arcLabelRadius,
          cornerRadius,
          paddingAngle,
          id: seriesId,
          data,
          skipAnimation,
          arcLabel,
          arcLabelMinAngle,
          slots,
          slotProps
        })
      }, seriesId);
    })]
  });
}
true ? PiePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onItemClick: import_prop_types43.default.func,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types43.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types43.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types43.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieChart.plugins.js
var PIE_CHART_PLUGINS = [useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/PieChart/PieChart.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var _excluded47 = ["series", "width", "height", "margin", "colors", "sx", "skipAnimation", "hideLegend", "children", "slots", "slotProps", "onItemClick", "loading", "highlightedItem", "onHighlightChange", "className"];
var defaultMargin = {
  top: 5,
  bottom: 5,
  left: 5,
  right: 5
};
var PieChart = React89.forwardRef(function PieChart2(inProps, ref) {
  var _a, _b, _c, _d, _e, _f;
  const props = useThemeProps({
    props: inProps,
    name: "MuiPieChart"
  });
  const {
    series,
    width,
    height,
    margin: marginProps,
    colors,
    sx,
    skipAnimation,
    hideLegend,
    children,
    slots,
    slotProps,
    onItemClick,
    loading,
    highlightedItem,
    onHighlightChange,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const margin = defaultizeMargin(marginProps, defaultMargin);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(_extends({}, other, {
    series: series.map((s2) => _extends({
      type: "pie"
    }, s2)),
    width,
    height,
    margin,
    colors,
    highlightedItem,
    onHighlightChange,
    className,
    skipAnimation,
    plugins: PIE_CHART_PLUGINS
  }), ref);
  const Tooltip = (slots == null ? void 0 : slots.tooltip) ?? ChartsTooltip;
  return (0, import_jsx_runtime65.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime65.jsxs)(ChartsWrapper, {
      legendPosition: (_b = (_a = props.slotProps) == null ? void 0 : _a.legend) == null ? void 0 : _b.position,
      legendDirection: ((_d = (_c = props == null ? void 0 : props.slotProps) == null ? void 0 : _c.legend) == null ? void 0 : _d.direction) ?? "vertical",
      sx,
      children: [!hideLegend && (0, import_jsx_runtime65.jsx)(ChartsLegend, {
        direction: ((_f = (_e = props == null ? void 0 : props.slotProps) == null ? void 0 : _e.legend) == null ? void 0 : _f.direction) ?? "vertical",
        slots,
        slotProps
      }), (0, import_jsx_runtime65.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime65.jsx)(PiePlot, {
          slots,
          slotProps,
          onItemClick
        }), (0, import_jsx_runtime65.jsx)(ChartsOverlay, {
          loading,
          slots,
          slotProps
        }), !loading && (0, import_jsx_runtime65.jsx)(Tooltip, _extends({
          trigger: "item"
        }, slotProps == null ? void 0 : slotProps.tooltip)), children]
      }))]
    })
  }));
});
true ? PieChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types44.default.shape({
    current: import_prop_types44.default.object
  }),
  children: import_prop_types44.default.node,
  className: import_prop_types44.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.string), import_prop_types44.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types44.default.arrayOf(import_prop_types44.default.object),
  desc: import_prop_types44.default.string,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types44.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types44.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types44.default.shape({
    dataIndex: import_prop_types44.default.number,
    seriesId: import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types44.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types44.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types44.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.shape({
    bottom: import_prop_types44.default.number,
    left: import_prop_types44.default.number,
    right: import_prop_types44.default.number,
    top: import_prop_types44.default.number
  })]),
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types44.default.func,
  /**
   * Callback fired when a pie arc is clicked.
   */
  onItemClick: import_prop_types44.default.func,
  /**
   * The series to display in the pie chart.
   * An array of [[PieSeriesType]] objects.
   */
  series: import_prop_types44.default.arrayOf(import_prop_types44.default.object).isRequired,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types44.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types44.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types44.default.object,
  sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
  theme: import_prop_types44.default.oneOf(["dark", "light"]),
  title: import_prop_types44.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types44.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
var React94 = __toESM(require_react(), 1);
var import_prop_types48 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
var React92 = __toESM(require_react(), 1);
var import_prop_types47 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
var React91 = __toESM(require_react(), 1);
var import_prop_types46 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterMarker.js
var React90 = __toESM(require_react(), 1);
var import_prop_types45 = __toESM(require_prop_types(), 1);
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var _excluded48 = ["seriesId", "isFaded", "isHighlighted", "x", "y", "color", "size", "dataIndex"];
function ScatterMarker(props) {
  const {
    isFaded,
    isHighlighted,
    x: x2,
    y: y2,
    color: color2,
    size
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
  return (0, import_jsx_runtime66.jsx)("circle", _extends({
    cx: 0,
    cy: 0,
    r: (isHighlighted ? 1.2 : 1) * size,
    transform: `translate(${x2}, ${y2})`,
    fill: color2,
    opacity: isFaded ? 0.3 : 1,
    cursor: other.onClick ? "pointer" : "unset"
  }, other));
}
true ? ScatterMarker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The fill color of the marker.
   */
  color: import_prop_types45.default.string.isRequired,
  /**
   * The index of the data point.
   */
  dataIndex: import_prop_types45.default.number.isRequired,
  /**
   * If `true`, the marker is faded.
   */
  isFaded: import_prop_types45.default.bool.isRequired,
  /**
   * If `true`, the marker is highlighted.
   */
  isHighlighted: import_prop_types45.default.bool.isRequired,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   */
  onClick: import_prop_types45.default.func,
  /**
   * The series ID.
   */
  seriesId: import_prop_types45.default.oneOfType([import_prop_types45.default.number, import_prop_types45.default.string]).isRequired,
  /**
   * The size of the marker.
   */
  size: import_prop_types45.default.number.isRequired,
  /**
   * The x coordinate of the data point.
   */
  x: import_prop_types45.default.number.isRequired,
  /**
   * The y coordinate of the data point.
   */
  y: import_prop_types45.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var _excluded49 = ["ownerState"];
function Scatter(props) {
  const {
    series,
    xScale,
    yScale,
    color: color2,
    colorGetter,
    onItemClick,
    slots,
    slotProps
  } = props;
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const isVoronoiEnabled = useSelector(store, selectorChartsVoronoiIsVoronoiEnabled);
  const skipInteractionHandlers = isVoronoiEnabled || series.disableHover;
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const cleanData = React91.useMemo(() => {
    const getXPosition = getValueToPositionMapper(xScale);
    const getYPosition = getValueToPositionMapper(yScale);
    const temp = [];
    for (let i = 0; i < series.data.length; i += 1) {
      const scatterPoint = series.data[i];
      const x2 = getXPosition(scatterPoint.x);
      const y2 = getYPosition(scatterPoint.y);
      const isInRange = instance.isPointInside({
        x: x2,
        y: y2
      });
      const pointCtx = {
        type: "scatter",
        seriesId: series.id,
        dataIndex: i
      };
      if (isInRange) {
        const currentItem = {
          seriesId: pointCtx.seriesId,
          dataIndex: pointCtx.dataIndex
        };
        const isItemHighlighted = isHighlighted(currentItem);
        temp.push({
          x: x2,
          y: y2,
          isHighlighted: isItemHighlighted,
          isFaded: !isItemHighlighted && isFaded(currentItem),
          id: scatterPoint.id,
          seriesId: series.id,
          type: "scatter",
          dataIndex: i,
          color: colorGetter ? colorGetter(i) : color2
        });
      }
    }
    return temp;
  }, [xScale, yScale, series.data, series.id, isHighlighted, isFaded, colorGetter, color2, instance]);
  const interactionItemProps = useInteractionAllItemProps(cleanData, skipInteractionHandlers);
  const Marker = (slots == null ? void 0 : slots.marker) ?? ScatterMarker;
  const _useSlotProps = useSlotProps_default({
    elementType: Marker,
    externalSlotProps: slotProps == null ? void 0 : slotProps.marker,
    additionalProps: {
      seriesId: series.id,
      size: series.markerSize
    },
    ownerState: {}
  }), markerProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded49);
  return (0, import_jsx_runtime67.jsx)("g", {
    children: cleanData.map((dataPoint, i) => (0, import_jsx_runtime67.jsx)(Marker, _extends({
      dataIndex: dataPoint.dataIndex,
      color: dataPoint.color,
      isHighlighted: dataPoint.isHighlighted,
      isFaded: dataPoint.isFaded,
      x: dataPoint.x,
      y: dataPoint.y,
      onClick: onItemClick && ((event) => onItemClick(event, {
        type: "scatter",
        seriesId: series.id,
        dataIndex: dataPoint.dataIndex
      }))
    }, interactionItemProps[i], markerProps), dataPoint.id ?? dataPoint.dataIndex))
  });
}
true ? Scatter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  color: import_prop_types46.default.string.isRequired,
  colorGetter: import_prop_types46.default.func,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types46.default.func,
  series: import_prop_types46.default.object.isRequired,
  slotProps: import_prop_types46.default.object,
  slots: import_prop_types46.default.object,
  xScale: import_prop_types46.default.func.isRequired,
  yScale: import_prop_types46.default.func.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
function ScatterPlot(props) {
  const {
    slots,
    slotProps,
    onItemClick
  } = props;
  const seriesData = useScatterSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    seriesOrder
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const defaultZAxisId = zAxisIds[0];
  const ScatterItems = (slots == null ? void 0 : slots.scatter) ?? Scatter;
  return (0, import_jsx_runtime68.jsx)(React92.Fragment, {
    children: seriesOrder.map((seriesId) => {
      const {
        id,
        xAxisId,
        yAxisId,
        zAxisId,
        color: color2
      } = series[seriesId];
      const colorGetter = getColor_default2(series[seriesId], xAxis[xAxisId ?? defaultXAxisId], yAxis[yAxisId ?? defaultYAxisId], zAxis[zAxisId ?? defaultZAxisId]);
      const xScale = xAxis[xAxisId ?? defaultXAxisId].scale;
      const yScale = yAxis[yAxisId ?? defaultYAxisId].scale;
      return (0, import_jsx_runtime68.jsx)(ScatterItems, _extends({
        xScale,
        yScale,
        color: color2,
        colorGetter,
        series: series[seriesId],
        onItemClick,
        slots,
        slotProps
      }, slotProps == null ? void 0 : slotProps.scatter), id);
    })
  });
}
true ? ScatterPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types47.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types47.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types47.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
var React93 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.plugins.js
var SCATTER_CHART_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight, useChartVoronoi];

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
var _excluded50 = ["xAxis", "yAxis", "zAxis", "series", "axisHighlight", "voronoiMaxRadius", "disableVoronoi", "hideLegend", "width", "height", "margin", "colors", "sx", "grid", "onItemClick", "children", "slots", "slotProps", "loading", "highlightedItem", "onHighlightChange", "className"];
var useScatterChartProps = (props) => {
  var _a, _b, _c, _d;
  const {
    xAxis,
    yAxis,
    zAxis,
    series,
    axisHighlight,
    voronoiMaxRadius,
    disableVoronoi,
    width,
    height,
    margin,
    colors,
    sx,
    grid,
    onItemClick,
    children,
    slots,
    slotProps,
    loading,
    highlightedItem,
    onHighlightChange,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
  const seriesWithDefault = React93.useMemo(() => series.map((s2) => _extends({
    type: "scatter"
  }, s2)), [series]);
  const chartContainerProps = _extends({}, other, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    xAxis,
    yAxis,
    zAxis,
    highlightedItem,
    onHighlightChange,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick: disableVoronoi ? void 0 : onItemClick,
    className,
    plugins: SCATTER_CHART_PLUGINS
  });
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const scatterPlotProps = {
    onItemClick: disableVoronoi ? onItemClick : void 0,
    slots,
    slotProps
  };
  const overlayProps = {
    loading,
    slots,
    slotProps
  };
  const legendProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({
    y: "none",
    x: "none"
  }, axisHighlight);
  const chartsWrapperProps = {
    sx,
    legendPosition: (_b = (_a = props.slotProps) == null ? void 0 : _a.legend) == null ? void 0 : _b.position,
    legendDirection: (_d = (_c = props.slotProps) == null ? void 0 : _c.legend) == null ? void 0 : _d.direction
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var ScatterChart = React94.forwardRef(function ScatterChart2(inProps, ref) {
  var _a, _b;
  const props = useThemeProps({
    props: inProps,
    name: "MuiScatterChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    children
  } = useScatterChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  return (0, import_jsx_runtime69.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime69.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [!props.hideLegend && (0, import_jsx_runtime69.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime69.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime69.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), (0, import_jsx_runtime69.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime69.jsx)("g", {
          "data-drawing-container": true,
          children: (0, import_jsx_runtime69.jsx)(ScatterPlot, _extends({}, scatterPlotProps))
        }), (0, import_jsx_runtime69.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime69.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps)), !props.loading && (0, import_jsx_runtime69.jsx)(Tooltip, _extends({
          trigger: "item"
        }, (_b = props.slotProps) == null ? void 0 : _b.tooltip)), children]
      }))]
    }))
  }));
});
true ? ScatterChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types48.default.shape({
    current: import_prop_types48.default.object
  }),
  /**
   * The configuration of axes highlight.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   * @default { x: 'none', y: 'none' }
   */
  axisHighlight: import_prop_types48.default.shape({
    x: import_prop_types48.default.oneOf(["band", "line", "none"]),
    y: import_prop_types48.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types48.default.node,
  className: import_prop_types48.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string), import_prop_types48.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types48.default.arrayOf(import_prop_types48.default.object),
  desc: import_prop_types48.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types48.default.bool,
  /**
   * If true, the interaction will not use the Voronoi cell and fall back to hover events.
   * @default false
   */
  disableVoronoi: import_prop_types48.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types48.default.shape({
    horizontal: import_prop_types48.default.bool,
    vertical: import_prop_types48.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types48.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types48.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types48.default.shape({
    dataIndex: import_prop_types48.default.number,
    seriesId: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types48.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types48.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types48.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.shape({
    bottom: import_prop_types48.default.number,
    left: import_prop_types48.default.number,
    right: import_prop_types48.default.number,
    top: import_prop_types48.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | AxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types48.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types48.default.func,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element if using Voronoi cells. Or the Mouse event from the scatter element, when `disableVoronoi=true`.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types48.default.func,
  /**
   * The series to display in the scatter chart.
   * An array of [[ScatterSeriesType]] objects.
   */
  series: import_prop_types48.default.arrayOf(import_prop_types48.default.object).isRequired,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types48.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types48.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types48.default.object,
  sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
  theme: import_prop_types48.default.oneOf(["dark", "light"]),
  title: import_prop_types48.default.string,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types48.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types48.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    barGapRatio: import_prop_types48.default.number,
    categoryGapRatio: import_prop_types48.default.number,
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      type: import_prop_types48.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types48.default.string,
      values: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number, import_prop_types48.default.string]).isRequired)
    }), import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["band"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      type: import_prop_types48.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types48.default.string,
      values: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number, import_prop_types48.default.string]).isRequired)
    }), import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["point"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["log"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["pow"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["sqrt"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["time"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["utc"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["x"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    height: import_prop_types48.default.number,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["linear"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelMinGap: import_prop_types48.default.number,
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    barGapRatio: import_prop_types48.default.number,
    categoryGapRatio: import_prop_types48.default.number,
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      type: import_prop_types48.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types48.default.string,
      values: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number, import_prop_types48.default.string]).isRequired)
    }), import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["band"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      type: import_prop_types48.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types48.default.string,
      values: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number, import_prop_types48.default.string]).isRequired)
    }), import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["point"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["log"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["pow"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["sqrt"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["time"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["utc"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  }), import_prop_types48.default.shape({
    axis: import_prop_types48.default.oneOf(["y"]),
    classes: import_prop_types48.default.object,
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    disableLine: import_prop_types48.default.bool,
    disableTicks: import_prop_types48.default.bool,
    domainLimit: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["nice", "strict"]), import_prop_types48.default.func]),
    fill: import_prop_types48.default.string,
    hideTooltip: import_prop_types48.default.bool,
    id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    ignoreTooltip: import_prop_types48.default.bool,
    label: import_prop_types48.default.string,
    labelStyle: import_prop_types48.default.object,
    max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
    offset: import_prop_types48.default.number,
    position: import_prop_types48.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types48.default.bool,
    scaleType: import_prop_types48.default.oneOf(["linear"]),
    slotProps: import_prop_types48.default.object,
    slots: import_prop_types48.default.object,
    stroke: import_prop_types48.default.string,
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    tickInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.array, import_prop_types48.default.func]),
    tickLabelInterval: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["auto"]), import_prop_types48.default.func]),
    tickLabelPlacement: import_prop_types48.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types48.default.object,
    tickMaxStep: import_prop_types48.default.number,
    tickMinStep: import_prop_types48.default.number,
    tickNumber: import_prop_types48.default.number,
    tickPlacement: import_prop_types48.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types48.default.number,
    valueFormatter: import_prop_types48.default.func,
    width: import_prop_types48.default.number
  })]).isRequired),
  /**
   * The configuration of the z-axes.
   */
  zAxis: import_prop_types48.default.arrayOf(import_prop_types48.default.shape({
    colorMap: import_prop_types48.default.oneOfType([import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      type: import_prop_types48.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types48.default.string,
      values: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number, import_prop_types48.default.string]).isRequired)
    }), import_prop_types48.default.shape({
      color: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string.isRequired), import_prop_types48.default.func]).isRequired,
      max: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      min: import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]),
      type: import_prop_types48.default.oneOf(["continuous"]).isRequired
    }), import_prop_types48.default.shape({
      colors: import_prop_types48.default.arrayOf(import_prop_types48.default.string).isRequired,
      thresholds: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.instanceOf(Date), import_prop_types48.default.number]).isRequired).isRequired,
      type: import_prop_types48.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types48.default.array,
    dataKey: import_prop_types48.default.string,
    id: import_prop_types48.default.string,
    max: import_prop_types48.default.number,
    min: import_prop_types48.default.number
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/SparkLineChart/SparkLineChart.js
var React96 = __toESM(require_react(), 1);
var import_prop_types50 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartContainer/ChartContainer.js
var React95 = __toESM(require_react(), 1);
var import_prop_types49 = __toESM(require_prop_types(), 1);
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var ChartContainer = React95.forwardRef(function ChartContainer2(props, ref) {
  const {
    chartDataProviderProps,
    children,
    chartsSurfaceProps
  } = useChartContainerProps(props, ref);
  return (0, import_jsx_runtime70.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime70.jsx)(ChartsSurface, _extends({}, chartsSurfaceProps, {
      children
    }))
  }));
});
true ? ChartContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types49.default.shape({
    current: import_prop_types49.default.object
  }),
  children: import_prop_types49.default.node,
  className: import_prop_types49.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string), import_prop_types49.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types49.default.arrayOf(import_prop_types49.default.object),
  desc: import_prop_types49.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types49.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types49.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types49.default.number,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types49.default.shape({
    dataIndex: import_prop_types49.default.number,
    seriesId: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types49.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types49.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.shape({
    bottom: import_prop_types49.default.number,
    left: import_prop_types49.default.number,
    right: import_prop_types49.default.number,
    top: import_prop_types49.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | AxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types49.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types49.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types49.default.func,
  /**
   * The configuration of the radial-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  radiusAxis: import_prop_types49.default.arrayOf(import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    maxRadius: import_prop_types49.default.number,
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    minRadius: import_prop_types49.default.number,
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["linear"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  })),
  /**
   * The configuration of the rotation-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  rotationAxis: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
    barGapRatio: import_prop_types49.default.number,
    categoryGapRatio: import_prop_types49.default.number,
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["band"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["point"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["log"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["pow"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["sqrt"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["time"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["utc"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    endAngle: import_prop_types49.default.number,
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelGap: import_prop_types49.default.number,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["linear"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    startAngle: import_prop_types49.default.number,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  })]).isRequired),
  /**
   * The array of series to display.
   * Each type of series has its own specificity.
   * Please refer to the appropriate docs page to learn more about it.
   */
  series: import_prop_types49.default.arrayOf(import_prop_types49.default.object),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types49.default.bool,
  sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
  theme: import_prop_types49.default.oneOf(["dark", "light"]),
  title: import_prop_types49.default.string,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types49.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types49.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    barGapRatio: import_prop_types49.default.number,
    categoryGapRatio: import_prop_types49.default.number,
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["band"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["point"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["log"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["pow"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["sqrt"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["time"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["utc"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["x"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    height: import_prop_types49.default.number,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["linear"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelMinGap: import_prop_types49.default.number,
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    barGapRatio: import_prop_types49.default.number,
    categoryGapRatio: import_prop_types49.default.number,
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["band"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["point"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["log"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["pow"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["sqrt"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["time"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["utc"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  }), import_prop_types49.default.shape({
    axis: import_prop_types49.default.oneOf(["y"]),
    classes: import_prop_types49.default.object,
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    disableLine: import_prop_types49.default.bool,
    disableTicks: import_prop_types49.default.bool,
    domainLimit: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["nice", "strict"]), import_prop_types49.default.func]),
    fill: import_prop_types49.default.string,
    hideTooltip: import_prop_types49.default.bool,
    id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]),
    ignoreTooltip: import_prop_types49.default.bool,
    label: import_prop_types49.default.string,
    labelStyle: import_prop_types49.default.object,
    max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
    offset: import_prop_types49.default.number,
    position: import_prop_types49.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types49.default.bool,
    scaleType: import_prop_types49.default.oneOf(["linear"]),
    slotProps: import_prop_types49.default.object,
    slots: import_prop_types49.default.object,
    stroke: import_prop_types49.default.string,
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    tickInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.array, import_prop_types49.default.func]),
    tickLabelInterval: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["auto"]), import_prop_types49.default.func]),
    tickLabelPlacement: import_prop_types49.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types49.default.object,
    tickMaxStep: import_prop_types49.default.number,
    tickMinStep: import_prop_types49.default.number,
    tickNumber: import_prop_types49.default.number,
    tickPlacement: import_prop_types49.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types49.default.number,
    valueFormatter: import_prop_types49.default.func,
    width: import_prop_types49.default.number
  })]).isRequired),
  /**
   * The configuration of the z-axes.
   */
  zAxis: import_prop_types49.default.arrayOf(import_prop_types49.default.shape({
    colorMap: import_prop_types49.default.oneOfType([import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      type: import_prop_types49.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types49.default.string,
      values: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number, import_prop_types49.default.string]).isRequired)
    }), import_prop_types49.default.shape({
      color: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.string.isRequired), import_prop_types49.default.func]).isRequired,
      max: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      min: import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]),
      type: import_prop_types49.default.oneOf(["continuous"]).isRequired
    }), import_prop_types49.default.shape({
      colors: import_prop_types49.default.arrayOf(import_prop_types49.default.string).isRequired,
      thresholds: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.instanceOf(Date), import_prop_types49.default.number]).isRequired).isRequired,
      type: import_prop_types49.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types49.default.array,
    dataKey: import_prop_types49.default.string,
    id: import_prop_types49.default.string,
    max: import_prop_types49.default.number,
    min: import_prop_types49.default.number
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/SparkLineChart/SparkLineChart.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var _excluded51 = ["xAxis", "yAxis", "width", "height", "margin", "color", "sx", "showTooltip", "showHighlight", "axisHighlight", "children", "slots", "slotProps", "data", "plotType", "valueFormatter", "area", "curve", "className"];
var SPARK_LINE_DEFAULT_MARGIN = 5;
var SparkLineChart = React96.forwardRef(function SparkLineChart2(props, ref) {
  var _a, _b, _c;
  const {
    xAxis,
    yAxis,
    width,
    height,
    margin = SPARK_LINE_DEFAULT_MARGIN,
    color: color2,
    sx,
    showTooltip,
    showHighlight,
    axisHighlight: inAxisHighlight,
    children,
    slots,
    slotProps,
    data,
    plotType = "line",
    valueFormatter = (value) => value === null ? "" : value.toString(),
    area,
    curve = "linear",
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
  const defaultXHighlight = showHighlight && plotType === "bar" ? {
    x: "band"
  } : {
    x: "none"
  };
  const axisHighlight = _extends({}, defaultXHighlight, inAxisHighlight);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  const colors = React96.useMemo(() => {
    if (color2 == null) {
      return void 0;
    }
    return typeof color2 === "function" ? (mode2) => [color2(mode2)] : [color2];
  }, [color2]);
  return (0, import_jsx_runtime71.jsxs)(ChartContainer, _extends({}, other, {
    ref,
    series: [_extends({
      type: plotType,
      data,
      valueFormatter
    }, plotType === "bar" ? {} : {
      area,
      curve,
      disableHighlight: !showHighlight
    })],
    width,
    height,
    margin,
    className,
    xAxis: [_extends({
      id: DEFAULT_X_AXIS_KEY,
      scaleType: plotType === "bar" ? "band" : "point",
      data: Array.from({
        length: data.length
      }, (_, index2) => index2),
      hideTooltip: xAxis === void 0
    }, xAxis, {
      position: "none"
    })],
    yAxis: [_extends({
      id: DEFAULT_Y_AXIS_KEY
    }, yAxis, {
      position: "none"
    })],
    colors,
    sx,
    disableAxisListener: (!showTooltip || ((_b = slotProps == null ? void 0 : slotProps.tooltip) == null ? void 0 : _b.trigger) !== "axis") && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    children: [plotType === "bar" && (0, import_jsx_runtime71.jsx)(BarPlot, {
      skipAnimation: true,
      slots,
      slotProps
    }), plotType === "line" && (0, import_jsx_runtime71.jsxs)(React96.Fragment, {
      children: [(0, import_jsx_runtime71.jsx)(AreaPlot, {
        skipAnimation: true,
        slots,
        slotProps
      }), (0, import_jsx_runtime71.jsx)(LinePlot, {
        skipAnimation: true,
        slots,
        slotProps
      }), (0, import_jsx_runtime71.jsx)(LineHighlightPlot, {
        slots,
        slotProps
      })]
    }), (0, import_jsx_runtime71.jsx)(ChartsAxisHighlight, _extends({}, axisHighlight)), showTooltip && (0, import_jsx_runtime71.jsx)(Tooltip, _extends({}, (_c = props.slotProps) == null ? void 0 : _c.tooltip)), children]
  }));
});
true ? SparkLineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types50.default.shape({
    current: import_prop_types50.default.object
  }),
  /**
   * Set to `true` to fill spark line area.
   * Has no effect if plotType='bar'.
   * @default false
   */
  area: import_prop_types50.default.bool,
  axisHighlight: import_prop_types50.default.shape({
    x: import_prop_types50.default.oneOf(["band", "line", "none"]),
    y: import_prop_types50.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types50.default.node,
  className: import_prop_types50.default.string,
  /**
   * Color used to colorize the sparkline.
   * @default rainbowSurgePalette[0]
   */
  color: import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.string]),
  /**
   * @default 'linear'
   */
  curve: import_prop_types50.default.oneOf(["bumpX", "bumpY", "catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]),
  /**
   * Data to plot.
   */
  data: import_prop_types50.default.arrayOf(import_prop_types50.default.number).isRequired,
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types50.default.arrayOf(import_prop_types50.default.object),
  desc: import_prop_types50.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types50.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types50.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types50.default.number,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types50.default.shape({
    dataIndex: import_prop_types50.default.number,
    seriesId: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types50.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types50.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default 5
   */
  margin: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.shape({
    bottom: import_prop_types50.default.number,
    left: import_prop_types50.default.number,
    right: import_prop_types50.default.number,
    top: import_prop_types50.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | AxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types50.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types50.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types50.default.func,
  /**
   * Type of plot used.
   * @default 'line'
   */
  plotType: import_prop_types50.default.oneOf(["bar", "line"]),
  /**
   * Set to `true` to highlight the value.
   * With line, it shows a point.
   * With bar, it shows a highlight band.
   * @default false
   */
  showHighlight: import_prop_types50.default.bool,
  /**
   * Set to `true` to enable the tooltip in the sparkline.
   * @default false
   */
  showTooltip: import_prop_types50.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types50.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types50.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types50.default.object,
  sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
  theme: import_prop_types50.default.oneOf(["dark", "light"]),
  title: import_prop_types50.default.string,
  /**
   * Formatter used by the tooltip.
   * @param {number} value The value to format.
   * @returns {string} the formatted value.
   * @default (value: number | null) => (value === null ? '' : value.toString())
   */
  valueFormatter: import_prop_types50.default.func,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types50.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types50.default.number,
  /**
   * The xAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  xAxis: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    barGapRatio: import_prop_types50.default.number,
    categoryGapRatio: import_prop_types50.default.number,
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      type: import_prop_types50.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types50.default.string,
      values: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number, import_prop_types50.default.string]).isRequired)
    }), import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["band"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      type: import_prop_types50.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types50.default.string,
      values: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number, import_prop_types50.default.string]).isRequired)
    }), import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["point"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["log"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["pow"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["sqrt"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["time"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["utc"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["x"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    height: import_prop_types50.default.number,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["linear"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelMinGap: import_prop_types50.default.number,
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func
  })]),
  /**
   * The yAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  yAxis: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    barGapRatio: import_prop_types50.default.number,
    categoryGapRatio: import_prop_types50.default.number,
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      type: import_prop_types50.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types50.default.string,
      values: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number, import_prop_types50.default.string]).isRequired)
    }), import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["band"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      type: import_prop_types50.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types50.default.string,
      values: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number, import_prop_types50.default.string]).isRequired)
    }), import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["point"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["log"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["pow"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["sqrt"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["time"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["utc"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  }), import_prop_types50.default.shape({
    axis: import_prop_types50.default.oneOf(["y"]),
    classes: import_prop_types50.default.object,
    colorMap: import_prop_types50.default.oneOfType([import_prop_types50.default.shape({
      color: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.string.isRequired), import_prop_types50.default.func]).isRequired,
      max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
      type: import_prop_types50.default.oneOf(["continuous"]).isRequired
    }), import_prop_types50.default.shape({
      colors: import_prop_types50.default.arrayOf(import_prop_types50.default.string).isRequired,
      thresholds: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]).isRequired).isRequired,
      type: import_prop_types50.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types50.default.array,
    dataKey: import_prop_types50.default.string,
    disableLine: import_prop_types50.default.bool,
    disableTicks: import_prop_types50.default.bool,
    domainLimit: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["nice", "strict"]), import_prop_types50.default.func]),
    fill: import_prop_types50.default.string,
    hideTooltip: import_prop_types50.default.bool,
    id: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
    ignoreTooltip: import_prop_types50.default.bool,
    label: import_prop_types50.default.string,
    labelStyle: import_prop_types50.default.object,
    max: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    min: import_prop_types50.default.oneOfType([import_prop_types50.default.instanceOf(Date), import_prop_types50.default.number]),
    offset: import_prop_types50.default.number,
    position: import_prop_types50.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types50.default.bool,
    scaleType: import_prop_types50.default.oneOf(["linear"]),
    slotProps: import_prop_types50.default.object,
    slots: import_prop_types50.default.object,
    stroke: import_prop_types50.default.string,
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    tickInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.array, import_prop_types50.default.func]),
    tickLabelInterval: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["auto"]), import_prop_types50.default.func]),
    tickLabelPlacement: import_prop_types50.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types50.default.object,
    tickMaxStep: import_prop_types50.default.number,
    tickMinStep: import_prop_types50.default.number,
    tickNumber: import_prop_types50.default.number,
    tickPlacement: import_prop_types50.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types50.default.number,
    valueFormatter: import_prop_types50.default.func,
    width: import_prop_types50.default.number
  })])
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/Gauge.js
var React102 = __toESM(require_react(), 1);
var import_prop_types54 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Gauge/GaugeContainer.js
var React98 = __toESM(require_react(), 1);
var import_prop_types51 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js
var React97 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/Gauge/utils.js
function getPoint(angle) {
  const radAngle = deg2rad(angle);
  return [Math.sin(radAngle), -Math.cos(radAngle)];
}
function getArcRatios(startAngle, endAngle) {
  const points = [[0, 0], getPoint(startAngle), getPoint(endAngle)];
  const minAngle = Math.min(startAngle, endAngle);
  const maxAngle = Math.max(startAngle, endAngle);
  const initialAngle = Math.floor(minAngle / 90) * 90;
  for (let step = 1; step <= 4; step += 1) {
    const cardinalAngle = initialAngle + step * 90;
    if (cardinalAngle < maxAngle) {
      points.push(getPoint(cardinalAngle));
    }
  }
  const minX = Math.min(...points.map(([x2]) => x2));
  const maxX = Math.max(...points.map(([x2]) => x2));
  const minY = Math.min(...points.map(([, y2]) => y2));
  const maxY = Math.max(...points.map(([, y2]) => y2));
  return {
    cx: -minX / (maxX - minX),
    cy: -minY / (maxY - minY),
    minX,
    maxX,
    minY,
    maxY
  };
}
function getAvailableRadius(cx, cy, width, height, {
  minX,
  maxX,
  minY,
  maxY
}) {
  return Math.min(...[{
    ratio: Math.abs(minX),
    space: cx
  }, {
    ratio: Math.abs(maxX),
    space: width - cx
  }, {
    ratio: Math.abs(minY),
    space: cy
  }, {
    ratio: Math.abs(maxY),
    space: height - cy
  }].map(({
    ratio,
    space
  }) => {
    if (ratio < 1e-5) {
      return Infinity;
    }
    return space / ratio;
  }));
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var GaugeContext = React97.createContext({
  value: null,
  valueMin: 0,
  valueMax: 0,
  startAngle: 0,
  endAngle: 0,
  innerRadius: 0,
  outerRadius: 0,
  cornerRadius: 0,
  cx: 0,
  cy: 0,
  maxRadius: 0,
  valueAngle: null
});
if (true) {
  GaugeContext.displayName = "GaugeContext";
}
function GaugeProvider(props) {
  const {
    value = null,
    valueMin = 0,
    valueMax = 100,
    startAngle = 0,
    endAngle = 360,
    outerRadius: outerRadiusParam,
    innerRadius: innerRadiusParam,
    cornerRadius: cornerRadiusParam,
    cx: cxParam,
    cy: cyParam,
    children
  } = props;
  const {
    left,
    top,
    width,
    height
  } = useDrawingArea();
  const ratios = getArcRatios(startAngle, endAngle);
  const innerCx = cxParam ? getPercentageValue(cxParam, width) : ratios.cx * width;
  const innerCy = cyParam ? getPercentageValue(cyParam, height) : ratios.cy * height;
  let cx = left + innerCx;
  let cy = top + innerCy;
  const maxRadius = getAvailableRadius(innerCx, innerCy, width, height, ratios);
  if (cxParam === void 0) {
    const usedWidth = maxRadius * (ratios.maxX - ratios.minX);
    cx = left + (width - usedWidth) / 2 + ratios.cx * usedWidth;
  }
  if (cyParam === void 0) {
    const usedHeight = maxRadius * (ratios.maxY - ratios.minY);
    cy = top + (height - usedHeight) / 2 + ratios.cy * usedHeight;
  }
  const outerRadius = getPercentageValue(outerRadiusParam ?? maxRadius, maxRadius);
  const innerRadius = getPercentageValue(innerRadiusParam ?? "80%", maxRadius);
  const cornerRadius = getPercentageValue(cornerRadiusParam ?? 0, outerRadius - innerRadius);
  const contextValue = React97.useMemo(() => {
    const startAngleRad = deg2rad(startAngle);
    const endAngleRad = deg2rad(endAngle);
    return {
      value,
      valueMin,
      valueMax,
      startAngle: startAngleRad,
      endAngle: endAngleRad,
      outerRadius,
      innerRadius,
      cornerRadius,
      cx,
      cy,
      maxRadius,
      valueAngle: value === null ? null : startAngleRad + (endAngleRad - startAngleRad) * (value - valueMin) / (valueMax - valueMin)
    };
  }, [value, valueMin, valueMax, startAngle, endAngle, outerRadius, innerRadius, cornerRadius, cx, cy, maxRadius]);
  return (0, import_jsx_runtime72.jsx)(GaugeContext.Provider, {
    value: contextValue,
    children
  });
}
function useGaugeState() {
  return React97.useContext(GaugeContext);
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeContainer.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var _excluded52 = ["width", "height", "margin", "title", "desc", "value", "valueMin", "valueMax", "startAngle", "endAngle", "outerRadius", "innerRadius", "cornerRadius", "cx", "cy", "children"];
var GStyled = styled_default("g")(({
  theme
}) => ({
  "& text": {
    fill: (theme.vars || theme).palette.text.primary
  }
}));
var GaugeContainer = React98.forwardRef(function GaugeContainer2(props, ref) {
  const {
    width: inWidth,
    height: inHeight,
    margin,
    title,
    desc,
    value,
    valueMin = 0,
    valueMax = 100,
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
  return (0, import_jsx_runtime73.jsx)(ChartProvider, {
    pluginParams: {
      width: inWidth,
      height: inHeight,
      margin: defaultizeMargin(margin, {
        left: 10,
        right: 10,
        top: 10,
        bottom: 10
      })
    },
    plugins: [],
    children: (0, import_jsx_runtime73.jsx)(GaugeProvider, {
      value,
      valueMin,
      valueMax,
      startAngle,
      endAngle,
      outerRadius,
      innerRadius,
      cornerRadius,
      cx,
      cy,
      children: (0, import_jsx_runtime73.jsx)(ChartsSurface, _extends({
        title,
        desc,
        role: "meter",
        "aria-valuenow": value === null ? void 0 : value,
        "aria-valuemin": valueMin,
        "aria-valuemax": valueMax
      }, other, {
        ref,
        children: (0, import_jsx_runtime73.jsx)(GStyled, {
          "aria-hidden": "true",
          children
        })
      }))
    })
  });
});
true ? GaugeContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types51.default.node,
  className: import_prop_types51.default.string,
  /**
   * The radius applied to arc corners (similar to border radius).
   * Set it to '50%' to get rounded arc.
   * @default 0
   */
  cornerRadius: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
  /**
   * The x coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the width the drawing area.
   */
  cx: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
  /**
   * The y coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the height the drawing area.
   */
  cy: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
  desc: import_prop_types51.default.string,
  /**
   * The end angle (deg).
   * @default 360
   */
  endAngle: import_prop_types51.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types51.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types51.default.string,
  /**
   * The radius between circle center and the beginning of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '80%'
   */
  innerRadius: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.shape({
    bottom: import_prop_types51.default.number,
    left: import_prop_types51.default.number,
    right: import_prop_types51.default.number,
    top: import_prop_types51.default.number
  })]),
  /**
   * The radius between circle center and the end of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '100%'
   */
  outerRadius: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types51.default.bool,
  /**
   * The start angle (deg).
   * @default 0
   */
  startAngle: import_prop_types51.default.number,
  sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object]),
  title: import_prop_types51.default.string,
  /**
   * The value of the gauge.
   * Set to `null` to not display a value.
   */
  value: import_prop_types51.default.number,
  /**
   * The maximal value of the gauge.
   * @default 100
   */
  valueMax: import_prop_types51.default.number,
  /**
   * The minimal value of the gauge.
   * @default 0
   */
  valueMin: import_prop_types51.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types51.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueArc.js
var React99 = __toESM(require_react(), 1);
var import_prop_types52 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateGaugeValueArc.js
function gaugeValueArcPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimateGaugeValueArc(props) {
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: gaugeValueArcPropsInterpolator,
    transformProps: (p) => ({
      d: arc_default().cornerRadius(p.cornerRadius)({
        innerRadius: p.innerRadius,
        outerRadius: p.outerRadius,
        startAngle: p.startAngle,
        endAngle: p.endAngle
      })
    }),
    applyProps(element, p) {
      element.setAttribute("d", p.d);
    },
    initialProps: {
      startAngle: props.startAngle,
      endAngle: props.startAngle,
      innerRadius: props.innerRadius,
      outerRadius: props.outerRadius,
      cornerRadius: props.cornerRadius
    },
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueArc.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var _excluded53 = ["cx", "cy", "startAngle", "endAngle", "cornerRadius", "innerRadius", "outerRadius", "skipAnimation"];
var StyledPath = styled_default("path", {
  name: "MuiGauge",
  slot: "ReferenceArc"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.primary.main
}));
function GaugeValueArc(props) {
  const {
    value,
    valueMin,
    valueMax,
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy
  } = useGaugeState();
  if (value === null) {
    return null;
  }
  const valueAngle = startAngle + (value - valueMin) / (valueMax - valueMin) * (endAngle - startAngle);
  return (0, import_jsx_runtime74.jsx)(AnimatedGaugeValueArc, _extends({}, props, {
    cx,
    cy,
    startAngle,
    endAngle: valueAngle,
    cornerRadius,
    innerRadius,
    outerRadius
  }));
}
true ? GaugeValueArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  skipAnimation: import_prop_types52.default.bool
} : void 0;
function AnimatedGaugeValueArc(_ref) {
  let {
    cx,
    cy,
    startAngle,
    endAngle,
    cornerRadius,
    innerRadius,
    outerRadius,
    skipAnimation: inSkipAnimation
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded53);
  const skipAnimation = useSkipAnimation(inSkipAnimation);
  const animatedProps = useAnimateGaugeValueArc({
    startAngle,
    endAngle,
    cornerRadius,
    innerRadius,
    outerRadius,
    skipAnimation
  });
  return (0, import_jsx_runtime74.jsx)(StyledPath, _extends({}, animatedProps, {
    transform: `translate(${cx}, ${cy})`
  }, other));
}
true ? AnimatedGaugeValueArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  cornerRadius: import_prop_types52.default.number.isRequired,
  cx: import_prop_types52.default.number.isRequired,
  cy: import_prop_types52.default.number.isRequired,
  endAngle: import_prop_types52.default.number.isRequired,
  innerRadius: import_prop_types52.default.number.isRequired,
  outerRadius: import_prop_types52.default.number.isRequired,
  skipAnimation: import_prop_types52.default.bool,
  startAngle: import_prop_types52.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/GaugeReferenceArc.js
var React100 = __toESM(require_react(), 1);
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var StyledPath2 = styled_default("path", {
  name: "MuiGauge",
  slot: "ReferenceArc"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.divider
}));
function GaugeReferenceArc(props) {
  const {
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy
  } = useGaugeState();
  return (0, import_jsx_runtime75.jsx)(StyledPath2, _extends({
    transform: `translate(${cx}, ${cy})`,
    d: arc_default().cornerRadius(cornerRadius)({
      startAngle,
      endAngle,
      innerRadius,
      outerRadius
    })
  }, props));
}

// node_modules/@mui/x-charts/esm/Gauge/gaugeClasses.js
function getGaugeUtilityClass(slot) {
  return generateUtilityClass("MuiGauge", slot);
}
var gaugeClasses = generateUtilityClasses("MuiGauge", ["root", "valueArc", "referenceArc", "valueText"]);

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueText.js
var React101 = __toESM(require_react(), 1);
var import_prop_types53 = __toESM(require_prop_types(), 1);
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var _excluded54 = ["text", "className"];
function defaultFormatter({
  value
}) {
  return value === null ? null : value.toLocaleString();
}
function GaugeValueText(props) {
  const {
    text = defaultFormatter,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
  const {
    value,
    valueMin,
    valueMax,
    cx,
    cy
  } = useGaugeState();
  const formattedText = typeof text === "function" ? text({
    value,
    valueMin,
    valueMax
  }) : text;
  if (formattedText === null) {
    return null;
  }
  return (0, import_jsx_runtime76.jsx)("g", {
    className,
    children: (0, import_jsx_runtime76.jsx)(ChartsText, _extends({
      x: cx,
      y: cy,
      text: formattedText,
      style: {
        textAnchor: "middle",
        dominantBaseline: "central"
      }
    }, other))
  });
}
true ? GaugeValueText.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Height of a text line (in `em`).
   */
  lineHeight: import_prop_types53.default.number,
  /**
   * If `true`, the line width is computed.
   * @default false
   */
  needsComputation: import_prop_types53.default.bool,
  ownerState: import_prop_types53.default.any,
  /**
   * Style applied to text elements.
   */
  style: import_prop_types53.default.object,
  text: import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/Gauge.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var _excluded55 = ["text", "children", "classes", "className", "skipAnimation"];
var useUtilityClasses20 = (props) => {
  const {
    classes
  } = props;
  const slots = {
    root: ["root"],
    valueArc: ["valueArc"],
    referenceArc: ["referenceArc"],
    valueText: ["valueText"]
  };
  return composeClasses(slots, getGaugeUtilityClass, classes);
};
var Gauge = React102.forwardRef(function Gauge2(props, ref) {
  const {
    text,
    children,
    className,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
  const classes = useUtilityClasses20(props);
  return (0, import_jsx_runtime77.jsxs)(GaugeContainer, _extends({}, other, {
    className: clsx_default(classes.root, className),
    ref,
    children: [(0, import_jsx_runtime77.jsx)(GaugeReferenceArc, {
      className: classes.referenceArc
    }), (0, import_jsx_runtime77.jsx)(GaugeValueArc, {
      className: classes.valueArc,
      skipAnimation
    }), (0, import_jsx_runtime77.jsx)(GaugeValueText, {
      className: classes.valueText,
      text
    }), children]
  }));
});
true ? Gauge.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types54.default.node,
  classes: import_prop_types54.default.object,
  className: import_prop_types54.default.string,
  /**
   * The radius applied to arc corners (similar to border radius).
   * Set it to '50%' to get rounded arc.
   * @default 0
   */
  cornerRadius: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  /**
   * The x coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the width the drawing area.
   */
  cx: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  /**
   * The y coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the height the drawing area.
   */
  cy: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  desc: import_prop_types54.default.string,
  /**
   * The end angle (deg).
   * @default 360
   */
  endAngle: import_prop_types54.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types54.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types54.default.string,
  /**
   * The radius between circle center and the beginning of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '80%'
   */
  innerRadius: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.shape({
    bottom: import_prop_types54.default.number,
    left: import_prop_types54.default.number,
    right: import_prop_types54.default.number,
    top: import_prop_types54.default.number
  })]),
  /**
   * The radius between circle center and the end of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '100%'
   */
  outerRadius: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types54.default.bool,
  /**
   * The start angle (deg).
   * @default 0
   */
  startAngle: import_prop_types54.default.number,
  sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
  text: import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.string]),
  title: import_prop_types54.default.string,
  /**
   * The value of the gauge.
   * Set to `null` to not display a value.
   */
  value: import_prop_types54.default.number,
  /**
   * The maximal value of the gauge.
   * @default 100
   */
  valueMax: import_prop_types54.default.number,
  /**
   * The minimal value of the gauge.
   * @default 0
   */
  valueMin: import_prop_types54.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types54.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.js
var React114 = __toESM(require_react(), 1);
var import_prop_types61 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/useRadarChartProps.js
var _excluded56 = ["series", "radar", "width", "height", "margin", "colors", "sx", "children", "slots", "slotProps", "skipAnimation", "loading", "highlightedItem", "onHighlightChange", "hideLegend", "divisions", "shape", "stripeColor", "highlight"];
var useRadarChartProps = (props) => {
  const {
    series,
    radar,
    width,
    height,
    margin,
    colors,
    sx,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    highlightedItem,
    onHighlightChange,
    divisions,
    shape,
    stripeColor,
    highlight = "axis"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
  const radarDataProviderProps = {
    series,
    radar,
    highlight,
    width,
    height,
    margin,
    colors,
    highlightedItem,
    onHighlightChange,
    skipAnimation
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx
  };
  const radarGrid = {
    divisions,
    shape,
    stripeColor
  };
  const chartsSurfaceProps = other;
  return {
    highlight,
    chartsWrapperProps,
    chartsSurfaceProps,
    radarDataProviderProps,
    radarGrid,
    overlayProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/RadarGrid.js
var React107 = __toESM(require_react(), 1);
var import_prop_types55 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/useRadarGridData.js
function useRadarGridData() {
  const {
    instance
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const drawingArea = useDrawingArea();
  const cx = drawingArea.left + drawingArea.width / 2;
  const cy = drawingArea.top + drawingArea.height / 2;
  if (!rotationScale || rotationScale.domain().length === 0) {
    return null;
  }
  const metrics = rotationScale.domain();
  const angles = metrics.map((key) => rotationScale(key));
  return {
    center: {
      x: cx,
      y: cy
    },
    corners: metrics.map((metric, dataIndex) => {
      const radiusScale = radiusAxis[metric].scale;
      const r = radiusScale.range()[1];
      const angle = angles[dataIndex];
      const [x2, y2] = instance.polar2svg(r, angle);
      return {
        x: x2,
        y: y2
      };
    }),
    radius: radiusAxis[metrics[0]].scale.range()[1]
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/SharpRadarGrid.js
var React103 = __toESM(require_react(), 1);
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
function SharpRadarGrid(props) {
  const {
    center,
    corners,
    divisions,
    strokeColor,
    classes
  } = props;
  const divisionRatio = Array.from({
    length: divisions
  }, (_, index2) => (index2 + 1) / divisions);
  return (0, import_jsx_runtime78.jsxs)(React103.Fragment, {
    children: [corners.map(({
      x: x2,
      y: y2
    }, i) => (0, import_jsx_runtime78.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${x2} ${y2}`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.radial
    }, i)), divisionRatio.map((ratio) => (0, import_jsx_runtime78.jsx)("path", {
      d: `M ${corners.map(({
        x: x2,
        y: y2
      }) => `${center.x * (1 - ratio) + ratio * x2} ${center.y * (1 - ratio) + ratio * y2}`).join(" L ")} Z`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.divider
    }, ratio))]
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/CircularRadarGrid.js
var React104 = __toESM(require_react(), 1);
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
function CircularRadarGrid(props) {
  const {
    center,
    corners,
    divisions,
    radius,
    strokeColor,
    classes
  } = props;
  const divisionRadius = Array.from({
    length: divisions
  }, (_, index2) => radius * (index2 + 1) / divisions);
  return (0, import_jsx_runtime79.jsxs)(React104.Fragment, {
    children: [corners.map(({
      x: x2,
      y: y2
    }, i) => (0, import_jsx_runtime79.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${x2} ${y2}`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.radial
    }, i)), divisionRadius.map((r) => (0, import_jsx_runtime79.jsx)("circle", {
      cx: center.x,
      cy: center.y,
      r,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.divider
    }, r))]
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/SharpRadarStripes.js
var React105 = __toESM(require_react(), 1);
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var getPath = (corners, center, outerRatio, innerRatio) => ["M", [...corners, corners[0]].map(({
  x: x2,
  y: y2
}) => `${center.x * (1 - outerRatio) + outerRatio * x2} ${center.y * (1 - outerRatio) + outerRatio * y2}`).join(" L "), "L", [...corners, corners[0]].reverse().map(({
  x: x2,
  y: y2
}) => `${center.x * (1 - innerRatio) + innerRatio * x2} ${center.y * (1 - innerRatio) + innerRatio * y2}`).join(" L "), "Z"].join(" ");
function SharpRadarStripes(props) {
  const {
    center,
    corners,
    divisions,
    stripeColor,
    classes
  } = props;
  const divisionRatio = Array.from({
    length: divisions
  }, (_, index2) => (index2 + 1) / divisions);
  return (0, import_jsx_runtime80.jsx)(React105.Fragment, {
    children: divisionRatio.map((ratio, index2) => {
      const smallerRatio = divisionRatio[index2 - 1] ?? 0;
      return (0, import_jsx_runtime80.jsx)("path", {
        d: getPath(corners, center, ratio, smallerRatio),
        stroke: "none",
        fill: (stripeColor == null ? void 0 : stripeColor(index2)) ?? "none",
        fillOpacity: 0.1,
        className: classes == null ? void 0 : classes.stripe
      }, ratio);
    })
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/CircularRadarStripes.js
var React106 = __toESM(require_react(), 1);
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var getPath2 = (center, outerRadius, innerRadius) => [`M ${center.x - outerRadius} ${center.y}`, `A ${outerRadius} ${outerRadius} 0 1 0 ${center.x + outerRadius} ${center.y}`, `A ${outerRadius} ${outerRadius} 0 1 0 ${center.x - outerRadius} ${center.y} Z`, `M ${center.x - innerRadius} ${center.y}`, `A ${innerRadius} ${innerRadius} 0 1 0 ${center.x + innerRadius} ${center.y}`, `A ${innerRadius} ${innerRadius} 0 1 0 ${center.x - innerRadius} ${center.y} Z`].join("");
function CircularRadarStripes(props) {
  const {
    center,
    divisions,
    radius,
    stripeColor,
    classes
  } = props;
  const divisionRadius = Array.from({
    length: divisions
  }, (_, index2) => radius * (index2 + 1) / divisions);
  return (0, import_jsx_runtime81.jsx)(React106.Fragment, {
    children: divisionRadius.map((r, index2) => {
      const smallerRadius = divisionRadius[index2 - 1] ?? 0;
      return (0, import_jsx_runtime81.jsx)("path", {
        d: getPath2(center, r, smallerRadius),
        fillRule: "evenodd",
        fill: (stripeColor == null ? void 0 : stripeColor(index2)) ?? "none",
        fillOpacity: 0.1,
        className: classes == null ? void 0 : classes.stripe
      }, r);
    })
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/radarGridClasses.js
function getRadarGridUtilityClass(slot) {
  return generateUtilityClass("MuiRadarGrid", slot);
}
var chartsGridClasses2 = generateUtilityClasses("MuiRadarGrid", ["radial", "divider", "stripe"]);
var useUtilityClasses21 = (classes) => {
  const slots = {
    radial: ["radial"],
    divider: ["divider"],
    stripe: ["stripe"]
  };
  return composeClasses(slots, getRadarGridUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/RadarGrid.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
function RadarGrid(props) {
  const theme = useTheme();
  const {
    divisions = 5,
    shape = "sharp",
    stripeColor = (index2) => index2 % 2 === 1 ? (theme.vars || theme).palette.text.secondary : "none"
  } = props;
  const gridData = useRadarGridData();
  const classes = useUtilityClasses21(props.classes);
  if (gridData === null) {
    return null;
  }
  const {
    center,
    corners,
    radius
  } = gridData;
  return shape === "sharp" ? (0, import_jsx_runtime82.jsxs)(React107.Fragment, {
    children: [stripeColor && (0, import_jsx_runtime82.jsx)(SharpRadarStripes, {
      divisions,
      corners,
      center,
      radius,
      stripeColor,
      classes
    }), (0, import_jsx_runtime82.jsx)(SharpRadarGrid, {
      divisions,
      corners,
      center,
      radius,
      strokeColor: (theme.vars || theme).palette.text.primary,
      classes
    })]
  }) : (0, import_jsx_runtime82.jsxs)(React107.Fragment, {
    children: [stripeColor && (0, import_jsx_runtime82.jsx)(CircularRadarStripes, {
      divisions,
      corners,
      center,
      radius,
      stripeColor,
      classes
    }), (0, import_jsx_runtime82.jsx)(CircularRadarGrid, {
      divisions,
      corners,
      center,
      radius,
      strokeColor: (theme.vars || theme).palette.text.primary,
      classes
    })]
  });
}
true ? RadarGrid.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types55.default.object,
  /**
   * The number of divisions in the radar grid.
   * @default 5
   */
  divisions: import_prop_types55.default.number,
  /**
   * The grid shape.
   * @default 'sharp'
   */
  shape: import_prop_types55.default.oneOf(["circular", "sharp"]),
  /**
   * Get stripe fill color. Set it to `null` to remove stripes
   * @param {number} index The index of the stripe band.
   * @returns {string} The color to fill the stripe.
   * @default (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : 'none'
   */
  stripeColor: import_prop_types55.default.func
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarDataProvider/RadarDataProvider.js
var React108 = __toESM(require_react(), 1);
var import_prop_types56 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/formatter.js
var formatter = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return {
    seriesOrder,
    series: defaultizeValueFormatter(series, (v2) => v2 == null ? "" : v2.toLocaleString())
  };
};
var formatter_default = formatter;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/getColor.js
var getColor5 = (series) => {
  return () => series.color;
};
var getColor_default5 = getColor5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/extremums.js
var radiusExtremumGetter = ({
  series,
  axisIndex
}) => {
  return Object.keys(series).filter((seriesId) => series[seriesId].type === "radar").reduce((acc, seriesId) => {
    const {
      data
    } = series[seriesId];
    return [Math.min(data[axisIndex], acc[0]), Math.max(data[axisIndex], acc[1])];
  }, [Infinity, -Infinity]);
};
var rotationExtremumGetter = ({
  axis
}) => {
  const min3 = Math.min(...axis.data ?? []);
  const max3 = Math.max(...axis.data ?? []);
  return [min3, max3];
};

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/legend.js
var legendGetter5 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel,
      markType: series[seriesId].labelMarkType ?? "square"
    });
    return acc;
  }, []);
};
var legend_default5 = legendGetter5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/tooltip.js
var tooltipGetter5 = (params) => {
  const {
    series,
    axesConfig,
    getColor: getColor6,
    identifier
  } = params;
  const rotationAxis = axesConfig.rotation;
  if (!identifier || !rotationAxis) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const formatter2 = (v2) => {
    var _a;
    return ((_a = rotationAxis.valueFormatter) == null ? void 0 : _a.call(rotationAxis, v2, {
      location: "tooltip",
      scale: rotationAxis.scale
    })) ?? (v2 == null ? "" : v2.toLocaleString());
  };
  return {
    identifier,
    color: getColor6(),
    label,
    markType: series.labelMarkType,
    values: series.data.map((value, dataIndex) => {
      var _a;
      return {
        value,
        formattedValue: series.valueFormatter(value, {
          dataIndex
        }),
        markType: series.labelMarkType,
        label: formatter2((_a = rotationAxis == null ? void 0 : rotationAxis.data) == null ? void 0 : _a[dataIndex])
      };
    })
  };
};
var axisTooltipGetter3 = (series) => {
  return Object.values(series).map(() => ({
    direction: "rotation",
    axisId: void 0
  }));
};
var tooltip_default5 = tooltipGetter5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues5 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default5 = getSeriesWithDefaultValues5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/index.js
var radarSeriesConfig = {
  colorProcessor: getColor_default5,
  seriesProcessor: formatter_default,
  legendGetter: legend_default5,
  tooltipGetter: tooltip_default5,
  axisTooltipGetter: axisTooltipGetter3,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default5,
  radiusExtremumGetter,
  rotationExtremumGetter
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarDataProvider/RadarDataProvider.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var _excluded57 = ["series", "children", "width", "height", "colors", "highlightedItem", "onHighlightChange", "className", "skipAnimation", "margin", "radar", "highlight"];
var RADAR_SERIES_CONFIG = {
  radar: radarSeriesConfig
};
var RADAR_PLUGINS = [useChartPolarAxis, useChartInteraction, useChartHighlight];
var DEFAULT_RADAR_MARGIN = {
  top: 30,
  bottom: 30,
  left: 50,
  right: 50
};
function RadarDataProvider(props) {
  const {
    series,
    children,
    width,
    height,
    colors,
    highlightedItem,
    onHighlightChange,
    skipAnimation,
    margin,
    radar,
    highlight
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
  const rotationAxes = React108.useMemo(() => [{
    id: "radar-rotation-axis",
    scaleType: "point",
    data: radar.metrics.map((metric) => typeof metric === "string" ? metric : metric.name),
    startAngle: radar.startAngle,
    endAngle: radar.startAngle !== void 0 ? radar.startAngle + 360 : void 0,
    labelGap: radar.labelGap,
    valueFormatter: (name, {
      location
    }) => {
      var _a;
      return ((_a = radar.labelFormatter) == null ? void 0 : _a.call(radar, name, {
        location
      })) ?? name;
    }
  }], [radar]);
  const radiusAxis = React108.useMemo(() => radar.metrics.map((m) => {
    const {
      name,
      min: min3 = 0,
      max: max3 = radar.max
    } = typeof m === "string" ? {
      name: m
    } : m;
    return {
      id: name,
      label: name,
      scaleType: "linear",
      min: min3,
      max: max3
    };
  }), [radar]);
  const defaultizedSeries = React108.useMemo(() => series.map((s2) => _extends({
    type: "radar",
    highlightScope: s2.highlightScope ?? (highlight === "series" ? {
      highlight: "series",
      fade: "global"
    } : void 0)
  }, s2)), [series, highlight]);
  const defaultizedMargin = React108.useMemo(() => defaultizeMargin(margin, DEFAULT_RADAR_MARGIN), [margin]);
  return (0, import_jsx_runtime83.jsx)(ChartDataProvider, _extends({}, other, {
    series: defaultizedSeries,
    width,
    height,
    margin: defaultizedMargin,
    colors,
    highlightedItem,
    onHighlightChange,
    skipAnimation,
    plugins: RADAR_PLUGINS,
    rotationAxis: rotationAxes,
    radiusAxis,
    seriesConfig: RADAR_SERIES_CONFIG,
    children
  }));
}
true ? RadarDataProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types56.default.shape({
    current: import_prop_types56.default.object
  }),
  children: import_prop_types56.default.node,
  className: import_prop_types56.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.string), import_prop_types56.default.func]),
  desc: import_prop_types56.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types56.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types56.default.number,
  /**
   * Indicates if the chart should highlight items per axis or per series.
   * @default 'axis'
   */
  highlight: import_prop_types56.default.oneOf(["axis", "none", "series"]),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types56.default.shape({
    dataIndex: import_prop_types56.default.number,
    seriesId: import_prop_types56.default.oneOfType([import_prop_types56.default.number, import_prop_types56.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types56.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types56.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types56.default.oneOfType([import_prop_types56.default.number, import_prop_types56.default.shape({
    bottom: import_prop_types56.default.number,
    left: import_prop_types56.default.number,
    right: import_prop_types56.default.number,
    top: import_prop_types56.default.number
  })]),
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types56.default.func,
  /**
   * The configuration of the radar scales.
   */
  radar: import_prop_types56.default.shape({
    labelFormatter: import_prop_types56.default.func,
    labelGap: import_prop_types56.default.number,
    max: import_prop_types56.default.number,
    metrics: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.string), import_prop_types56.default.arrayOf(import_prop_types56.default.shape({
      max: import_prop_types56.default.number,
      min: import_prop_types56.default.number,
      name: import_prop_types56.default.string.isRequired
    }))]).isRequired,
    startAngle: import_prop_types56.default.number
  }).isRequired,
  /**
   * The series to display in the bar chart.
   * An array of [[RadarSeriesType]] objects.
   */
  series: import_prop_types56.default.arrayOf(import_prop_types56.default.object).isRequired,
  /**
   * The configuration helpers used to compute attributes according to the series type.
   * @ignore Unstable props for internal usage.
   */
  seriesConfig: import_prop_types56.default.object,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types56.default.bool,
  sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object]),
  theme: import_prop_types56.default.oneOf(["dark", "light"]),
  title: import_prop_types56.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types56.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesPlot.js
var React111 = __toESM(require_react(), 1);
var import_prop_types59 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/useRadarSeries.js
var useSelectorSeries5 = createSeriesSelectorsOfType("radar");
var useSelectorSeriesContext5 = createAllSeriesSelectorOfType("radar");
function useRadarSeries(seriesIds) {
  return useSelectorSeries5(seriesIds);
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/useRadarSeriesData.js
function useRadarSeriesData(querySeriesId) {
  const {
    instance
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const radarSeries = useRadarSeries(querySeriesId === void 0 ? void 0 : [querySeriesId]);
  const {
    isFaded: isItemFaded,
    isHighlighted: isItemHighlighted
  } = useItemHighlightedGetter();
  const metrics = (rotationScale == null ? void 0 : rotationScale.domain()) ?? [];
  const angles = metrics.map((key) => rotationScale == null ? void 0 : rotationScale(key));
  return radarSeries.map((series) => {
    const seriesId = series.id;
    const isSeriesHighlighted = isItemHighlighted({
      seriesId
    });
    const isSeriesFaded = !isSeriesHighlighted && isItemFaded({
      seriesId
    });
    return _extends({}, series, {
      seriesId: series.id,
      isSeriesHighlighted,
      isSeriesFaded,
      points: series.data.map((value, dataIndex) => {
        const highlighted = isItemHighlighted({
          seriesId,
          dataIndex
        });
        const faded = !highlighted && isItemFaded({
          seriesId,
          dataIndex
        });
        const r = radiusAxis[metrics[dataIndex]].scale(value);
        const angle = angles[dataIndex];
        const [x2, y2] = instance.polar2svg(r, angle);
        return {
          x: x2,
          y: y2,
          isItemHighlighted: highlighted,
          isItemFaded: faded,
          dataIndex
        };
      })
    });
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/radarSeriesPlotClasses.js
function getRadarSeriesPlotUtilityClass(slot) {
  return generateUtilityClass("MuiRadarSeriesPlot", slot);
}
var radarSeriesPlotClasses = generateUtilityClasses("MuiRadarSeriesPlot", ["root", "area", "mark", "highlighted", "faded"]);
var useUtilityClasses22 = (classes) => {
  const slots = {
    root: ["root"],
    area: ["area"],
    mark: ["mark"],
    highlighted: ["highlighted"],
    faded: ["faded"]
  };
  return composeClasses(slots, getRadarSeriesPlotUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesArea.js
var React109 = __toESM(require_react(), 1);
var import_prop_types57 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/getAreaPath.js
function getAreaPath(points) {
  return `M ${points.map((p) => `${p.x} ${p.y}`).join("L")} Z`;
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesArea.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var _excluded58 = ["seriesId"];
function getPathProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    points,
    fillArea,
    color: color2
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    d: getAreaPath(points),
    fill: fillArea ? color2 : "transparent",
    stroke: color2,
    className: clsx_default(classes.area, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded),
    strokeOpacity: isItemFaded ? 0.5 : 1,
    fillOpacity: isItemHighlighted && 0.4 || isItemFaded && 0.1 || 0.2,
    strokeWidth: !fillArea && isItemHighlighted ? 2 : 1
  };
}
function RadarSeriesArea(props) {
  const {
    seriesId
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
  const seriesCoordinates = useRadarSeriesData(seriesId);
  const interactionProps = useInteractionAllItemProps(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const classes = useUtilityClasses22(props.classes);
  return (0, import_jsx_runtime84.jsx)(React109.Fragment, {
    children: seriesCoordinates == null ? void 0 : seriesCoordinates.map(({
      seriesId: id,
      points,
      color: color2,
      fillArea
    }, seriesIndex) => {
      return (0, import_jsx_runtime84.jsx)("path", _extends({}, getPathProps({
        seriesId: id,
        points,
        color: color2,
        fillArea,
        isFaded,
        isHighlighted,
        classes
      }), interactionProps[seriesIndex], other), id);
    })
  });
}
true ? RadarSeriesArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types57.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types57.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesMarks.js
var React110 = __toESM(require_react(), 1);
var import_prop_types58 = __toESM(require_prop_types(), 1);
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var _excluded59 = ["seriesId"];
function getCircleProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    point: point6,
    fillArea,
    color: color2
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    cx: point6.x,
    cy: point6.y,
    r: 3,
    fill: color2,
    stroke: color2,
    opacity: fillArea && isItemFaded ? 0.5 : 1,
    pointerEvents: "none",
    className: clsx(classes.mark, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded)
  };
}
function RadarSeriesMarks(props) {
  const other = _objectWithoutPropertiesLoose(props, _excluded59);
  const seriesCoordinates = useRadarSeriesData(props.seriesId);
  const classes = useUtilityClasses22(props.classes);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  return (0, import_jsx_runtime85.jsx)(React110.Fragment, {
    children: seriesCoordinates == null ? void 0 : seriesCoordinates.map(({
      seriesId: id,
      points,
      color: color2,
      hideMark,
      fillArea
    }) => {
      if (hideMark) {
        return null;
      }
      return (0, import_jsx_runtime85.jsx)("g", {
        children: points.map((point6, index2) => (0, import_jsx_runtime85.jsx)("circle", _extends({}, getCircleProps({
          seriesId: id,
          point: point6,
          color: color2,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), other), index2))
      }, id);
    })
  });
}
true ? RadarSeriesMarks.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types58.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types58.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesPlot.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
function RadarSeriesPlot(props) {
  const seriesCoordinates = useRadarSeriesData(props.seriesId);
  const interactionProps = useInteractionAllItemProps(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const classes = useUtilityClasses22(props.classes);
  return (0, import_jsx_runtime86.jsx)("g", {
    className: classes.root,
    children: seriesCoordinates == null ? void 0 : seriesCoordinates.map(({
      seriesId,
      points,
      color: color2,
      hideMark,
      fillArea
    }, seriesIndex) => {
      return (0, import_jsx_runtime86.jsxs)("g", {
        children: [(0, import_jsx_runtime86.jsx)("path", _extends({}, getPathProps({
          seriesId,
          points,
          color: color2,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), interactionProps[seriesIndex]), seriesId), !hideMark && points.map((point6, index2) => (0, import_jsx_runtime86.jsx)("circle", _extends({}, getCircleProps({
          seriesId,
          point: point6,
          color: color2,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        })), index2))]
      }, seriesId);
    })
  });
}
true ? RadarSeriesPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types59.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types59.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/RadarAxisHighlight.js
var React112 = __toESM(require_react(), 1);
var import_prop_types60 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/useRadarAxisHighlight.js
function useRadarAxisHighlight(params) {
  const {
    includesNeighbors = false
  } = params ?? {};
  const radarSeries = useRadarSeries();
  const rotationScale = useRotationScale();
  const {
    radiusAxis,
    radiusAxisIds
  } = useRadiusAxes();
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const rotationAxisIndex = useSelector(store, selectorChartsInteractionRotationAxisIndex);
  const rotationAxisValue = useSelector(store, selectorChartsInteractionRotationAxisValue);
  const center = useSelector(store, selectorChartPolarCenter);
  const highlightedIndex = rotationAxisIndex;
  if (!rotationScale) {
    return null;
  }
  if (highlightedIndex === null || highlightedIndex === -1) {
    return null;
  }
  if (radarSeries === void 0 || radarSeries.length === 0) {
    return null;
  }
  const metric = radiusAxisIds[highlightedIndex];
  const radiusScale = radiusAxis[metric].scale;
  const angle = rotationScale(rotationAxisValue);
  const radius = radiusScale.range()[1];
  return {
    center,
    radius,
    instance,
    highlightedIndex,
    highlightedMetric: metric,
    highlightedAngle: angle,
    series: radarSeries,
    points: radarSeries.map((series) => {
      const value = series.data[highlightedIndex];
      const r = radiusScale(value);
      const [x2, y2] = instance.polar2svg(r, angle);
      const retrunedValue = {
        highlighted: {
          x: x2,
          y: y2,
          r,
          angle,
          value
        }
      };
      if (!includesNeighbors) {
        return retrunedValue;
      }
      const dataLength = series.data.length;
      const prevIndex = (dataLength + highlightedIndex - 1) % dataLength;
      const nextIndex = (highlightedIndex + 1) % dataLength;
      const prevValue = series.data[prevIndex];
      const nextValue = series.data[nextIndex];
      if (prevValue != null) {
        const prevR = radiusAxis[radiusAxisIds[prevIndex]].scale(prevValue);
        const prevAngle = rotationScale(rotationScale.domain()[prevIndex]);
        const [px, py] = instance.polar2svg(prevR, prevAngle);
        retrunedValue.previous = {
          x: px,
          y: py,
          r: prevR,
          angle: prevAngle,
          value: prevValue
        };
      }
      if (nextValue != null) {
        const nextR = radiusAxis[radiusAxisIds[nextIndex]].scale(nextValue);
        const nextAngle = rotationScale(rotationScale.domain()[nextIndex]);
        const [nx, ny] = instance.polar2svg(nextR, nextAngle);
        retrunedValue.next = {
          x: nx,
          y: ny,
          r: nextR,
          angle: nextAngle,
          value: nextValue
        };
      }
      return retrunedValue;
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/radarAxisHighlightClasses.js
function getRadarAxisHighlightUtilityClass(slot) {
  return generateUtilityClass("MuiRadarAxisHighlight", slot);
}
var chartsAxisHighlightClasses2 = generateUtilityClasses("MuiRadarAxisHighlight", ["root", "line", "dot"]);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/RadarAxisHighlight.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses23 = (classes) => {
  const slots = {
    root: ["root"],
    line: ["line"],
    dot: ["dot"]
  };
  return composeClasses(slots, getRadarAxisHighlightUtilityClass, classes);
};
var highlightMarkShadow = {
  r: 7,
  opacity: 0.3
};
var highlightMark = {
  r: 3,
  opacity: 1
};
function RadarAxisHighlight(props) {
  const classes = useUtilityClasses23(props.classes);
  const theme = useTheme();
  const data = useRadarAxisHighlight();
  if (data === null) {
    return null;
  }
  const {
    center,
    series,
    points,
    radius,
    highlightedAngle,
    instance
  } = data;
  const [x2, y2] = instance.polar2svg(radius, highlightedAngle);
  return (0, import_jsx_runtime87.jsxs)("g", {
    className: classes.root,
    children: [(0, import_jsx_runtime87.jsx)("path", {
      d: `M ${center.cx} ${center.cy} L ${x2} ${y2}`,
      stroke: (theme.vars || theme).palette.text.primary,
      strokeWidth: 1,
      className: classes.line,
      pointerEvents: "none",
      strokeDasharray: "4 4"
    }), points.map(({
      highlighted
    }, seriesIndex) => {
      return (0, import_jsx_runtime87.jsx)("circle", _extends({
        fill: series[seriesIndex].color,
        cx: highlighted.x,
        cy: highlighted.y,
        className: classes.dot,
        pointerEvents: "none"
      }, series[seriesIndex].hideMark ? highlightMark : highlightMarkShadow), series[seriesIndex].id);
    })]
  });
}
true ? RadarAxisHighlight.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types60.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/RadarMetricLabels.js
var React113 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/useRadarMetricData.js
function useRadarMetricData() {
  const rotationAxis = useRotationAxis();
  const {
    scale: rotationScale,
    valueFormatter,
    labelGap = 10
  } = rotationAxis;
  const {
    radiusAxis
  } = useRadiusAxes();
  const drawingArea = useDrawingArea();
  const cx = drawingArea.left + drawingArea.width / 2;
  const cy = drawingArea.top + drawingArea.height / 2;
  const metrics = rotationScale.domain();
  const angles = metrics.map((key) => rotationScale(key));
  return {
    corners: metrics.map((metric, dataIndex) => {
      const radiusScale = radiusAxis[metric].scale;
      const r = radiusScale.range()[1] + labelGap;
      const angle = angles[dataIndex];
      return {
        x: cx + r * Math.sin(angle),
        y: cy - r * Math.cos(angle),
        angle: rad2deg(angle),
        label: (valueFormatter == null ? void 0 : valueFormatter(metric, {
          location: "tick",
          scale: rotationScale
        })) ?? metric
      };
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/RadarMetricLabels.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
function RadarMetricLabels() {
  const {
    corners
  } = useRadarMetricData();
  const theme = useTheme();
  return (0, import_jsx_runtime88.jsx)(React113.Fragment, {
    children: corners.map(({
      x: x2,
      y: y2,
      angle,
      label
    }, i) => (0, import_jsx_runtime88.jsx)(ChartsText, {
      x: x2,
      y: y2,
      fontSize: 14,
      fill: (theme.vars || theme).palette.text.primary,
      stroke: "none",
      text: label,
      style: _extends({}, theme.typography.caption, {
        fontSize: 12,
        lineHeight: 1.25,
        textAnchor: getDefaultTextAnchor(180 + angle),
        dominantBaseline: getDefaultBaseline(180 + angle)
      })
    }, i))
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var RadarChart = React114.forwardRef(function RadarChart2(inProps, ref) {
  var _a, _b;
  const props = useThemeProps({
    props: inProps,
    name: "MuiRadarChart"
  });
  const {
    chartsWrapperProps,
    chartsSurfaceProps,
    radarDataProviderProps,
    radarGrid,
    overlayProps,
    legendProps,
    highlight,
    children
  } = useRadarChartProps(props);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  return (0, import_jsx_runtime89.jsx)(RadarDataProvider, _extends({}, radarDataProviderProps, {
    children: (0, import_jsx_runtime89.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [!props.hideLegend && (0, import_jsx_runtime89.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime89.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        ref,
        children: [(0, import_jsx_runtime89.jsx)(RadarGrid, _extends({}, radarGrid)), (0, import_jsx_runtime89.jsx)(RadarMetricLabels, {}), (0, import_jsx_runtime89.jsx)(RadarSeriesArea, {}), highlight === "axis" && (0, import_jsx_runtime89.jsx)(RadarAxisHighlight, {}), (0, import_jsx_runtime89.jsx)(RadarSeriesMarks, {}), (0, import_jsx_runtime89.jsx)(ChartsOverlay, _extends({}, overlayProps)), !props.loading && (0, import_jsx_runtime89.jsx)(Tooltip, _extends({}, (_b = props.slotProps) == null ? void 0 : _b.tooltip)), children]
      }))]
    }))
  }));
});
true ? RadarChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types61.default.shape({
    current: import_prop_types61.default.object
  }),
  children: import_prop_types61.default.node,
  className: import_prop_types61.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.string), import_prop_types61.default.func]),
  desc: import_prop_types61.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types61.default.bool,
  /**
   * The number of divisions in the radar grid.
   * @default 5
   */
  divisions: import_prop_types61.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types61.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types61.default.bool,
  /**
   * Indicates if the chart should highlight items per axis or per series.
   * @default 'axis'
   */
  highlight: import_prop_types61.default.oneOf(["axis", "none", "series"]),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types61.default.shape({
    dataIndex: import_prop_types61.default.number,
    seriesId: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types61.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types61.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types61.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.shape({
    bottom: import_prop_types61.default.number,
    left: import_prop_types61.default.number,
    right: import_prop_types61.default.number,
    top: import_prop_types61.default.number
  })]),
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types61.default.func,
  /**
   * The configuration of the radar scales.
   */
  radar: import_prop_types61.default.shape({
    labelFormatter: import_prop_types61.default.func,
    labelGap: import_prop_types61.default.number,
    max: import_prop_types61.default.number,
    metrics: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.string), import_prop_types61.default.arrayOf(import_prop_types61.default.shape({
      max: import_prop_types61.default.number,
      min: import_prop_types61.default.number,
      name: import_prop_types61.default.string.isRequired
    }))]).isRequired,
    startAngle: import_prop_types61.default.number
  }).isRequired,
  /**
   * The series to display in the bar chart.
   * An array of [[RadarSeriesType]] objects.
   */
  series: import_prop_types61.default.arrayOf(import_prop_types61.default.object).isRequired,
  /**
   * The grid shape.
   * @default 'sharp'
   */
  shape: import_prop_types61.default.oneOf(["circular", "sharp"]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types61.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types61.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types61.default.object,
  /**
   * Get stripe fill color. Set it to `null` to remove stripes
   * @param {number} index The index of the stripe band.
   * @returns {string} The color to fill the stripe.
   * @default (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : 'none'
   */
  stripeColor: import_prop_types61.default.func,
  sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object]),
  theme: import_prop_types61.default.oneOf(["dark", "light"]),
  title: import_prop_types61.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types61.default.number
} : void 0;
export {
  AXIS_LABEL_DEFAULT_HEIGHT,
  AnimatedArea,
  AnimatedLine,
  AreaElement,
  AreaPlot,
  BarChart,
  BarElement,
  BarLabel,
  BarPlot,
  ChartContainer,
  ChartDataProvider,
  ChartsAxis,
  ChartsAxisHighlight,
  ChartsAxisHighlightPath,
  ChartsAxisTooltipContent,
  ChartsClipPath,
  ChartsGrid,
  ChartsItemTooltipContent,
  ChartsLabelMark,
  ChartsLegend,
  ChartsLocalizationProvider,
  ChartsReferenceLine,
  ChartsSurface,
  ChartsText,
  ChartsTooltip,
  ChartsTooltipCell,
  ChartsTooltipContainer,
  ChartsTooltipPaper,
  ChartsTooltipRow,
  ChartsTooltipTable,
  ChartsXAxis,
  ChartsYAxis,
  ContinuousColorLegend,
  DEFAULT_AXIS_SIZE_HEIGHT,
  DEFAULT_AXIS_SIZE_WIDTH,
  DEFAULT_MARGINS,
  DEFAULT_RADIUS_AXIS_KEY,
  DEFAULT_ROTATION_AXIS_KEY,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  Gauge,
  GaugeContainer,
  GaugeReferenceArc,
  GaugeValueArc,
  GaugeValueText,
  LineChart,
  LineElement,
  LineHighlightElement,
  LineHighlightPlot,
  LinePlot,
  MarkElement,
  MarkPlot,
  PieArc,
  PieArcLabel,
  PieArcLabelPlot,
  PieArcPlot,
  PieChart,
  PiePlot,
  PiecewiseColorLegend,
  RadarAxisHighlight,
  RadarGrid,
  RadarMetricLabels,
  RadarSeriesArea,
  RadarSeriesMarks,
  RadarSeriesPlot,
  Scatter,
  ScatterChart,
  ScatterMarker,
  ScatterPlot,
  SparkLineChart,
  RadarChart as Unstable_RadarChart,
  RadarDataProvider as Unstable_RadarDataProvider,
  areaElementClasses,
  axisClasses,
  barElementClasses,
  barLabelClasses,
  blueberryTwilightPalette,
  blueberryTwilightPaletteDark,
  blueberryTwilightPaletteLight,
  chartsAxisHighlightClasses,
  chartsGridClasses,
  chartsTooltipClasses,
  cheerfulFiestaPalette,
  cheerfulFiestaPaletteDark,
  cheerfulFiestaPaletteLight,
  continuousColorLegendClasses,
  gaugeClasses,
  getAreaElementUtilityClass,
  getAxisHighlightUtilityClass,
  getAxisUtilityClass,
  getBarElementUtilityClass,
  getBarLabelUtilityClass,
  getChartsGridUtilityClass,
  getChartsTooltipUtilityClass,
  getGaugeUtilityClass,
  getHighlightElementUtilityClass,
  getLineElementUtilityClass,
  getMarkElementUtilityClass,
  getPieArcLabelUtilityClass,
  getPieArcUtilityClass,
  getPieCoordinates,
  getReferenceLineUtilityClass,
  getValueToPositionMapper,
  isBarSeries,
  isDefaultizedBarSeries,
  labelClasses,
  labelGradientClasses,
  labelMarkClasses,
  legendClasses,
  lineElementClasses,
  lineHighlightElementClasses,
  mangoFusionPalette,
  mangoFusionPaletteDark,
  mangoFusionPaletteLight,
  markElementClasses,
  pieArcClasses,
  pieArcLabelClasses,
  piecewiseColorDefaultLabelFormatter,
  piecewiseColorLegendClasses,
  radarSeriesPlotClasses,
  rainbowSurgePalette,
  rainbowSurgePaletteDark,
  rainbowSurgePaletteLight,
  referenceLineClasses,
  useAnimate,
  useAnimateArea,
  useAnimateBar,
  useAnimateBarLabel,
  useAnimateLine,
  useAnimatePieArc,
  useAnimatePieArcLabel,
  useAxesTooltip,
  useAxisTooltip,
  useBarSeries,
  useBarSeriesContext,
  useChartGradientId,
  useChartGradientIdObjectBound,
  useChartId2 as useChartId,
  useChartRootRef,
  useChartsLocalization,
  useDrawingArea,
  useGaugeState,
  useItemHighlighted,
  useItemHighlightedGetter,
  useItemTooltip,
  useLegend,
  useLineSeries,
  useLineSeriesContext,
  useMouseTracker,
  usePieSeries,
  usePieSeriesContext,
  useRadarItemTooltip,
  useRadiusAxes,
  useRadiusAxis,
  useRadiusScale,
  useRotationAxes,
  useRotationAxis,
  useRotationScale,
  useScatterSeries,
  useScatterSeriesContext,
  useSeries,
  useSvgRef,
  useUtilityClasses12 as useUtilityClasses,
  useXAxes,
  useXAxis,
  useXColorScale,
  useXScale,
  useYAxes,
  useYAxis,
  useYColorScale,
  useYScale,
  useZAxes,
  useZAxis,
  useZColorScale
};
/*! Bundled license information:

@mui/x-charts/esm/index.js:
  (**
   * @mui/x-charts v8.1.0
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_x-charts.js.map
